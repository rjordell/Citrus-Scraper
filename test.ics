BEGIN:VCALENDAR
VERSION:2.0
PRODID:icalendar-ruby
CALSCALE:GREGORIAN
METHOD:PUBLISH
X-WR-CALNAME:Bilal Nasir Calendar (Canvas)
X-WR-CALDESC:Calendar events for the user\, Bilal Nasir
BEGIN:VEVENT
DTSTAMP:20220331T235700Z
UID:event-assignment-315248
DTSTART:20220401T000000Z
DTEND:20220401T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (3/31/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=03&
 year=2022#assignment_315248
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220401T035600Z
UID:event-assignment-315265
DTSTART:20220402T000000Z
DTEND:20220402T000000Z
CLASS:PUBLIC
DESCRIPTION:***************************************************\nLab #1: In
 troduction to the Arduino Uno & TinkerCAD\n*******************************
 ********************\n\nThis lab will introduce you to the Arduino system.
  TinkerCAD\, an online simulation software.\n\nArduino is mainly composed 
 of 3 things.\n\n* The Arduino IDE (Integrated Developer Environment) 1.8 -
  This software allows you to write\, compile\, and upload code to Arduino 
 platforms. The Arduino IDE also supports many kinds of microcontrollers & 
 boards that will not all be addressed in this course.\n\n* The Arduino UNO
  platform - This is a breakout board that allows you to easily program an 
 Atmega 328p microcontroller via USB. The 328p is not one of the most IO (i
 nput/output) capable microcontrollers\, but it is a good starter board.\n\
 n* The Arduino Software Abstraction & Community libraries - Arduino includ
 es handy software abstractions that allow you to easily work with the soft
 ware while avoiding technical details that involve setting specific hardwa
 re registers for certain configurations. This is mainly done via the ardui
 no.h header file\, which is automatically included & compiled when you com
 pile Arduino software. The setup() and loop() functions you will see in de
 fault ino files are actually defined in this hidden header file. Arduino C
 ode is really C++ code underneath the hood.\n\nTinkerCAD is an online simu
 lation software. After this lab\, you are expected to always implement you
 r labs on the physical Arduino kit\n\nArduino ino files come with two defa
 ult functions\n\nsetup() {\n\n// Code here will be run ONCE at the start o
 f the program\n}\n\nand\n\nloop()\n{\n// Code here will run infinite amoun
 ts of times.\n}\n\nYou will write your code in loop\, and later on will ca
 ll functions that house your state machine.\n\n-------\nPre-lab\n-------\n
 \n* Assemble the circuit diagram on TinkerCAD\n\n* Run the sample code\n\n
 * If the sample code works:\n\n* Create a video of the output and put the 
 link to it in your report\n\n* Submit this report to Gradescope as a pdf b
 efore Friday 5pm (You don't need to submit the code)\n\n* If the sample co
 de doesn't work\n\n* Check your circuit diagram\, there shouldn't be hardw
 are failures on tinkercad\n\n* If issues persist\, contact a TA.\n\n* Esse
 ntially\, you must have proof you got your circuit working before Friday 5
 pm\, or have contacted the Part's Assistants\n\nSample Code\n-----------\n
 \nWe will go over some software concepts now.\n\n* Variables for Pins\n\n*
  Helper functions\n\n* Buffers\, Bit shifting\, and masking\n\nHere is a t
 emplate of provided code you can copy into an ino file. Note that we alrea
 dy have setup & loop.\n\n// Array of Output Pin variables\, set to the pin
 s being used\nconst int b_size = 4\;\nconst int b[b_size] = {2\, 3\, 4\, 5
 }\;\n// Output Buffer\nint b_buf = 0x00\;\n// Input Variables\n\n// Serial
  Monitor Buffer\nint s_buf = 0x00\;\n\n/* 's' is an array of integers of s
 ize 8. Note that arrays start at 0\nWe will use this to be able to see the
  individual bit values of the s_buf\n\n*/\nconst int s_size = 8\;\nint s[s
 _size]\;\n\n// We can also define our own helper functions. It is a good i
 dea to use helper functions whenever they make sense.\n// Normally we also
  define the return type (void for none)\n\n// Read from the serial monitor
  into s_buf and the s[] array for individual bits\nvoid readData()\n{\nif(
 Serial.available())\ns_buf = Serial.parseInt()\;\n\nfor(int i = (s_size - 
 1)\; i>=0\; i--) {\ns[i] = (s_buf >> i) & 0x01\; // What's going on here?\
 n// ">>" bit shifting\n// "&" bit masking\n}\n\n}\n// Reset the Output Buf
 fer.\nvoid resetBuffer() {\nfor(int i = 0\; i < b_size\; i++) {\n// Note t
 his is an arduino function call to the pins\ndigitalWrite(b[i]\, LOW)\;\n}
 \n}\n// Writes to the buffer. Note this function ORs the current value wit
 h the new value\n// Note that size is an optional argument with default si
 ze the same as the buffer\nvoid writeBuffer(unsigned char b_temp\, int siz
 e = b_size)\n{\nfor (int i = (size - 1)\; i >= 0\; i--) {\nif ((b_temp >> 
 i) & 0x01) {\ndigitalWrite(b[i]\, HIGH)\;\n}\n}\n\n}\n\nvoid setup() {\n//
  OUTPUT is a defined macro in Arduino!\nfor(int i = 0\; i < b_size\; i++)\
 n{\npinMode(b[i]\, OUTPUT)\;\n}\n// We will also read from the serial moni
 tor\nSerial.begin(9600)\;\n}\n\nvoid loop() {\nreadData()\;\nresetBuffer()
 \;\n// Note that here we arbitrarily connect b_buf & s_buf together. The i
 mportant point is that we preserve the current value of the output buffer 
 into a variable b_buf before writing it to the pins. If we resetBuffer or 
 readData() again\, we still know the values the output is set to\, because
  it is in b_buf.\nb_buf = s_buf\;\nwriteBuffer(b_buf)\;\n\n}\n\nNOTE: In Z
 yBooks\, the C code uses a main function (ran only once) that has an infin
 ite while-loop inside of it to run the State Machine. You don't need to de
 fine an extra nested while-loop inside the Arduino loop() function.\n\n---
 ---------------------\nRubric - 20 Points Total\n------------------------\
 n\n* Exercise 1 Serial LED - 10 Points\n\n* Exercise 2 LED Counter - 10 Po
 ints\n\nSoftware Requirement\n--------------------\n\n* TinkerCAD https://
 www.tinkercad.com/\n\n* Sign in with Google using your UCR NetID\, Passwor
 d\, and 2FA authorization\n\n* On the left-hand tab\, click on "Circuits"\
 n\n* In the main window under "Circuits"\, click on "create a new circuit"
 \n\n* Arduino 1.8 Installation: https://www.arduino.cc/en/software\n\n* No
 t used in this lab\, but make sure to have it working for the next lab\n\n
 Notes:\n\n* You are allowed to create helper functions.\n\n* Delay functio
 n calls should never be inside a state machine.\n\n* If you set a period t
 oo small\, you may see weird timing behavior\n\n--------------\nParts & Wi
 ring\n--------------\n\n[arduino.png] (https://elearn.ucr.edu/courses/4881
 6/files/3104168/preview)\n\nDescription: Here is an example Arduino R3 UNO
  Board. Arduino is a brand\, so an Elegoo R3 Uno Board is the same part\, 
 just different brands. There are a variety of labels here\, so let's go th
 rough them\n\n*\n\nPOWER - These pins deal with power. GND is your ground.
  There are multiple GND spots on the Arduino. 3.3v & 5v are power outputs 
 from the Arduino board to whatever circuit you need.\n\n*\n\nDIGITAL - Pin
 s 0-13 are digital pins. They can be set as input or output. Pins marked w
 ith a tilde (~) are also PWM (Pulse-Width Modulo) capable pins. We won't g
 o over PWM right now.\n\n*\n\nANALOG IN - Pins A0-A5 are analog input pins
 . Note that Analog In pins can also be considered as digital input pins. N
 ote that in Arduino\, "A0" is actually just defined as the number 14 under
  the hood.\n\n*\n\nTX/RX are your send & receive pins for UART communicati
 on. We won't go over UART communication until nearly the end of the quarte
 r\, but Digital Pins 0 and 1 are also UART pins.\n\nWiring Diagram\n------
 --------\n\n[lab1_s22_w1.png] (https://elearn.ucr.edu/courses/48816/files/
 3104130/preview)\n\nSet up TinkerCAD to have a wiring setup like this. In 
 future labs\, these diagrams will represent what you have to implement on 
 your physical kit for a lab.\n\nParts used (in TinkerCAD)\n---------------
 ----------\n\n* 4x LEDs\n\n* 4x 220Ohm resistors\n\n* 1x 1k resistor\n\n* 
 2x Buttons\n\n* 1x PULLUP Configuration (Y)\n\n* 1x PULLDOWN Configuration
  (X)\n\n* Wires\n\n---------\nExercises\n---------\n\nThe exercises are as
  follows\n\nExercise 1: Serial LED\n----------------------\n\nExample Demo
 : https://youtu.be/yrsZAKB0sUA\n\nDescription: The first exercise involves
  understanding how the sample code works.\n\nProblem: There is a bug in th
 e sample code where the size of the serial monitor is 8 bits\, but the LED
  output buffer is only 4 bits. Use the Arduino [map function] (https://www
 .arduino.cc/reference/en/language/functions/math/map/) and modify the loop
  function so up so that around a 256 value lights up all 4 LEDs and 0 ligh
 ts up none\, but the value 126 shouldn't light up all the LEDs.\n\nExercis
 e 1 Deliverables\n-----------------------\n\n* Serial Monitor numerical in
 put lights up LEDs - 5 points\n\n* Correct range remapping - 5 points.\n\n
 Exercise 2: LED Counter\n-----------------------\n\nExample Demo: https://
 youtu.be/Rh3sqMBBE9c\n\nArduino uses the macros HIGH to represent 0x01\, a
 nd LOW to represent 0x00. These macros are useful to check if a button rea
 ding is 1 or 0. There are two kinds of button configurations you can use w
 ith push buttons. Both versions are shown in the wiring diagram. The left 
 version. Button 'X' to pin 8 is in "Pull-down" mode and is the default con
 figuration. The button defaults to LOW\, and pressing the button has it re
 ad as HIGH. The code to configure it looks like this:\n\npinMode(X\, INPUT
 )\;\n\nButton 'Y' to pin 9 is in "Pull-up" mode. This mode defaults the bu
 tton reading as HIGH when not pressed\, and LOW when pressed. The code to 
 configure it looks like this:\n\npinMode(Y\, INPUT_PULLUP)\;\n\nYou can re
 ad the value of a digital pin using:\n\ndigitalRead(X)\;\n\nThis function 
 returns HIGH in INPUT mode if the button is pressed\, and LOW in INPUT_PUL
 LUP if the button is pressed.\n\nProblem: Create a system that starts with
  all LEDs off. Pressing 'X' turns on 1 LED. Pressing 'X' again turns on an
 other LED. You can repeat this up until all 4 LEDs are lit. Pressing 'Y" t
 urns off 1 LED if any are on. You can do this in any order.\n\nChallenge: 
 A single button press should mean only 1 LED turns on or 1 LED turns off o
 r nothing happens. Holding the button down should have no difference from 
 a single press. This concept will be gone over in Tuesday 4/5's lecture. 
 Try and see if you can implement this functionality. You won't be penaliz
 ed for not completing it. \n\nNote that the default writeBuffer represent
 s a binary output\, but we expect the LEDs to count up in an integer fashi
 on. You may have to modify or create a helper function that outputs the bu
 ffer in this modified manner.\n\nFor full credit\, create a helper functio
 n that abstracts away the difference between PULLUP or PULLDOWN mode. The 
 helper function should always return HIGH if the button is pressed\, regar
 dless of its configuration.\n\nHint: Keep track of your button configurati
 on with a data structure where the key is the pin number of the button\, a
 nd the value is a number where 0 for PullDown\, 1 for PullUp. You may use 
 arrays\, variables\, helper functions as you see fit. \n\nExercise 2 Deli
 verables\n-----------------------\n\n* The system behaves as described (LE
 D bank does not display binary) - 5 points\n\n* Helper function that if th
 e button is pressed\, it always returns HIGH - 5 points\n\n***************
 ********\nGradescope Instructions\n***********************\n\nMake two sho
 rt screen-capture videos demonstrating correct functionality for each of t
 he two exercises.\n\nPost your screen-capture videos to the hosting servic
 e or Cloud-based storage solution of your choice. Edit the header file for
  each laboratory exercise to contain a link to the corresponding video. Cr
 eate a PDF file named [NetID]_lab1.pdf that contains two clickable URL lin
 ks to the two videos. Rename the two .ino files to have the .cpp file exte
 nsion Upload the following files Gradescope\n\n* [NetID]_lab1.pdf\n\n* [Ne
 tID]_lab1_part1.cpp\n\n* [NetID]_lab1_part2.cpp\n\n-----------------------
 --\nLab Submission Guidelines\n-------------------------\n\nPlease follow 
 all requirements in the [Lab submission Guidelines] (https://elearn.ucr.ed
 u/courses/48816/pages/laboratory-submission-guidelines)
SEQUENCE:0
SUMMARY:Laboratory Assignment #1: Introduction to the Arduino Uno and Tinke
 rCAD [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315265
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><h1>Lab #1: Introduction to the Arduino Uno &amp\; 
 TinkerCAD</h1>\n<p>This lab will introduce you to the Arduino system. Tink
 erCAD\, an online simulation software.</p>\n<p>Arduino is mainly composed 
 of 3 things.</p>\n<ol>\n<li>The Arduino IDE (Integrated Developer Environm
 ent) 1.8 - This software allows you to write\, compile\, and upload code t
 o Arduino platforms. The Arduino IDE also supports many kinds of microcont
 rollers &amp\; boards that will not all be addressed in this course.</li>\
 n<li>The Arduino UNO platform - This is a breakout board that allows you t
 o easily program an Atmega 328p microcontroller via USB. The 328p is not o
 ne of the most IO (input/output) capable microcontrollers\, but it is a go
 od starter board.</li>\n<li>The Arduino Software Abstraction &amp\; Commun
 ity libraries - Arduino includes handy software abstractions that allow yo
 u to easily work with the software while avoiding technical details that i
 nvolve setting specific hardware registers for certain configurations. Thi
 s is mainly done via the arduino.h header file\, which is automatically in
 cluded &amp\; compiled when you compile Arduino software. The setup() and 
 loop() functions you will see in default ino files are actually defined in
  this hidden header file. Arduino Code is really C++ code underneath the h
 ood.</li>\n</ol>\n<p>TinkerCAD is an online simulation software. <strong>A
 fter this lab\, you are expected to always implement your labs on the phys
 ical Arduino kit</strong></p>\n<p>Arduino ino files come with two default 
 functions</p>\n<pre><code class="language-c++">setup() {\n\n// Code here w
 ill be run ONCE at the start of the program\n}\n</code></pre>\n<p>and</p>\
 n<pre><code class="language-C++">loop()\n{\n // Code here will run infinit
 e amounts of times. \n}\n</code></pre>\n<p>You will write your code in loo
 p\, and later on will call functions that house your state machine.</p>\n<
 h2>Pre-lab</h2>\n<ul>\n<li>Assemble the circuit diagram on TinkerCAD</li>\
 n<li>Run the sample code</li>\n<li>If the sample code works:\n<ul>\n<li>Cr
 eate a video of the output and put the link to it in your report</li>\n<li
 >Submit this report to Gradescope as a pdf before Friday 5pm (You don't ne
 ed to submit the code)</li>\n</ul>\n</li>\n<li>If the sample code doesn't 
 work\n<ul>\n<li>Check your circuit diagram\, there shouldn't be hardware f
 ailures on tinkercad</li>\n<li>If issues persist\, contact a TA.</li>\n</u
 l>\n</li>\n<li>Essentially\, you must have proof you got your circuit work
 ing before Friday 5pm\, or have contacted the Part's Assistants</li>\n</ul
 >\n<h3>Sample Code</h3>\n<p>We will go over some software concepts now.</p
 >\n<ol>\n<li>Variables for Pins</li>\n<li>Helper functions</li>\n<li>Buffe
 rs\, Bit shifting\, and masking</li>\n</ol>\n<p>Here is a template of prov
 ided code you can copy into an ino file. Note that we already have setup &
 amp\; loop.</p>\n<div style="background: #ffffff\; overflow: auto\; width:
  auto\; border: solid gray\; border-width: .1em .1em .1em .8em\; padding: 
 .2em .6em\;">\n<pre style="margin: 0\; line-height: 125%\;"><span style="c
 olor: #aaaaaa\; font-style: italic\;">// Array of Output Pin variables\, s
 et to the pins being used</span>\n<span style="color: #0000aa\;">const</sp
 an> <span style="color: #00aaaa\;">int</span> b_size = <span style="color:
  #009999\;">4</span>\;\n<span style="color: #0000aa\;">const</span> <span 
 style="color: #00aaaa\;">int</span> b[b_size] = {<span style="color: #0099
 99\;">2</span>\, <span style="color: #009999\;">3</span>\, <span style="co
 lor: #009999\;">4</span>\, <span style="color: #009999\;">5</span>}\;\n<sp
 an style="color: #aaaaaa\; font-style: italic\;">// Output Buffer</span>\n
 <span style="color: #00aaaa\;">int</span> b_buf = <span style="color: #009
 999\;">0x00</span>\;\n<span style="color: #aaaaaa\; font-style: italic\;">
 // Input Variables</span>\n\n<span style="color: #aaaaaa\; font-style: ita
 lic\;">// Serial Monitor Buffer</span>\n<span style="color: #00aaaa\;">int
 </span> s_buf = <span style="color: #009999\;">0x00</span>\; \n\n<span sty
 le="color: #aaaaaa\; font-style: italic\;">/* 's' is an array of integers 
 of size 8. Note that arrays start at 0</span>\n<span style="color: #aaaaaa
 \; font-style: italic\;"> We will use this to be able to see the individua
 l bit values of the s_buf</span>\n\n<span style="color: #aaaaaa\; font-sty
 le: italic\;"> */</span>\n<span style="color: #0000aa\;">const</span> <spa
 n style="color: #00aaaa\;">int</span> s_size = <span style="color: #009999
 \;">8</span>\;\n<span style="color: #00aaaa\;">int</span> s[s_size]\;\n\n<
 span style="color: #aaaaaa\; font-style: italic\;">// We can also define o
 ur own helper functions. It is a good idea to use helper functions wheneve
 r they make sense.</span>\n<span style="color: #aaaaaa\; font-style: itali
 c\;">// Normally we also define the return type (void for none)</span>\n\n
 <span style="color: #aaaaaa\; font-style: italic\;">// Read from the seria
 l monitor into s_buf and the s[] array for individual bits</span>\n<span s
 tyle="color: #00aaaa\;">void</span> <span style="color: #00aa00\;">readDat
 a</span>()\n{\n    <span style="color: #0000aa\;">if</span>(Serial.availab
 le())\n        s_buf = Serial.parseInt()\;\n\n    <span style="color: #000
 0aa\;">for</span>(<span style="color: #00aaaa\;">int</span> i = (s_size - 
 <span style="color: #009999\;">1</span>)\; i&gt\;=<span style="color: #009
 999\;">0</span>\; i--)  { \n        s[i] = (s_buf &gt\;&gt\; i) &amp\; <sp
 an style="color: #009999\;">0x01</span>\; <span style="color: #aaaaaa\; fo
 nt-style: italic\;">// What's going on here?</span>\n        <span style="
 color: #aaaaaa\; font-style: italic\;">// "&gt\;&gt\;" bit shifting </span
 >\n        <span style="color: #aaaaaa\; font-style: italic\;">// "&amp\;"
  bit masking</span>\n    }\n\n}\n<span style="color: #aaaaaa\; font-style:
  italic\;">// Reset the Output Buffer. </span>\n<span style="color: #00aaa
 a\;">void</span> <span style="color: #00aa00\;">resetBuffer</span>() {\n  
   <span style="color: #0000aa\;">for</span>(<span style="color: #00aaaa\;"
 >int</span> i = <span style="color: #009999\;">0</span>\; i &lt\; b_size\;
  i++) {\n        <span style="color: #aaaaaa\; font-style: italic\;">// No
 te this is an arduino function call to the pins</span>\n        digitalWri
 te(b[i]\, LOW)\;\n    }\n}\n<span style="color: #aaaaaa\; font-style: ital
 ic\;">// Writes to the buffer. Note this function ORs the current value wi
 th the new value</span>\n<span style="color: #aaaaaa\; font-style: italic\
 ;">// Note that size is an optional argument with default size the same as
  the buffer</span>\n<span style="color: #00aaaa\;">void</span> <span style
 ="color: #00aa00\;">writeBuffer</span>(<span style="color: #00aaaa\;">unsi
 gned</span> <span style="color: #00aaaa\;">char</span> b_temp\, <span styl
 e="color: #00aaaa\;">int</span> size = b_size)\n{\n    <span style="color:
  #0000aa\;">for</span> (<span style="color: #00aaaa\;">int</span> i = (siz
 e - <span style="color: #009999\;">1</span>)\; i &gt\;= <span style="color
 : #009999\;">0</span>\; i--) {\n        <span style="color: #0000aa\;">if<
 /span> ((b_temp &gt\;&gt\; i) &amp\; <span style="color: #009999\;">0x01</
 span>) {\n        digitalWrite(b[i]\, HIGH)\;\n        }\n    }\n\n}\n\n\n
 \n\n<span style="color: #00aaaa\;">void</span> <span style="color: #00aa00
 \;">setup</span>() {\n    <span style="color: #aaaaaa\; font-style: italic
 \;">// OUTPUT is a defined macro in Arduino!</span>\n    <span style="colo
 r: #0000aa\;">for</span>(<span style="color: #00aaaa\;">int</span> i = <sp
 an style="color: #009999\;">0</span>\; i &lt\; b_size\; i++)\n    {\n     
    pinMode(b[i]\, OUTPUT)\;\n    }\n    <span style="color: #aaaaaa\; font
 -style: italic\;">// We will also read from the serial monitor</span>\n   
  Serial.begin(<span style="color: #009999\;">9600</span>)\;\n}\n\n<span st
 yle="color: #00aaaa\;">void</span> <span style="color: #00aa00\;">loop</sp
 an>() {\n    readData()\;\n    resetBuffer()\;\n    <span style="color: #a
 aaaaa\; font-style: italic\;">// Note that here we arbitrarily connect b_b
 uf &amp\; s_buf together. The important point is that we preserve the curr
 ent value of the output buffer into a variable b_buf before writing it to 
 the pins. If we resetBuffer or readData() again\, we still know the values
  the output is set to\, because it is in b_buf. </span>\n    b_buf = s_buf
 \;\n    writeBuffer(b_buf)\;\n   \n}\n</pre>\n</div>\n<p>NOTE: In ZyBooks\
 , the C code uses a main function (ran only once) that has an infinite whi
 le-loop inside of it to run the State Machine. You don't need to define an
  extra nested while-loop inside the Arduino loop() function.</p>\n<h2>Rubr
 ic - 20 Points Total</h2>\n<ul>\n<li>Exercise 1 Serial LED - 10 Points</li
 >\n<li>Exercise 2 LED Counter - 10 Points</li>\n</ul>\n<h3>Software Requir
 ement</h3>\n<ul>\n<li>TinkerCAD https://www.tinkercad.com/\n<ol>\n<li>Sign
  in with Google using your UCR NetID\, Password\, and 2FA authorization</l
 i>\n<li>On the left-hand tab\, click on "Circuits"</li>\n<li>In the main w
 indow under "Circuits"\, click on "create a new circuit"</li>\n</ol>\n</li
 >\n<li>Arduino 1.8 Installation: https://www.arduino.cc/en/software\n<ul>\
 n<li>Not used in this lab\, but make sure to have it working for the next 
 lab</li>\n</ul>\n</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>You are allowed to
  create helper functions.</li>\n<li>Delay function calls should never be i
 nside a state machine.</li>\n<li>If you set a period too small\, you may s
 ee weird timing behavior</li>\n</ul>\n<h2>Parts &amp\; Wiring</h2>\n<p><im
 g id="3104168" src="https://elearn.ucr.edu/courses/48816/files/3104168/pre
 view" alt="arduino.png" data-api-endpoint="https://elearn.ucr.edu/api/v1/c
 ourses/48816/files/3104168" data-api-returntype="File"></p>\n<p>Descriptio
 n: Here is an example Arduino R3 UNO Board. Arduino is a brand\, so an Ele
 goo R3 Uno Board is the same part\, just different brands. There are a var
 iety of labels here\, so let's go through them</p>\n<ul>\n<li>\n<p>POWER -
  These pins deal with power. GND is your ground. There are multiple GND sp
 ots on the Arduino. 3.3v &amp\; 5v are power outputs from the Arduino boar
 d to whatever circuit you need.</p>\n</li>\n<li>\n<p>DIGITAL - Pins 0-13 a
 re digital pins. They can be set as input or output. Pins marked with a ti
 lde (~) are also PWM (Pulse-Width Modulo) capable pins. We won't go over P
 WM right now.</p>\n</li>\n<li>\n<p>ANALOG IN - Pins A0-A5 are analog input
  pins. Note that Analog In pins can also be considered as digital input pi
 ns. Note that in Arduino\, "A0" is actually just defined as the number 14 
 under the hood.</p>\n</li>\n<li>\n<p>TX/RX are your send &amp\; receive pi
 ns for UART communication. We won't go over UART communication until nearl
 y the end of the quarter\, but Digital Pins 0 and 1 are also UART pins.</p
 >\n</li>\n</ul>\n<h3>Wiring Diagram</h3>\n<p><img id="3104130" src="https:
 //elearn.ucr.edu/courses/48816/files/3104130/preview" alt="lab1_s22_w1.png
 " data-api-endpoint="https://elearn.ucr.edu/api/v1/courses/48816/files/310
 4130" data-api-returntype="File"></p>\n<p>Set up TinkerCAD to have a wirin
 g setup like this. In future labs\, these diagrams will represent what you
  have to implement on your physical kit for a lab.</p>\n<h3>Parts used (in
  TinkerCAD)</h3>\n<ul>\n<li>4x LEDs</li>\n<li>4x 220Ohm resistors</li>\n<l
 i>1x 1k resistor</li>\n<li>2x Buttons\n<ul>\n<li>1x PULLUP Configuration (
 Y)</li>\n<li>1x PULLDOWN Configuration (X)</li>\n</ul>\n</li>\n<li>Wires</
 li>\n</ul>\n<h2>Exercises</h2>\n<p>The exercises are as follows</p>\n<h3>E
 xercise 1: Serial LED</h3>\n<p>Example Demo: <a href="https://youtu.be/yrs
 ZAKB0sUA" target="_blank">https://youtu.be/yrsZAKB0sUA</a></p>\n<p>Descrip
 tion: The first exercise involves understanding how the sample code works.
 </p>\n<p>Problem: There is a bug in the sample code where the size of the 
 serial monitor is 8 bits\, but the LED output buffer is only 4 bits. Use t
 he Arduino <a href="https://www.arduino.cc/reference/en/language/functions
 /math/map/">map function</a> and modify the loop function so up so that ar
 ound a 256 value lights up all 4 LEDs and 0 lights up none\, but the value
  126 shouldn't light up all the LEDs.</p>\n<h4>Exercise 1 Deliverables</h4
 >\n<ul>\n<li>Serial Monitor numerical input lights up LEDs - 5 points</li>
 \n<li>Correct range remapping - 5 points.</li>\n</ul>\n<h3>Exercise 2: LED
  Counter</h3>\n<p>Example Demo: <a href="https://youtu.be/Rh3sqMBBE9c" tar
 get="_blank">https://youtu.be/Rh3sqMBBE9c</a></p>\n<p>Arduino uses the mac
 ros HIGH to represent 0x01\, and LOW to represent 0x00. These macros are u
 seful to check if a button reading is 1 or 0. There are two kinds of butto
 n configurations you can use with push buttons. Both versions are shown in
  the wiring diagram. The left version. Button 'X' to pin 8 is in "Pull-dow
 n" mode and is the default configuration. The button defaults to LOW\, and
  pressing the button has it read as HIGH. The code to configure it looks l
 ike this:</p>\n<pre><code class="language-c++">pinMode(X\, INPUT)\;\n</cod
 e></pre>\n<p>Button 'Y' to pin 9 is in "Pull-up" mode. This mode defaults 
 the button reading as HIGH when not pressed\, and LOW when pressed. The co
 de to configure it looks like this:</p>\n<pre><code class="language-c++">p
 inMode(Y\, INPUT_PULLUP)\;\n</code></pre>\n<p>You can read the value of a 
 digital pin using:</p>\n<pre><code class="language-c++">digitalRead(X)\;\n
 </code></pre>\n<p>This function returns HIGH in INPUT mode if the button i
 s pressed\, and LOW in INPUT_PULLUP if the button is pressed.</p>\n<p>Prob
 lem: Create a system that starts with all LEDs off. Pressing 'X' turns on 
 1 LED. Pressing 'X' again turns on another LED. You can repeat this up unt
 il all 4 LEDs are lit. Pressing 'Y" turns off 1 LED if any are on. You can
  do this in any order.</p>\n<p><strong>Challenge</strong>: A single button
  press should mean only 1 LED turns on or 1 LED turns off or nothing happe
 ns. Holding the button down should have no difference from a single press.
 &nbsp\;<em>This concept will be gone over in Tuesday 4/5's lecture. Try an
 d see if you can implement this functionality.&nbsp\;</em><em>You won't be
  penalized for not completing it.&nbsp\;</em></p>\n<p>Note that the defaul
 t writeBuffer represents a binary output\, but we expect the LEDs to count
  up in an integer fashion. You may have to modify or create a helper funct
 ion that outputs the buffer in this modified manner.</p>\n<p>For full cred
 it\, create a helper function that abstracts away the difference between P
 ULLUP or PULLDOWN mode. The helper function should always return HIGH if t
 he button is pressed\, regardless of its configuration.</p>\n<p>Hint: Keep
  track of your button configuration with a data structure where the key is
  the pin number of the button\, and the value is a number where 0 for Pull
 Down\, 1 for PullUp. You may use arrays\, variables\, helper functions as 
 you see fit.&nbsp\;</p>\n<h4>Exercise 2 Deliverables</h4>\n<ul>\n<li>The s
 ystem behaves as described (LED bank does not display binary) - 5 points</
 li>\n<li>Helper function that if the button is pressed\, it always returns
  HIGH - 5 points</li>\n</ul>\n<h1>Gradescope Instructions</h1>\n<p>Make tw
 o short screen-capture videos demonstrating correct functionality for each
  of the two exercises.</p>\n<p>Post your screen-capture videos to the host
 ing service or Cloud-based storage solution of your choice. Edit the heade
 r file for each laboratory exercise to contain a link to the corresponding
  video. Create a PDF file named [NetID]_lab1.pdf that contains two clickab
 le URL links to the two videos. Rename the two .ino files to have the .cpp
  file extension Upload the following files Gradescope</p>\n<ul>\n<li>[NetI
 D]_lab1.pdf</li>\n<li>[NetID]_lab1_part1.cpp</li>\n<li>[NetID]_lab1_part2.
 cpp</li>\n</ul>\n<h2>Lab Submission Guidelines</h2>\n<p>Please follow all 
 requirements in the <a class="inline_disabled" href="https://elearn.ucr.ed
 u/courses/48816/pages/laboratory-submission-guidelines" target="_blank" da
 ta-api-endpoint="https://elearn.ucr.edu/api/v1/courses/48816/pages/laborat
 ory-submission-guidelines" data-api-returntype="Page">Lab submission Guide
 lines</a></p><script src="https://instructure-uploads.s3.amazonaws.com/acc
 ount_144930000000000001/attachments/178366/canvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220401T043100Z
UID:event-assignment-315264
DTSTART:20220402T000000Z
DTEND:20220402T000000Z
CLASS:PUBLIC
DESCRIPTION:**************\nLab 0 Tutorial\n**************\n\nThis lab is w
 orth 0 points and is to guide you through reading labs & submitting to gra
 descope. This way you are familiar with the layout of labs & correctly sub
 mitting to gradescope\n\n-----------------------\nRubric - 0 Points Total\
 n-----------------------\n\n* Exercise 1 - 0 Points\n\n-------\nPre-lab\n-
 ------\n\n* Assemble the circuit diagram on TinkerCAD\n\n* Run the sample 
 code\n\n* If the sample code works:\n\n* Create a video of the output and 
 put the link to it in your report\n\n* Submit this report to gradescope as
  a pdf before friday 5pm (You don't need to submit the code)\n\n* If the s
 ample code doesn't work\n\n* check your circuit diagram\, there shouldnt b
 e hardware failures on tinkercad\n\n* if issues persist\, contact the TA.\
 n\n* Essentially\, you must have proof you got your circuit working before
  friday 5pm\, or have contacted the Part's Assistants\n\nSoftware Requirem
 ent\n--------------------\n\n* None\n\nNotes:\n\n* You are allowed to crea
 te helper functions.\n\n* Delay() function calls should never be inside a 
 state machine.\n\n* If you set a state machine period too small\, you may 
 see weird timing behavior\n\n--------------\nParts & Wiring\n-------------
 -\n\nWiring Diagram\n--------------\n\n[lab_0_s22_image1.png] (https://ele
 arn.ucr.edu/courses/48816/files/3104129/preview)\n\nDescription: This is a
  sample wiring diagram of a Green LED and a button.\n\nThe Green LED has i
 ts Cathode wired to a 220 Ohm resistor which is wired to ground (black wir
 e). The Green LED has its Anode wired to Pin 5 on the Arduino (Green Wire)
 . You would set Pin 5 as a digital output with value 1 to turn the LED on\
 n\nThere is a button in PULLDOWN (Default configuration) mode. This means 
 the button has one side connected to power\, and the other side connected 
 to a 220  Ohm resistor to ground (black wire). The invisible blue wire on
  top connects to digital pin 4. You would set pin 4 as a digital input to 
 read whether or not the button was on. In PULLDOWN configuration\, HIGH me
 ans the button is pressed. LOW means the button is not pressed.\n\nParts u
 sed (Tinkercad)\n----------------------\n\n* 1x Buttons\n\n* 1x LEDs\n\n* 
 Wires\n\n* Resistors (220Ohm)\n\nSample Code\n-----------\n\nvoid setup() 
 {\npinMode(5\, OUTPUT)\;\nSerial.begin(9600)\;\n}\n\nvoid loop() {\ndigita
 lWrite(5\, HIGH)\;\n}\n\n---------\nExercises\n---------\n\nThe exercises 
 are as follows.\n\nExercise 0\n----------\n\nThis exercise will walk you t
 hrough submitting.\n\n*\n\ndownload the file [NetID_lab0_part1.ino] (https
 ://elearn.ucr.edu/courses/48816/files/3104244?wrap=1)\n\n*\n\nRename the f
 ile:\n\nReplace "NetID" with your NetID (e.g.\, pbrisk) Rename the file ex
 tension to .cpp\n\nNOTE: This changes the file type. If you submit your fi
 le to gradescope and it shows as .cpp.ino. That means you did this step in
 correctly!\n\nFor example\, the instructor's submission would be renamed: 
 pbrisk_lab0_part1.cpp\n\n*\n\nDownload the file [NetID_lab0.pdf] (https://
 elearn.ucr.edu/courses/48816/files/3068865?wrap=1) (note: these videos are
 n't representative of what the sample code should do)\n\n*\n\nRename the f
 ile:\n\nReplace "NetID" with your NetID (e.g.\, pbrisk) For example\, the 
 instructor's submission would be renamed: pbrisk_lab0.pdf\n\n*\n\nLogin to
  Gradescope and look under "Active Assignments"\n\n*\n\nSubmit both files 
 to "Laboratory Assignment 0 (Tutorial -- No grade)"\n\nExercise 0 Delivera
 bles\n-----------------------\n\n* Properly renamed cpp file extension - 0
  points\n\n* Properly renamed pdf file - 0 points\n\n---------------------
 ----\nLab Submission Guidelines\n-------------------------\n\nPlease follo
 w all requirements in the [Lab submission Guidelines] (https://elearn.ucr.
 edu/courses/48816/pages/laboratory-submission-guidelines)
SEQUENCE:0
SUMMARY:Laboratory Assignment 0 (Tutorial -- no grade) [CS_120B_001\, EE_12
 0B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315264
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><h1>Lab 0 Tutorial</h1>\n<p>This lab is worth 0 poi
 nts and is to guide you through reading labs &amp\; submitting to gradesco
 pe. This way you are familiar with the layout of labs &amp\; correctly sub
 mitting to gradescope</p>\n<h2>Rubric - 0 Points Total</h2>\n<ul>\n<li>Exe
 rcise 1 - 0 Points</li>\n</ul>\n<h2>Pre-lab</h2>\n<ul>\n<li>Assemble the c
 ircuit diagram on TinkerCAD</li>\n<li>Run the sample code</li>\n<li>If the
  sample code works:\n<ul>\n<li>Create a video of the output and put the li
 nk to it in your report</li>\n<li>Submit this report to gradescope as a pd
 f before friday 5pm (You don't need to submit the code)</li>\n</ul>\n</li>
 \n<li>If the sample code doesn't work\n<ul>\n<li>check your circuit diagra
 m\, there shouldnt be hardware failures on tinkercad</li>\n<li>if issues p
 ersist\, contact the TA.</li>\n</ul>\n</li>\n<li>Essentially\, you must ha
 ve proof you got your circuit working before friday 5pm\, or have contacte
 d the Part's Assistants</li>\n</ul>\n<h3>Software Requirement</h3>\n<ul>\n
 <li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>You are allowed to create h
 elper functions.</li>\n<li>Delay() function calls should never be inside a
  state machine.</li>\n<li>If you set a state machine period too small\, yo
 u may see weird timing behavior</li>\n</ul>\n<h2>Parts &amp\; Wiring</h2>\
 n<h3>Wiring Diagram</h3>\n<p><img id="3104129" src="https://elearn.ucr.edu
 /courses/48816/files/3104129/preview" alt="lab_0_s22_image1.png" data-api-
 endpoint="https://elearn.ucr.edu/api/v1/courses/48816/files/3104129" data-
 api-returntype="File"></p>\n<p>Description: This is a sample wiring diagra
 m of a Green LED and a button.</p>\n<p>The Green LED has its Cathode wired
  to a 220 Ohm resistor which is wired to ground (black wire). The Green LE
 D has its Anode wired to Pin 5 on the Arduino (Green Wire). You would set 
 Pin 5 as a digital output with value 1 to turn the LED on</p>\n<p>There is
  a button in PULLDOWN (Default configuration) mode. This means the button 
 has one side connected to power\, and the other side connected to a 220&nb
 sp\; Ohm resistor to ground (black wire). The invisible blue wire on top c
 onnects to digital pin 4. You would set pin 4 as a digital input to read w
 hether or not the button was on. In PULLDOWN configuration\, HIGH means th
 e button is pressed. LOW means the button is not pressed.</p>\n<h3>Parts u
 sed (Tinkercad)</h3>\n<ul>\n<li>1x Buttons</li>\n<li>1x LEDs</li>\n<li>Wir
 es</li>\n<li>Resistors (220Ohm)</li>\n</ul>\n<h3>Sample Code</h3>\n<div st
 yle="background: #ffffff\; overflow: auto\; width: auto\; border: solid gr
 ay\; border-width: .1em .1em .1em .8em\; padding: .2em .6em\;">\n<pre styl
 e="margin: 0\; line-height: 125%\;"><span style="color: #00aaaa\;">void</s
 pan> <span style="color: #00aa00\;">setup</span>() {\n    pinMode(<span st
 yle="color: #009999\;">5</span>\, OUTPUT)\;\n    Serial.begin(<span style=
 "color: #009999\;">9600</span>)\;\n}\n\n<span style="color: #00aaaa\;">voi
 d</span> <span style="color: #00aa00\;">loop</span>() {\n    digitalWrite(
 <span style="color: #009999\;">5</span>\, HIGH)\;\n}\n</pre>\n</div>\n<h2>
 Exercises</h2>\n<p>The exercises are as follows.</p>\n<h3>Exercise 0</h3>\
 n<p>This exercise will walk you through submitting.</p>\n<ol>\n<li>\n<p>do
 wnload the file <a class="instructure_file_link inline_disabled" title="cs
 login_lab0_part1.ino" href="https://elearn.ucr.edu/courses/48816/files/310
 4244?wrap=1" target="_blank" data-api-endpoint="https://elearn.ucr.edu/api
 /v1/courses/48816/files/3104244" data-api-returntype="File">NetID_lab0_par
 t1.ino</a></p>\n</li>\n<li>\n<p>Rename the file:</p>\n</li>\n</ol>\n<p>Rep
 lace "NetID" with your NetID (e.g.\, pbrisk) Rename the <strong>file exten
 sion</strong> to .cpp</p>\n<p><strong>NOTE</strong>: This changes the file
  type. If you submit your file to gradescope and it shows as .cpp.ino. Tha
 t means you did this step incorrectly!</p>\n<p>For example\, the instructo
 r's submission would be renamed: pbrisk_lab0_part1.cpp</p>\n<ol start="3">
 \n<li>\n<p>Download the file <a class="instructure_file_link instructure_s
 cribd_file inline_disabled" title="cslogin_lab0.pdf" href="https://elearn.
 ucr.edu/courses/48816/files/3068865?wrap=1" target="_blank" data-api-endpo
 int="https://elearn.ucr.edu/api/v1/courses/48816/files/3068865" data-api-r
 eturntype="File">NetID_lab0.pdf</a> (note: these videos aren't representat
 ive of what the sample code should do)</p>\n</li>\n<li>\n<p>Rename the fil
 e:</p>\n</li>\n</ol>\n<p>Replace "NetID" with your NetID (e.g.\, pbrisk) F
 or example\, the instructor's submission would be renamed: pbrisk_lab0.pdf
 </p>\n<ol start="5">\n<li>\n<p>Login to Gradescope and look under "Active 
 Assignments"</p>\n</li>\n<li>\n<p>Submit both files to "Laboratory Assignm
 ent 0 (Tutorial -- No grade)"</p>\n</li>\n</ol>\n<h4>Exercise 0 Deliverabl
 es</h4>\n<ul>\n<li>Properly renamed cpp file extension - 0 points</li>\n<l
 i>Properly renamed pdf file - 0 points</li>\n</ul>\n<h2>Lab Submission Gui
 delines</h2>\n<p>Please follow all requirements in the <a class="inline_di
 sabled" href="https://elearn.ucr.edu/courses/48816/pages/laboratory-submis
 sion-guidelines" target="_blank" data-api-endpoint="https://elearn.ucr.edu
 /api/v1/courses/48816/pages/laboratory-submission-guidelines" data-api-ret
 urntype="Page">Lab submission Guidelines</a></p><script src="https://instr
 ucture-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178
 366/canvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220328T181400Z
UID:event-assignment-320730
DTSTART;VALUE=DATE:20220401T000000
DTEND;VALUE=DATE:20220401T000000
CLASS:PUBLIC
DESCRIPTION:I would like to know you better. Please answer the following qu
 estions about yourself. \n\n \n\n* Department\, major\, degree\n\n* When
  did you start at UCR?\n\n* Why are you taking CS161?\n\n* What do you exp
 ect to learn from this course?\n\n* Is there any topic you are really look
 ing forward to in this course?\n\n* Do you want to learn and come up with 
 new ideas on how to design future systems?\n\n* Are you familiar with any 
 of these terms? ISA\, Pipelining\, Cache\, Memory System\, and Virtual Mem
 ory\n\n* Do you want to make any other comment (about anything)?
SEQUENCE:0
SUMMARY:HW0: Self introduction [CS_161_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_39239&month=04&
 year=2022#assignment_320730
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><p>I would like to know you better. Please answer t
 he following questions about yourself.&nbsp\;</p>\n<p>&nbsp\;</p>\n<ol>\n<
 li>Department\, major\, degree</li>\n<li>When did you start at UCR?</li>\n
 <li>Why are you taking CS161?</li>\n<li>What do you expect to learn from t
 his course?</li>\n<li>Is there any topic you are really looking forward to
  in this course?</li>\n<li>Do you want to learn and come up with new ideas
  on how to design future systems?</li>\n<li>Are you familiar with any of t
 hese terms? ISA\, Pipelining\, Cache\, Memory System\, and Virtual Memory<
 /li>\n<li>Do you want to make any other comment (about anything)?</li>\n</
 ol><script src="https://instructure-uploads.s3.amazonaws.com/account_14493
 0000000000001/attachments/178366/canvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T222200Z
UID:event-assignment-315228
DTSTART:20220403T181500Z
DTEND:20220403T181500Z
CLASS:PUBLIC
DESCRIPTION:[UC_Riverside_Vert_WhtBG.png] (https://elearn.ucr.edu/courses/4
 8816/files/3068780/preview) \n\nBy completing this item you acknowledge y
 ou understand and will abide by this course's academic integrity and digit
 al media content and recording policies as stated in the course syllabus a
 nd as presented at [the Student Conduct and Academic Integrity Programs Of
 fice website online] (https://conduct.ucr.edu/policies/academic-integrity-
 policies-and-procedures#fabrication).\n\nYou must complete this item to ga
 in access to the course content.\n\nACADEMIC INTEGRITY AGREEMENT\n\nI agre
 e to adhere to University Policy 102.01\, which prohibits “All forms of 
 academic misconduct including but not limited to cheating\, fabrication\, 
 plagiarism\, or facilitating academic dishonesty.”\n\nUC Riverside’s A
 cademic Senate Policies & Procedures on Academic Integrity further defines
  academic misconduct as “any act that does or could improperly distort s
 tudent grades or other student academic records.”\n\nCheating. Fraud\, d
 eceit\, or dishonesty in an academic assignment\, or using or attempting t
 o use materials\, or assisting others in using materials that are prohibit
 ed or inappropriate in the context of the academic assignment in question.
 \n\n \n\nUnauthorized collaboration. Working with others without the spec
 ific permission of the instructor on assignments that will be submitted fo
 r a grade. This applies to in?class or take?home tests\, papers\, labs\, o
 r homework assignments. Students may not collaborate without faculty autho
 rization.\n\nFabrication. Making up data or results and recording or repor
 ting them\, including laboratory or field research results. In the context
  of student academic integrity\, this also includes falsifying academic or
  university documents and providing false information or testimony in conn
 ection with any investigation or hearing under this policy.\n\nInterferenc
 e or sabotage. Damaging\, removing\, or otherwise harming another student'
 s work or University materials and systems to affect the academic performa
 nce of others.\n\nPlagiarism. The appropriation of another person's ideas\
 , processes\, results\, or words without giving appropriate credit. This i
 ncludes the copying of language\, structure\, or ideas of another and attr
 ibuting (explicitly or implicitly) the work to one's own efforts. Plagiari
 sm means using another's work without giving credit.\n\nFailure to comply 
 with research regulations such as those applying to human subjects\, labor
 atory animals\, and standards of safety.\n\nFacilitating academic dishones
 ty. Assisting another in violating the policy of Academic Integrity\, such
  as taking an exam for another student or providing coursework for another
  student to turn in as his or her own effort.\n\nRetaliation of any kind a
 gainst a person who reported or provided information about suspected or al
 leged misconduct and who has not acted in bad faith.\n\nThe full policy is
  available online at: [http://senate.ucr.edu/bylaws/?action=read_bylaw s&c
 ode=app&section=06] (http://senate.ucr.edu/bylaws/?action=read_bylaw%20s&c
 ode=app&section=06)
SEQUENCE:0
SUMMARY:Academic Integrity Policy Agreement [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315228
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><p style="text-align: center\;"><img src="https://e
 learn.ucr.edu/courses/48816/files/3068780/preview" alt="UC_Riverside_Vert_
 WhtBG.png" width="400" height="285" data-api-endpoint="https://elearn.ucr.
 edu/api/v1/courses/48816/files/3068780" data-api-returntype="File">&nbsp\;
 </p>\n<p><span style="color: #000000\;">By completing this item you acknow
 ledge you understand and will abide by this course's academic integrity an
 d digital media content and recording policies as stated in the course syl
 labus and as presented at <a href="https://conduct.ucr.edu/policies/academ
 ic-integrity-policies-and-procedures#fabrication">the Student Conduct and 
 Academic Integrity Programs Office website online</a>. </span></p>\n<p><em
 ><strong><span style="color: #000000\;">You must complete this item to gai
 n access to the course content.</span></strong></em></p>\n<p style="text-a
 lign: center\;"><strong><span style="color: #000000\;">ACADEMIC INTEGRITY 
 AGREEMENT</span></strong></p>\n<p>I agree to adhere to University Policy 1
 02.01\, which prohibits “All forms of academic misconduct including but 
 not limited to cheating\, fabrication\, plagiarism\, or facilitating acade
 mic dishonesty.”</p>\n<p>UC Riverside’s Academic Senate Policies &amp\
 ; Procedures on Academic Integrity further defines academic misconduct as 
 “any act that does or could improperly distort student grades or other s
 tudent academic records.”</p>\n<table style="height: 1090px\; width: 488
 px\;" border="0">\n<tbody>\n<tr style="height: 263px\;">\n<td style="width
 : 222.8px\; height: 263px\;">\n<p class="p1"><span class="s1"><span style=
 "text-decoration: underline\;"><strong>Cheating.</strong></span> Fraud\, d
 eceit\, or dishonesty in an academic assignment\, or using or attempting t
 o use materials\, or assisting others in using materials that are prohibit
 ed or inappropriate in the context of the academic assignment in question.
 </span></p>\n</td>\n<td style="height: 263px\; width: 38px\;">\n<p>&nbsp\;
 </p>\n</td>\n<td style="height: 263px\; width: 201.2px\;">\n<p><strong><sp
 an style="text-decoration: underline\;">Unauthorized collaboration.</span>
 </strong> Working with others without the specific permission of the instr
 uctor on assignments that will be submitted for a grade. This applies to i
 n?class or take?home tests\, papers\, labs\, or homework assignments. Stud
 ents may not collaborate without faculty authorization.</p>\n</td>\n</tr>\
 n<tr style="height: 43px\;">\n<td style="width: 222.8px\; height: 43px\;">
 </td>\n<td style="width: 38px\; height: 43px\;"></td>\n<td style="width: 2
 01.2px\; height: 43px\;"></td>\n</tr>\n<tr style="height: 335px\;">\n<td s
 tyle="width: 222.8px\; height: 335px\;"><span style="text-decoration: unde
 rline\;"><strong>Fabrication.</strong></span> Making up data or results an
 d recording or reporting them\, including laboratory or field research res
 ults. In the context of student academic integrity\, this also includes fa
 lsifying academic or university documents and providing false information 
 or testimony in connection with any investigation or hearing under this po
 licy.</td>\n<td style="width: 38px\; height: 335px\;"></td>\n<td style="he
 ight: 335px\; width: 201.2px\;"><span style="text-decoration: underline\;"
 ><strong>Interference or sabotage.</strong> </span>Damaging\, removing\, o
 r otherwise harming another student's work or University materials and sys
 tems to affect the academic performance of others.</td>\n</tr>\n<tr style=
 "height: 23px\;">\n<td style="width: 222.8px\; height: 23px\;"></td>\n<td 
 style="width: 38px\; height: 23px\;"></td>\n<td style="width: 201.2px\; he
 ight: 23px\;"></td>\n</tr>\n<tr style="height: 311px\;">\n<td style="width
 : 222.8px\; height: 311px\;"><span style="text-decoration: underline\;"><s
 trong><span style="color: #000000\; text-decoration: underline\;">Plagiari
 sm.</span> </strong></span>The appropriation of another person's ideas\, p
 rocesses\, results\, or words without giving appropriate credit. This incl
 udes the copying of language\, structure\, or ideas of another and attribu
 ting (explicitly or implicitly) the work to one's own efforts. Plagiarism 
 means using another's work without giving credit.</td>\n<td style="width: 
 38px\; height: 311px\;"></td>\n<td style="height: 311px\; width: 201.2px\;
 "><span style="text-decoration: underline\;"><strong>Failure to comply wit
 h research regulations</strong></span> such as those applying to human sub
 jects\, laboratory animals\, and standards of safety.</td>\n</tr>\n<tr sty
 le="height: 23px\;">\n<td style="width: 222.8px\; height: 23px\;"></td>\n<
 td style="width: 38px\; height: 23px\;"></td>\n<td style="width: 201.2px\;
  height: 23px\;"></td>\n</tr>\n<tr style="height: 23px\;">\n<td style="wid
 th: 222.8px\; height: 23px\;"><span style="text-decoration: underline\;"><
 strong>Facilitating academic dishonesty.</strong></span> Assisting another
  in violating the policy of Academic Integrity\, such as taking an exam fo
 r another student or providing coursework for another student to turn in a
 s his or her own effort.</td>\n<td style="width: 38px\; height: 23px\;"></
 td>\n<td style="width: 201.2px\; height: 23px\;"><span style="text-decorat
 ion: underline\;"><strong>Retaliation</strong></span> of any kind against 
 a person who reported or provided information about suspected or alleged m
 isconduct and who has not acted in bad faith.</td>\n</tr>\n</tbody>\n</tab
 le>\n<p><br>The full policy is available online at: <a href="http://senate
 .ucr.edu/bylaws/?action=read_bylaw%20s&amp\;code=app&amp\;section=06">http
 ://senate.ucr.edu/bylaws/?action=read_bylaw s&amp\;code=app&amp\;section=0
 6</a></p><script src="https://instructure-uploads.s3.amazonaws.com/account
 _144930000000000001/attachments/178366/canvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T000900Z
UID:event-assignment-315249
DTSTART:20220406T000000Z
DTEND:20220406T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (4/5/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315249
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001300Z
UID:event-assignment-315241
DTSTART:20220408T000000Z
DTEND:20220408T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (4/7/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315241
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220401T035900Z
UID:event-assignment-315266
DTSTART:20220409T000000Z
DTEND:20220409T000000Z
CLASS:PUBLIC
DESCRIPTION:***********************************\nLab 2: Parts Kit\, Setup\,
  and Analog\n***********************************\n\nThis lab introduces th
 e physical parts kit. You should use the Physical Kit for this lab and all
  future labs.\n\nWe also introduce the photoresistor. Note that the photre
 sistor you have will have a small sensor and 2 long wires. You can use the
  arduino function\n\nanalogRead(A1)\;\n\nto read the value of the photores
 istor. You will use the value to determine how much light the photoresisto
 r is reading.\n\n-------\nPre-lab\n-------\n\nExample Demo: https://youtu.
 be/K1gMN4sLMWU\n\n* Assemble your kit using the circuit diagram\n\n* Run t
 he sample code\n\n* Sample code should light up some LEDs\, varying with t
 he amount of light.\n\n* If the sample code works:\n\n* Create a video of 
 the output and put the link to it in your report\n\n* Submit this report t
 o gradescope as a pdf before friday 5pm (You don't need to submit the code
 )\n\n* If the sample code doesn't work\n\n* Create a video of the output.\
 n\n* Email the Part's Assistants & link the video immediately\, and no lat
 er than friday 5pm.\n\n* Essentially\, you must have proof you got your ha
 rdware working before friday 5pm\, or have contacted the Part's Assistants
 \n\n-----------\nSample Code\n-----------\n\n// Array of Output Pin variab
 les\, set to the pins being used\nconst int b_size = 4\;\nconst int b[b_si
 ze] = {2\, 3\, 4\, 5}\;\n// Output Buffer\nint b_buf = 0x00\;\n// Input Va
 riables\n\n// Serial Monitor Buffer\nint s_buf = 0x00\;\n\n/* 's' is an ar
 ray of integers of size 8. Note that arrays start at 0\nWe will use this t
 o be able to see the individual bit values of the s_buf\n\n*/\nconst int s
 _size = 8\;\nint s[s_size]\;\n\n// We can also define our own helper funct
 ions. It is a good idea to use helper functions whenever they make sense.\
 n// Normally we also define the return type (void for none)\n\n// Read fro
 m the serial monitor into s_buf and the s[] array for individual bits\nvoi
 d readData()\n{\nif(Serial.available())\ns_buf = Serial.parseInt()\;\n\nfo
 r(int i = (s_size - 1)\; i>=0\; i--) {\ns[i] = (s_buf >> i) & 0x01\; // Wh
 at's going on here?\n// ">>" bit shifting\n// "&" bit masking\n}\n\n}\n// 
 Reset the Output Buffer.\nvoid resetBuffer() {\nfor(int i = 0\; i < b_size
 \; i++) {\n// Note this is an arduino function call to the pins\ndigitalWr
 ite(b[i]\, LOW)\;\n}\n}\n// Writes to the buffer. Note this function ORs t
 he current value with the new value\n// Note that size is an optional argu
 ment with default size the same as the buffer\nvoid writeBuffer(unsigned c
 har b_temp\, int size = b_size)\n{\nfor (int i = (size - 1)\; i >= 0\; i--
 ) {\nif ((b_temp >> i) & 0x01) {\ndigitalWrite(b[i]\, HIGH)\;\n}\n}\n\n}\n
 \nvoid setup() {\n// OUTPUT is a defined macro in Arduino!\nfor(int i = 0\
 ; i < b_size\; i++)\n{\npinMode(b[i]\, OUTPUT)\;\n}\n// We will also read 
 from the serial monitor\nSerial.begin(9600)\;\n}\n\nvoid loop() {\nresetBu
 ffer()\;\n// Note that here we arbitrarily connect b_buf & s_buf together.
  The important point is that we preserve the current value of the output b
 uffer into a variable b_buf before writing it to the pins. If we resetBuff
 er or readData() again\, we still know the values the output is set to\, b
 ecause it is in b_buf.\nb_buf = analogRead(A1)\;\nb_buf = map(b_buf\, 0\, 
 1023\, 0\, 16)\;\nwriteBuffer(b_buf)\;\n}\n\n------------------------\nRub
 ric - 40 Points Total\n------------------------\n\n* Exercise 1 Serial LED
  - 10 Points\n\n* Exercise 2 LED Counter REVISED - 10 Points\n\n* Exercise
  3 Nightlight - 20 Points\n\nSoftware Requirement\n--------------------\n\
 n* Arduino IDE\n\nNotes:\n\n* You are allowed to create helper functions.\
 n\n* Delay() function calls should never be inside a state machine.\n\n* I
 f you set a period too small\, you may see weird timing behavior.\n\n-----
 ---------\nParts & Wiring\n--------------\n\nWiring Diagram\n-------------
 -\n\n[lab2_s22_w2.png] (https://elearn.ucr.edu/courses/48816/files/3104131
 /preview)\n\nParts used\n----------\n\n* 4x LEDs\n\n* 4x 220k resistors\n\
 n* 2x 1k resistor (Photoresistor\, Button)\n\n* 2x Buttons\n\n* 1x PULLUP 
 Configuration (Y)\n\n* 1x PULLDOWN Configuration (X)\n\n* 1x Photoresistor
 \n\n* Wires\n\n---------\nExercises\n---------\n\nThe exercises are as fol
 lows\n\nExercise 1: Serial LED\n----------------------\n\nExample Demo: ht
 tps://youtu.be/yrsZAKB0sUA\n\nCreate the Serial LED from Lab 1\, this time
  on the physical parts kit. All future labs and exercises (including this 
 lab) should also be on the parts kit.\n\nProblem: There is a bug in the sa
 mple code from Lab 1 where the size of the serial monitor is 8 bits\, but 
 the LED output buffer is only 4 bits. Use the arduino [map function] (http
 s://www.arduino.cc/reference/en/language/functions/math/map/) and modify t
 he loop function so up so that a 256 value lights up all 4 LEDs and 0 ligh
 ts up none.\n\nExercise 1 Deliverables\n-----------------------\n\n* Seria
 l Monitor numerical input light up LEDs - 5 points\n\n* Correct range rema
 pping - 5 points.\n\nExercise 2: LED Counter REVISED\n--------------------
 -----------\n\nExample Demo: https://youtu.be/Rh3sqMBBE9c\n\nArduino uses 
 the macros HIGH to represent 0x01\, and LOW to represent 0x00. These macro
 s are useful to check if a button reading is 1 or 0. There are two kinds o
 f button configurations you can use with push buttons. Both versions are s
 hown in the wiring diagram. The left version. Button 'X' to pin 8 is in "P
 ull-down" mode and is the default configuration. The button defaults to LO
 W\, and pressing the button has it read as HIGH. The code to configure it 
 looks like this:\n\npinMode(X\, INPUT)\;\n\nButton 'Y' to pin 9 is in "Pul
 l-up" mode. This mode defaults the button reading as HIGH when not pressed
 \, and LOW when pressed The code to configure it looks like this:\n\npinMo
 de(Y\, INPUT_PULLUP)\;\n\nProblem: Create a system that starts with all LE
 Ds off. Pressing 'X' turns on 1 LED. Pressing 'X' again turns on another L
 ED.\n\nREVISION: When all 4 LEDs are on\, Pressing 'X' will turn off all t
 he LEDs. Pressing 'X' again turns on a single LED. Essentially\, you may c
 ontinously press 'X' to loop through how many LEDs are on. Pressing 'Y" tu
 rns off 1 LED\, if any are on. You can do this in any order. When all 4 LE
 Ds are off\, Pressing 'Y' will turn on all the LEDs. Pressing 'Y' again tu
 rns off a single LED. Essentially\, you may continously press 'Y' to loop 
 through how many LEDs are on.\n\nA single button press should mean only 1 
 LED turns on or 1 LED turns off or nothing happens. Holding the button dow
 n should have no difference from a single press.\n\nNote that the default 
 writeBuffer represents a binary output\, but we expect the LEDs to count u
 p in a integer fashion. You may have to modify or create a helper function
  that outputs the buffer in this modified manner.\n\nFor full credit\, cre
 ate a helper function that abstracts away the difference between PULLUP or
  PULLDOWN mode. The helpr function should always return HIGH if the button
  is pressed\, regardless of its configuration.\n\nHint: Keep track of your
  button configuration with a data structure where the key is the pin numbe
 r of the button\, and the value is a number where 0 for PullDown\, 1 for P
 ullUp. You may use\n\nExercise 2 Deliverables\n-----------------------\n\n
 * System behaves as described from Lab 1(incl helper function) - 5 points\
 n\n* Rollover/Overflow Revision handled - 5 points\n\nExercise 3: Nightlig
 ht\n----------------------\n\nExample Demo: https://youtu.be/qgb3vyp9Kww\n
 \nIn this exercise you will use the Photoresistor. Create a system that ha
 s 2 modes.\n\nThe photoresistor is an Analog device. Read from the Photore
 sistor using\n\nanalogRead(A1)\;\n\nThis function returns the analog value
 s of the photoresistor. Note A1 is a predefined macro by arduino that tran
 slates to the number 15.\n\nHint: This exercise will much easier if you us
 e a state machine (zybooks chapter 2)\, although it is not required.\n\nMo
 de 0 uses the photoresistor and displays the value on the LED bank. Use th
 e arduino map function to ensure the values correctly map to the LED Bank.
  covering the photoresistor with your hand should make all 4 LEDs turn off
 . The ambient light should cause all 4 LEDs to turn on. This can be a bina
 ry conditional or a variable number written to the LEDs. Mode 0 is on by d
 efault\, or can be activated by pressing Button 'X'. Pressing 'X' when Mod
 e 0 is on will do nothing.\n\nMode 1 uses the photoresistor to determine t
 he max level of lighting to use. Mode 1 is activated by Pressing 'Y'. Pres
 sing 'Y' when already in Mode 1 does nothing. By default\, no light means 
 all 4 LEDs are off. Some light means 2 LEDs are on. Lots of light means 0 
 LEDs are on. You may make simplifying assumptions as needed.\n\nDescriptio
 n: create a button state machine that does stuff\n\nExercise 3 Deliverable
 s\n-----------------------\n\n* Mode 0 working as described. - 10 points\n
 \n* Mode 1 working as described. - 10 points\n\n***********************\nG
 radescope Instructions\n***********************\n\nMake three short screen
 -capture videos demonstrating correct functionality for each of the three 
 exercises.\n\nPost your screen-capture videos to the hosting service or Cl
 oud-based storage solution of your choice. Edit the header file for each l
 aboratory exercise to contain a link to the corresponding video. Create a 
 PDF file named [NetID]_lab1.pdf that contains three clickable URL links to
  the three videos. Rename the three .ino files to have the .cpp file exten
 sion Upload the following files Gradescope:\n\n* [NetID]_lab2.pdf\n\n* [Ne
 tID]_lab2_part1.cpp\n\n* [NetID]_lab2_part2.cpp\n\n* [NetID]_lab2_part3.cp
 p\n\n-------------------------\nLab Submission Guidelines\n---------------
 ----------\n\nPlease follow all requirements in the [Lab submission Guidel
 ines] (https://elearn.ucr.edu/courses/48816/pages/laboratory-submission-gu
 idelines)
SEQUENCE:0
SUMMARY:Laboratory Assignment #2: Parts Kit and Physical Setup [CS_120B_001
 \, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315266
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><h1>Lab 2: Parts Kit\, Setup\, and Analog</h1>\n<p>
 This lab introduces the physical parts kit. You should use the Physical Ki
 t for this lab and all future labs.</p>\n<p>We also introduce the photores
 istor. Note that the photresistor you have will have a small sensor and 2 
 long wires. You can use the arduino function</p>\n<pre><code class="langua
 ge-c++">analogRead(A1)\;\n</code></pre>\n<p>to read the value of the photo
 resistor. You will use the value to determine how much light the photoresi
 stor is reading.</p>\n<h2>Pre-lab</h2>\n<p>Example Demo: <a href="https://
 youtu.be/K1gMN4sLMWU" target="_blank">https://youtu.be/K1gMN4sLMWU</a></p>
 \n<ul>\n<li>Assemble your kit using the circuit diagram</li>\n<li>Run the 
 sample code</li>\n<li>Sample code should light up some LEDs\, varying with
  the amount of light.</li>\n<li>If the sample code works:\n<ul>\n<li>Creat
 e a video of the output and put the link to it in your report</li>\n<li>Su
 bmit this report to gradescope as a pdf before friday 5pm (You don't need 
 to submit the code)</li>\n</ul>\n</li>\n<li>If the sample code doesn't wor
 k\n<ul>\n<li>Create a video of the output.</li>\n<li>Email the Part's Assi
 stants &amp\; link the video immediately\, and no later than friday 5pm.</
 li>\n</ul>\n</li>\n<li>Essentially\, you must have proof you got your hard
 ware working before friday 5pm\, or have contacted the Part's Assistants</
 li>\n</ul>\n<h2>Sample Code</h2>\n<div style="background: #ffffff\; overfl
 ow: auto\; width: auto\; border: solid gray\; border-width: .1em .1em .1em
  .8em\; padding: .2em .6em\;">\n<pre style="margin: 0\; line-height: 125%\
 ;"><span style="color: #aaaaaa\; font-style: italic\;">// Array of Output 
 Pin variables\, set to the pins being used</span>\n<span style="color: #00
 00aa\;">const</span> <span style="color: #00aaaa\;">int</span> b_size = <s
 pan style="color: #009999\;">4</span>\;\n<span style="color: #0000aa\;">co
 nst</span> <span style="color: #00aaaa\;">int</span> b[b_size] = {<span st
 yle="color: #009999\;">2</span>\, <span style="color: #009999\;">3</span>\
 , <span style="color: #009999\;">4</span>\, <span style="color: #009999\;"
 >5</span>}\;\n<span style="color: #aaaaaa\; font-style: italic\;">// Outpu
 t Buffer</span>\n<span style="color: #00aaaa\;">int</span> b_buf = <span s
 tyle="color: #009999\;">0x00</span>\;\n<span style="color: #aaaaaa\; font-
 style: italic\;">// Input Variables</span>\n\n<span style="color: #aaaaaa\
 ; font-style: italic\;">// Serial Monitor Buffer</span>\n<span style="colo
 r: #00aaaa\;">int</span> s_buf = <span style="color: #009999\;">0x00</span
 >\; \n\n<span style="color: #aaaaaa\; font-style: italic\;">/* 's' is an a
 rray of integers of size 8. Note that arrays start at 0</span>\n<span styl
 e="color: #aaaaaa\; font-style: italic\;"> We will use this to be able to 
 see the individual bit values of the s_buf</span>\n\n<span style="color: #
 aaaaaa\; font-style: italic\;"> */</span>\n<span style="color: #0000aa\;">
 const</span> <span style="color: #00aaaa\;">int</span> s_size = <span styl
 e="color: #009999\;">8</span>\;\n<span style="color: #00aaaa\;">int</span>
  s[s_size]\;\n\n<span style="color: #aaaaaa\; font-style: italic\;">// We 
 can also define our own helper functions. It is a good idea to use helper 
 functions whenever they make sense.</span>\n<span style="color: #aaaaaa\; 
 font-style: italic\;">// Normally we also define the return type (void for
  none)</span>\n\n<span style="color: #aaaaaa\; font-style: italic\;">// Re
 ad from the serial monitor into s_buf and the s[] array for individual bit
 s</span>\n<span style="color: #00aaaa\;">void</span> <span style="color: #
 00aa00\;">readData</span>()\n{\n    <span style="color: #0000aa\;">if</spa
 n>(Serial.available())\n        s_buf = Serial.parseInt()\;\n\n    <span s
 tyle="color: #0000aa\;">for</span>(<span style="color: #00aaaa\;">int</spa
 n> i = (s_size - <span style="color: #009999\;">1</span>)\; i&gt\;=<span s
 tyle="color: #009999\;">0</span>\; i--)  { \n        s[i] = (s_buf &gt\;&g
 t\; i) &amp\; <span style="color: #009999\;">0x01</span>\; <span style="co
 lor: #aaaaaa\; font-style: italic\;">// What's going on here?</span>\n    
     <span style="color: #aaaaaa\; font-style: italic\;">// "&gt\;&gt\;" bi
 t shifting </span>\n        <span style="color: #aaaaaa\; font-style: ital
 ic\;">// "&amp\;" bit masking</span>\n    }\n\n}\n<span style="color: #aaa
 aaa\; font-style: italic\;">// Reset the Output Buffer. </span>\n<span sty
 le="color: #00aaaa\;">void</span> <span style="color: #00aa00\;">resetBuff
 er</span>() {\n    <span style="color: #0000aa\;">for</span>(<span style="
 color: #00aaaa\;">int</span> i = <span style="color: #009999\;">0</span>\;
  i &lt\; b_size\; i++) {\n        <span style="color: #aaaaaa\; font-style
 : italic\;">// Note this is an arduino function call to the pins</span>\n 
        digitalWrite(b[i]\, LOW)\;\n    }\n}\n<span style="color: #aaaaaa\;
  font-style: italic\;">// Writes to the buffer. Note this function ORs the
  current value with the new value</span>\n<span style="color: #aaaaaa\; fo
 nt-style: italic\;">// Note that size is an optional argument with default
  size the same as the buffer</span>\n<span style="color: #00aaaa\;">void</
 span> <span style="color: #00aa00\;">writeBuffer</span>(<span style="color
 : #00aaaa\;">unsigned</span> <span style="color: #00aaaa\;">char</span> b_
 temp\, <span style="color: #00aaaa\;">int</span> size = b_size)\n{\n    <s
 pan style="color: #0000aa\;">for</span> (<span style="color: #00aaaa\;">in
 t</span> i = (size - <span style="color: #009999\;">1</span>)\; i &gt\;= <
 span style="color: #009999\;">0</span>\; i--) {\n        <span style="colo
 r: #0000aa\;">if</span> ((b_temp &gt\;&gt\; i) &amp\; <span style="color: 
 #009999\;">0x01</span>) {\n        digitalWrite(b[i]\, HIGH)\;\n        }\
 n    }\n\n}\n\n<span style="color: #00aaaa\;">void</span> <span style="col
 or: #00aa00\;">setup</span>() {\n    <span style="color: #aaaaaa\; font-st
 yle: italic\;">// OUTPUT is a defined macro in Arduino!</span>\n    <span 
 style="color: #0000aa\;">for</span>(<span style="color: #00aaaa\;">int</sp
 an> i = <span style="color: #009999\;">0</span>\; i &lt\; b_size\; i++)\n 
    {\n        pinMode(b[i]\, OUTPUT)\;\n    }\n    <span style="color: #aa
 aaaa\; font-style: italic\;">// We will also read from the serial monitor<
 /span>\n    Serial.begin(<span style="color: #009999\;">9600</span>)\;\n}\
 n\n<span style="color: #00aaaa\;">void</span> <span style="color: #00aa00\
 ;">loop</span>() {\n    resetBuffer()\;\n    <span style="color: #aaaaaa\;
  font-style: italic\;">// Note that here we arbitrarily connect b_buf &amp
 \; s_buf together. The important point is that we preserve the current val
 ue of the output buffer into a variable b_buf before writing it to the pin
 s. If we resetBuffer or readData() again\, we still know the values the ou
 tput is set to\, because it is in b_buf. </span>\n    b_buf = analogRead(A
 1)\;\n    b_buf = map(b_buf\, <span style="color: #009999\;">0</span>\, <s
 pan style="color: #009999\;">1023</span>\, <span style="color: #009999\;">
 0</span>\, <span style="color: #009999\;">16</span>)\;\n    writeBuffer(b_
 buf)\;\n}\n</pre>\n</div>\n<h2>Rubric - 40 Points Total</h2>\n<ul>\n<li>Ex
 ercise 1 Serial LED - 10 Points</li>\n<li>Exercise 2 LED Counter REVISED -
  10 Points</li>\n<li>Exercise 3 Nightlight - 20 Points</li>\n</ul>\n<h3>So
 ftware Requirement</h3>\n<ul>\n<li>Arduino IDE</li>\n</ul>\n<p>Notes:</p>\
 n<ul>\n<li>You are allowed to create helper functions.</li>\n<li>Delay() f
 unction calls should never be inside a state machine.</li>\n<li>If you set
  a period too small\, you may see weird timing behavior.</li>\n</ul>\n<h2>
 Parts &amp\; Wiring</h2>\n<h3>Wiring Diagram</h3>\n<p><img id="3104131" sr
 c="https://elearn.ucr.edu/courses/48816/files/3104131/preview" alt="lab2_s
 22_w2.png" data-api-endpoint="https://elearn.ucr.edu/api/v1/courses/48816/
 files/3104131" data-api-returntype="File"></p>\n<h3>Parts used</h3>\n<ul>\
 n<li>4x LEDs</li>\n<li>4x 220k resistors</li>\n<li>2x 1k resistor (Photore
 sistor\, Button)</li>\n<li>2x Buttons\n<ul>\n<li>1x PULLUP Configuration (
 Y)</li>\n<li>1x PULLDOWN Configuration (X)</li>\n</ul>\n</li>\n<li>1x Phot
 oresistor</li>\n<li>Wires</li>\n</ul>\n<h2>Exercises</h2>\n<p>The exercise
 s are as follows</p>\n<h3>Exercise 1: Serial LED</h3>\n<p>Example Demo: <a
  href="https://youtu.be/yrsZAKB0sUA" target="_blank">https://youtu.be/yrsZ
 AKB0sUA</a></p>\n<p>Create the Serial LED from Lab 1\, this time on the ph
 ysical parts kit. All future labs and exercises (including this lab) shoul
 d also be on the parts kit.</p>\n<p>Problem: There is a bug in the sample 
 code from Lab 1 where the size of the serial monitor is 8 bits\, but the L
 ED output buffer is only 4 bits. Use the arduino <a href="https://www.ardu
 ino.cc/reference/en/language/functions/math/map/">map function</a> and mod
 ify the loop function so up so that a 256 value lights up all 4 LEDs and 0
  lights up none.</p>\n<h4>Exercise 1 Deliverables</h4>\n<ul>\n<li>Serial M
 onitor numerical input light up LEDs - 5 points</li>\n<li>Correct range re
 mapping - 5 points.</li>\n</ul>\n<h3>Exercise 2: LED Counter REVISED</h3>\
 n<p>Example Demo: <a href="https://youtu.be/Rh3sqMBBE9c" target="_blank">h
 ttps://youtu.be/Rh3sqMBBE9c</a></p>\n<p>Arduino uses the macros HIGH to re
 present 0x01\, and LOW to represent 0x00. These macros are useful to check
  if a button reading is 1 or 0. There are two kinds of button configuratio
 ns you can use with push buttons. Both versions are shown in the wiring di
 agram. The left version. Button 'X' to pin 8 is in "Pull-down" mode and is
  the default configuration. The button defaults to LOW\, and pressing the 
 button has it read as HIGH. The code to configure it looks like this:</p>\
 n<pre><code class="language-c++">pinMode(X\, INPUT)\;\n</code></pre>\n<p>B
 utton 'Y' to pin 9 is in "Pull-up" mode. This mode defaults the button rea
 ding as HIGH when not pressed\, and LOW when pressed The code to configure
  it looks like this:</p>\n<pre><code class="language-c++">pinMode(Y\, INPU
 T_PULLUP)\;\n</code></pre>\n<p>Problem: Create a system that starts with a
 ll LEDs off. Pressing 'X' turns on 1 LED. Pressing 'X' again turns on anot
 her LED.</p>\n<p><strong>REVISION</strong>: When all 4 LEDs are on\, Press
 ing 'X' will turn off all the LEDs. Pressing 'X' again turns on a single L
 ED. Essentially\, you may continously press 'X' to loop through how many L
 EDs are on. Pressing 'Y" turns off 1 LED\, if any are on. You can do this 
 in any order. When all 4 LEDs are off\, Pressing 'Y' will turn on all the 
 LEDs. Pressing 'Y' again turns off a single LED. Essentially\, you may con
 tinously press 'Y' to loop through how many LEDs are on.</p>\n<p>A single 
 button press should mean only 1 LED turns on or 1 LED turns off or nothing
  happens. Holding the button down should have no difference from a single 
 press.</p>\n<p>Note that the default writeBuffer represents a binary outpu
 t\, but we expect the LEDs to count up in a integer fashion. You may have 
 to modify or create a helper function that outputs the buffer in this modi
 fied manner.</p>\n<p>For full credit\, create a helper function that abstr
 acts away the difference between PULLUP or PULLDOWN mode. The helpr functi
 on should always return HIGH if the button is pressed\, regardless of its 
 configuration.</p>\n<p><em>Hint</em>: Keep track of your button configurat
 ion with a data structure where the key is the pin number of the button\, 
 and the value is a number where 0 for PullDown\, 1 for PullUp. You may use
 </p>\n<h4>Exercise 2 Deliverables</h4>\n<ul>\n<li>System behaves as descri
 bed from Lab 1(incl helper function) - 5 points</li>\n<li>Rollover/Overflo
 w Revision handled - 5 points</li>\n</ul>\n<h3>Exercise 3: Nightlight</h3>
 \n<p>Example Demo: <a href="https://youtu.be/qgb3vyp9Kww" target="_blank">
 https://youtu.be/qgb3vyp9Kww</a></p>\n<p>In this exercise you will use the
  Photoresistor. Create a system that has 2 modes.</p>\n<p>The photoresisto
 r is an Analog device. Read from the Photoresistor using</p>\n<pre><code c
 lass="language-c++">analogRead(A1)\;\n</code></pre>\n<p>This function retu
 rns the analog values of the photoresistor. Note A1 is a predefined macro 
 by arduino that translates to the number 15.</p>\n<p><em>Hint</em>: This e
 xercise will much easier if you use a state machine (zybooks chapter 2)\, 
 although it is not required.</p>\n<p>Mode 0 uses the photoresistor and dis
 plays the value on the LED bank. Use the arduino map function to ensure th
 e values correctly map to the LED Bank. covering the photoresistor with yo
 ur hand should make all 4 LEDs turn off. The ambient light should cause al
 l 4 LEDs to turn on. This can be a binary conditional or a variable number
  written to the LEDs. Mode 0 is on by default\, or can be activated by pre
 ssing Button 'X'. Pressing 'X' when Mode 0 is on will do nothing.</p>\n<p>
 Mode 1 uses the photoresistor to determine the max level of lighting to us
 e. Mode 1 is activated by Pressing 'Y'. Pressing 'Y' when already in Mode 
 1 does nothing. By default\, no light means all 4 LEDs are off. Some light
  means 2 LEDs are on. Lots of light means 0 LEDs are on. You may make simp
 lifying assumptions as needed.</p>\n<p>Description: create a button state 
 machine that does stuff</p>\n<h4>Exercise 3 Deliverables</h4>\n<ul>\n<li>M
 ode 0 working as described. - 10 points</li>\n<li>Mode 1 working as descri
 bed. - 10 points</li>\n</ul>\n<h1>Gradescope Instructions</h1>\n<p>Make th
 ree short screen-capture videos demonstrating correct functionality for ea
 ch of the three exercises.</p>\n<p>Post your screen-capture videos to the 
 hosting service or Cloud-based storage solution of your choice. Edit the h
 eader file for each laboratory exercise to contain a link to the correspon
 ding video. Create a PDF file named [NetID]_lab1.pdf that contains three c
 lickable URL links to the three videos. Rename the three .ino files to hav
 e the .cpp file extension Upload the following files Gradescope:</p>\n<ul>
 \n<li>[NetID]_lab2.pdf</li>\n<li>[NetID]_lab2_part1.cpp</li>\n<li>[NetID]_
 lab2_part2.cpp</li>\n<li>[NetID]_lab2_part3.cpp</li>\n</ul>\n<h2>Lab Submi
 ssion Guidelines</h2>\n<p>Please follow all requirements in the <a class="
 inline_disabled" href="https://elearn.ucr.edu/courses/48816/pages/laborato
 ry-submission-guidelines" target="_blank" data-api-endpoint="https://elear
 n.ucr.edu/api/v1/courses/48816/pages/laboratory-submission-guidelines" dat
 a-api-returntype="Page">Lab submission Guidelines</a></p><script src="http
 s://instructure-uploads.s3.amazonaws.com/account_144930000000000001/attach
 ments/178366/canvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318715
DTSTART;VALUE=DATE:20220408T000000
DTEND;VALUE=DATE:20220408T000000
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:Syllabus Test [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=04&
 year=2022#assignment_318715
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318748
DTSTART;VALUE=DATE:20220408T000000
DTEND;VALUE=DATE:20220408T000000
CLASS:PUBLIC
DESCRIPTION: \n\nProvide a 1000 word report. The topic is something about 
 engineering you are passionate (that is\, you care deeply). Use the writin
 g guidelines from the lecture. \n\nWe don't care about why the world of e
 ngineering is interesting to some people\, we want why you chose engineeri
 ng: Why do you put up with a long and difficult program? What about engine
 ering makes it worth it to you? Why do you see this as something you want 
 to spend the rest of your life doing and learning about?\n\nShare your pas
 sion\, so that we see why this *thing* is so interesting to you.\n\nThe wr
 iting should be simple and straightforward. Do not try to impress us with 
 your vocabulary or grasp of complicated and advanced grammar. Try to use w
 ords of no more than two syllables. Use simple declarative sentences as mu
 ch as possible. Because you are writing about you\, use first person when 
 you are talking about you.\n\nAt least 10% of the total grade for this ass
 ignment is based on how well you write\, measured by following the writing
  guidelines as well as basic grammar\, word choice\, and punctuation. Yes
 \, we know it's difficult to write about things that happened in the past 
 using the present tense\, but we want you to do it anyway for the practice
 .\n\nNote: If you are retaking this class (even if you were wait listed an
 d never made it into the class)\, we expect all new work from you. Do not 
 reuse a past assignment - that's called CHEATING.
SEQUENCE:0
SUMMARY:Why you are passionate about this field [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=04&
 year=2022#assignment_318748
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><p>&nbsp\;</p>\n<p>Provide a 1000 word report. The 
 topic is something about engineering you are passionate (that is\, you car
 e deeply). Use the writing guidelines from the lecture.&nbsp\;</p>\n<p><br
 >We don't care about why the world of engineering is interesting to some p
 eople\, we want why you chose engineering: Why do you put up with a long a
 nd difficult program? What about engineering makes it worth it to you? Why
  do you see this as something you want to spend the rest of your life doin
 g and learning about? <br><br>Share your passion\, so that we see why this
  *thing* is so interesting to you. <br><br>The writing should be simple an
 d straightforward. Do not try to impress us with your vocabulary or grasp 
 of complicated and advanced grammar. Try to use words of no more than two 
 syllables. Use simple declarative sentences as much as possible. Because y
 ou are writing about you\, use first person when you are talking about you
 .<br><br>At least 10% of the total grade for this assignment is based on h
 ow well you write\, measured by following the writing guidelines as well a
 s basic grammar\, word choice\, and punctuation.&nbsp\;Yes\, we know it's 
 difficult to write about things that happened in the past using the presen
 t tense\, but we want you to do it anyway for the practice.</p>\n<p><br>No
 te: If you are retaking this class (even if you were wait listed and never
  made it into the class)\, we expect all new work from you. Do not reuse a
  past assignment - that's called CHEATING.</p><script src="https://instruc
 ture-uploads.s3.amazonaws.com/account_144930000000000001/attachments/17836
 6/canvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001100Z
UID:event-assignment-315274
DTSTART:20220412T230000Z
DTEND:20220412T230000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:Quiz #1 [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315274
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001400Z
UID:event-assignment-315242
DTSTART:20220413T000000Z
DTEND:20220413T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (4/12/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315242
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001500Z
UID:event-assignment-315243
DTSTART:20220415T000000Z
DTEND:20220415T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (4/14/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315243
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220401T035900Z
UID:event-assignment-315267
DTSTART:20220416T000000Z
DTEND:20220416T000000Z
CLASS:PUBLIC
DESCRIPTION:*********************\nLab 3: State Machines\n*****************
 ****\n\nBy now you will have gone over State Machines in lecture. The focu
 s of this lab is to get you familiar with coding up State Machines. A seco
 ndary goal is to get you thinking on what should be represented as "States
 " vs regular programming techniques. This entire lab & exercises expect yo
 u use a State Machine. Future labs will expect you to use at least State M
 achines.\n\nLook at the sample code for an examples state machine.\n\n----
 ---\nPre-lab\n-------\n\nExample Demo: https://youtu.be/ExB2bJCTjcw\n\n* A
 ssemble your kit using the circuit diagram\n\n* Run the sample code\n\n* T
 he sample should have all 4 LEDs turn on while the left button is pressed.
 \n\n* If the sample code works:\n\n* Create a video of the output and put 
 the link to it in your report\n\n* Submit this report to gradescope as a p
 df before friday 5pm (You don't need to submit the code)\n\n* If the sampl
 e code doesn't work\n\n* Create a video of the output.\n\n* Email the Part
 's Assistants & link the video immediately\, and no later than friday 5pm.
 \n\n* Essentially\, you must have proof you got your hardware working befo
 re friday 5pm\, or have contacted the Part's Assistants\n\n-----------\nSa
 mple Code\n-----------\n\nenum States{INIT\, S0\, S1} SM1_state = INIT\;\n
 int X_button = 8\;\n\n// Array of Output Pin variables\, set to the pins b
 eing used\nconst int b_size = 4\;\nconst int b[b_size] = {2\, 3\, 4\, 5}\;
 \n// Output Buffer\nint b_buf = 0x00\;\n// Input Variables\n\n// Serial Mo
 nitor Buffer\nint s_buf = 0x00\;\n\n/* 's' is an array of integers of size
  8. Note that arrays start at 0\nWe will use this to be able to see the in
 dividual bit values of the s_buf\n\n*/\nconst int s_size = 8\;\nint s[s_si
 ze]\;\n\n// We can also define our own helper functions. It is a good idea
  to use helper functions whenever they make sense.\n// Normally we also de
 fine the return type (void for none)\n\n// Read from the serial monitor in
 to s_buf and the s[] array for individual bits\nvoid readData()\n{\nif(Ser
 ial.available())\ns_buf = Serial.parseInt()\;\n\nfor(int i = (s_size - 1)\
 ; i>=0\; i--) {\ns[i] = (s_buf >> i) & 0x01\; // What's going on here?\n//
  ">>" bit shifting\n// "&" bit masking\n}\n\n}\n// Reset the Output Buffer
 .\nvoid resetBuffer() {\nfor(int i = 0\; i < b_size\; i++) {\n// Note this
  is an arduino function call to the pins\ndigitalWrite(b[i]\, LOW)\;\n}\n}
 \n// Writes to the buffer. Note this function ORs the current value with t
 he new value\n// Note that size is an optional argument with default size 
 the same as the buffer\nvoid writeBuffer(unsigned char b_temp\, int size =
  b_size)\n{\nfor (int i = (size - 1)\; i >= 0\; i--) {\nif ((b_temp >> i) 
 & 0x01) {\ndigitalWrite(b[i]\, HIGH)\;\n}\n}\n\n}\n\nvoid setup(){\n//some
  set up (Default Arduino Function)\npinMode(X_button\, INPUT)\;\n\n// LEDs
 \nfor(int i = 0\; i < b_size\; i++)\n{\npinMode(b[i]\, OUTPUT)\;\n}\nSeria
 l.begin(9600)\;\n}\n// This function takes in the state as an argument & r
 eturns the current state\nint SM1_Tick(int state){\n//Read thing\nswitch(s
 tate){ // State transitions\ncase INIT:\n//State Transition\nstate = S0\;\
 nbreak\;\ncase S0:\nif (digitalRead(X_button) == HIGH) {\nstate = S1\;\n}\
 nelse {\nstate = S0\;\n}\nbreak\;\ncase S1:\nif (digitalRead(X_button) == 
 LOW) {\nstate = S0\;\n}\nelse {\nstate = S1\;\n}\n//State Transition\nbrea
 k\;\n}\nswitch(state){ // State Action\ncase INIT:\n//State Action\nbreak\
 ;\ncase S0:\nresetBuffer()\;\n//State Action\nbreak\;\ncase S1:\n//State A
 ction\nwriteBuffer(0x0F)\;\nbreak\;\n}\n\nreturn state\;\n}\n\nvoid loop()
 {\n///Default arduino function\n// We have to cast the return value of the
  tick function to type States\nSM1_state = (States)SM1_Tick(SM1_state)\;\n
 }\n\nA key idea here is 'scope'. The 'state' variabled is local to the fun
 ction SM1_Tick\, and changes to the state variable inside the function are
  separate from the SM1_state global variable. In the loop function we upda
 te the SM1_state after every Tick of the SM1 state machine.\n\n-----------
 -------------\nRubric - 40 Points Total\n------------------------\n\n* Exe
 rcise 1 Nightlight Revisisted - 20 Points\n\n* Exercise 2 Photo-reset - 10
  Points\n\n* Exercise 3 Double Light Show - 10 Points\n\nSoftware Requirem
 ent\n--------------------\n\n* State Machines\n\nNotes:\n\n* You are allow
 ed to create helper functions.\n\n* Delay() function calls should never be
  inside a state machine.\n\n* If you set a period too small\, you may see 
 weird timing behavior\n\n* You may use variables to help you in any way. S
 tructs\, Counters\, Arrays\, etc.\n\n--------------\nParts & Wiring\n-----
 ---------\n\nWiring Diagram\n--------------\n\n[lab3_s22_w2.png] (https://
 elearn.ucr.edu/courses/48816/files/3104186/preview)\n\nThe wiring diagram 
 remains unchanged from last week.\n\nParts used\n----------\n\n* 4x LEDs\n
 \n* 4x 220k resistors\n\n* 2x 1k resistor (Photoresistor\, Button)\n\n* 2x
  Buttons\n\n* 1x PULLUP Configuration (Y)\n\n* 1x PULLDOWN Configuration (
 X)\n\n* 1x Photoresistor\n\n* Wires\n\n---------\nExercises\n---------\n\n
 The exercises are as follows\n\nExercise 1: Nightlight Revisited\n--------
 ------------------------\n\nExample Demo: https://youtu.be/qgb3vyp9Kww\n\n
 In this exercise you will reimplement Lab 2: Exercise 3 using a state mach
 ine. The modes should represent the states for full credit. You may option
 ally have a start or init states.\n\nDescription: Using the Photoresistor\
 , Create a system that has 2 modes.\n\nMode 0 uses the photoresistor and d
 isplays the value on the LED bank. Use the arduino map function to ensure 
 the values correctly map to the LED Bank. covering the photoresistor with 
 your hand should make all 4 LEDs turn off. The ambient light should cause 
 all 4 LEDs to turn on. This can be a binary conditional or a variable numb
 er written to the LEDs. Mode 0 is on by default\, or can be activated by p
 ressing Button 'X'. Pressing 'X' when Mode 0 is on will do nothing.\n\nMod
 e 1 uses the photoresistor to determine the max level of lighting to use. 
 Mode 1 is activated by Pressing 'Y'. Pressing 'Y' when already in Mode 1 d
 oes nothing. By default\, no light means all 4 LEDs are off. Some light me
 ans 2 LEDs are on. Lots of light means 0 LEDs are on. You may make simplif
 ying assumptions as needed.\n\nExercise 1 Deliverables\n------------------
 -----\n\n* Nightlight working as described in a SM - 10 points\n\n* Number
  States 2 - 3: {(Optional: Init)\, Mode_0\, Mode_1} - 10 points.\n\nExerci
 se 2: Photo-reset\n-----------------------\n\nExample Demo: https://youtu.
 be/JBjy3eXgaoc\n\nYou will implement a light level that can be toggled by 
 the buttons & reset by the photoresistor.\n\nDescription: For this exercis
 e\, the buttons should control the number of lights that are on. Each pres
 s of the 'X' button should turn on a single LEDs\, up to 4 LEDs. The 'Y' L
 ED should turn off a single LED\, if any are on. The lights may turn on or
  off in any order.\n\nThe photoresistor will act as a reset. The ambient l
 ight should not do anything. Covering the photoresistor should result in a
 ll lights turning off.\n\nFor full credit\, use 2 or 3 states. The optiona
 l extra state would be an init/start state. You should not represent the n
 umber of lights that are on as states {ONE\, TWO\, THREE\, FOUR}. It shoul
 d be {Init\, Active\, Reset}. Init is optional.\n\nExercise 2 Deliverables
 \n-----------------------\n\n* Photo-reset working as described - 5 points
 \n\n* States: {(Optional: Init)\, Active\, Reset} - 5 points\n\nExercise 3
  Double Light Show\n----------------------------\n\nExample Demo: https://
 youtu.be/BFvkZft5juQ\n\nDescription: Create 2 sets of light shows. Use the
  photoresistor to cycle between light shows. A light show is a series of 4
  different light patterns on 4 LEDs. So Light Show 1 Pattern 1 could be 10
 11\, Light Show 1 Pattern 2 could be 1101. The 'X' and 'Y' buttons go forw
 ards and backwards in the current Light Show's sequence of patterns. You m
 ay handle overflow in any way you deem necessary\, but the system should n
 ot crash. The ambient light or higher should not change anything. Covering
  the photoresistor with your hand should switch to the next light show. Th
 e light show should not switch again until the photoresistor reads at leas
 t ambient light and is covered again.\n\nFor full credit\, the states shou
 ld only be the Light Shows (L1\, L2) with an optional Init state.\n\nHint:
  For each Light show\, use an array of chars.\n\nExercise 3 Deliverables\n
 -----------------------\n\n* Two Light Shows - 5 points\n\n* States: {(Opt
 ional: Init)\, L1\, L2} - 5 points\n\n***********************\nGradescope 
 Instructions\n***********************\n\nMake three short screen-capture v
 ideos demonstrating correct functionality for each of the three exercises.
 \n\nPost your screen-capture videos to the hosting service or Cloud-based 
 storage solution of your choice. Edit the header file for each laboratory 
 exercise to contain a link to the corresponding video. Create a PDF file n
 amed [NetID]_lab1.pdf that contains three clickable URL links to the three
  videos. Rename the three .ino files to have the .cpp file extension Uploa
 d the following files Gradescope:\n\n* [NetID]_lab3.pdf\n\n* [NetID]_lab3_
 part1.cpp\n\n* [NetID]_lab3_part2.cpp\n\n* [NetID]_lab3_part3.cpp\n\n-----
 --------------------\nLab Submission Guidelines\n-------------------------
 \n\nPlease follow all requirements in the Lab submission Guidelines
SEQUENCE:0
SUMMARY:Laboratory Assignment #3: State Machines [CS_120B_001\, EE_120B_001
 ]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315267
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><h1>Lab 3: State Machines</h1>\n<p>By now you will 
 have gone over State Machines in lecture. The focus of this lab is to get 
 you familiar with coding up State Machines. A secondary goal is to get you
  thinking on what should be represented as "States" vs regular programming
  techniques. This entire lab &amp\; exercises expect you use a State Machi
 ne. Future labs will expect you to use at least State Machines.</p>\n<p>Lo
 ok at the sample code for an examples state machine.</p>\n<h2>Pre-lab</h2>
 \n<p>Example Demo: <a href="https://youtu.be/ExB2bJCTjcw" target="_blank">
 https://youtu.be/ExB2bJCTjcw</a></p>\n<ul>\n<li>Assemble your kit using th
 e circuit diagram</li>\n<li>Run the sample code</li>\n<li>The sample shoul
 d have all 4 LEDs turn on while the left button is pressed.</li>\n<li>If t
 he sample code works:\n<ul>\n<li>Create a video of the output and put the 
 link to it in your report</li>\n<li>Submit this report to gradescope as a 
 pdf before friday 5pm (You don't need to submit the code)</li>\n</ul>\n</l
 i>\n<li>If the sample code doesn't work\n<ul>\n<li>Create a video of the o
 utput.</li>\n<li>Email the Part's Assistants &amp\; link the video immedia
 tely\, and no later than friday 5pm.</li>\n</ul>\n</li>\n<li>Essentially\,
  you must have proof you got your hardware working before friday 5pm\, or 
 have contacted the Part's Assistants</li>\n</ul>\n<h2>Sample Code</h2>\n<d
 iv style="background: #ffffff\; overflow: auto\; width: auto\; border: sol
 id gray\; border-width: .1em .1em .1em .8em\; padding: .2em .6em\;">\n<pre
  style="margin: 0\; line-height: 125%\;"><span style="color: #0000aa\;">en
 um</span> States{INIT\, S0\, S1} SM1_state = INIT\;\n<span style="color: #
 00aaaa\;">int</span> X_button = <span style="color: #009999\;">8</span>\;\
 n\n<span style="color: #aaaaaa\; font-style: italic\;">// Array of Output 
 Pin variables\, set to the pins being used</span>\n<span style="color: #00
 00aa\;">const</span> <span style="color: #00aaaa\;">int</span> b_size = <s
 pan style="color: #009999\;">4</span>\;\n<span style="color: #0000aa\;">co
 nst</span> <span style="color: #00aaaa\;">int</span> b[b_size] = {<span st
 yle="color: #009999\;">2</span>\, <span style="color: #009999\;">3</span>\
 , <span style="color: #009999\;">4</span>\, <span style="color: #009999\;"
 >5</span>}\;\n<span style="color: #aaaaaa\; font-style: italic\;">// Outpu
 t Buffer</span>\n<span style="color: #00aaaa\;">int</span> b_buf = <span s
 tyle="color: #009999\;">0x00</span>\;\n<span style="color: #aaaaaa\; font-
 style: italic\;">// Input Variables</span>\n\n<span style="color: #aaaaaa\
 ; font-style: italic\;">// Serial Monitor Buffer</span>\n<span style="colo
 r: #00aaaa\;">int</span> s_buf = <span style="color: #009999\;">0x00</span
 >\; \n\n<span style="color: #aaaaaa\; font-style: italic\;">/* 's' is an a
 rray of integers of size 8. Note that arrays start at 0</span>\n<span styl
 e="color: #aaaaaa\; font-style: italic\;"> We will use this to be able to 
 see the individual bit values of the s_buf</span>\n\n<span style="color: #
 aaaaaa\; font-style: italic\;"> */</span>\n<span style="color: #0000aa\;">
 const</span> <span style="color: #00aaaa\;">int</span> s_size = <span styl
 e="color: #009999\;">8</span>\;\n<span style="color: #00aaaa\;">int</span>
  s[s_size]\;\n\n<span style="color: #aaaaaa\; font-style: italic\;">// We 
 can also define our own helper functions. It is a good idea to use helper 
 functions whenever they make sense.</span>\n<span style="color: #aaaaaa\; 
 font-style: italic\;">// Normally we also define the return type (void for
  none)</span>\n\n<span style="color: #aaaaaa\; font-style: italic\;">// Re
 ad from the serial monitor into s_buf and the s[] array for individual bit
 s</span>\n<span style="color: #00aaaa\;">void</span> <span style="color: #
 00aa00\;">readData</span>()\n{\n    <span style="color: #0000aa\;">if</spa
 n>(Serial.available())\n        s_buf = Serial.parseInt()\;\n\n    <span s
 tyle="color: #0000aa\;">for</span>(<span style="color: #00aaaa\;">int</spa
 n> i = (s_size - <span style="color: #009999\;">1</span>)\; i&gt\;=<span s
 tyle="color: #009999\;">0</span>\; i--)  { \n        s[i] = (s_buf &gt\;&g
 t\; i) &amp\; <span style="color: #009999\;">0x01</span>\; <span style="co
 lor: #aaaaaa\; font-style: italic\;">// What's going on here?</span>\n    
     <span style="color: #aaaaaa\; font-style: italic\;">// "&gt\;&gt\;" bi
 t shifting </span>\n        <span style="color: #aaaaaa\; font-style: ital
 ic\;">// "&amp\;" bit masking</span>\n    }\n\n}\n<span style="color: #aaa
 aaa\; font-style: italic\;">// Reset the Output Buffer. </span>\n<span sty
 le="color: #00aaaa\;">void</span> <span style="color: #00aa00\;">resetBuff
 er</span>() {\n    <span style="color: #0000aa\;">for</span>(<span style="
 color: #00aaaa\;">int</span> i = <span style="color: #009999\;">0</span>\;
  i &lt\; b_size\; i++) {\n        <span style="color: #aaaaaa\; font-style
 : italic\;">// Note this is an arduino function call to the pins</span>\n 
        digitalWrite(b[i]\, LOW)\;\n    }\n}\n<span style="color: #aaaaaa\;
  font-style: italic\;">// Writes to the buffer. Note this function ORs the
  current value with the new value</span>\n<span style="color: #aaaaaa\; fo
 nt-style: italic\;">// Note that size is an optional argument with default
  size the same as the buffer</span>\n<span style="color: #00aaaa\;">void</
 span> <span style="color: #00aa00\;">writeBuffer</span>(<span style="color
 : #00aaaa\;">unsigned</span> <span style="color: #00aaaa\;">char</span> b_
 temp\, <span style="color: #00aaaa\;">int</span> size = b_size)\n{\n    <s
 pan style="color: #0000aa\;">for</span> (<span style="color: #00aaaa\;">in
 t</span> i = (size - <span style="color: #009999\;">1</span>)\; i &gt\;= <
 span style="color: #009999\;">0</span>\; i--) {\n        <span style="colo
 r: #0000aa\;">if</span> ((b_temp &gt\;&gt\; i) &amp\; <span style="color: 
 #009999\;">0x01</span>) {\n        digitalWrite(b[i]\, HIGH)\;\n        }\
 n    }\n    \n\n}\n\n\n<span style="color: #00aaaa\;">void</span> <span st
 yle="color: #00aa00\;">setup</span>(){\n  <span style="color: #aaaaaa\; fo
 nt-style: italic\;">//some set up (Default Arduino Function)</span>\n    p
 inMode(X_button\, INPUT)\;\n\n    <span style="color: #aaaaaa\; font-style
 : italic\;">// LEDs</span>\n    <span style="color: #0000aa\;">for</span>(
 <span style="color: #00aaaa\;">int</span> i = <span style="color: #009999\
 ;">0</span>\; i &lt\; b_size\; i++)\n    {\n        pinMode(b[i]\, OUTPUT)
 \;\n    }\n    Serial.begin(<span style="color: #009999\;">9600</span>)\;\
 n}\n<span style="color: #aaaaaa\; font-style: italic\;">// This function t
 akes in the state as an argument &amp\; returns the current state</span>\n
 <span style="color: #00aaaa\;">int</span> <span style="color: #00aa00\;">S
 M1_Tick</span>(<span style="color: #00aaaa\;">int</span> state){\n    <spa
 n style="color: #aaaaaa\; font-style: italic\;">//Read thing</span>\n    <
 span style="color: #0000aa\;">switch</span>(state){ <span style="color: #a
 aaaaa\; font-style: italic\;">// State transitions</span>\n      <span sty
 le="color: #0000aa\;">case</span> INIT:\n         <span style="color: #aaa
 aaa\; font-style: italic\;">//State Transition</span>\n            state =
  S0\;\n        <span style="color: #0000aa\;">break</span>\;\n      <span 
 style="color: #0000aa\;">case</span> S0:\n         <span style="color: #00
 00aa\;">if</span> (digitalRead(X_button) == HIGH) {\n            state = S
 1\;\n         }\n         <span style="color: #0000aa\;">else</span> {\n  
           state = S0\;\n         }\n        <span style="color: #0000aa\;"
 >break</span>\;\n      <span style="color: #0000aa\;">case</span> S1:\n   
      <span style="color: #0000aa\;">if</span> (digitalRead(X_button) == LO
 W) {\n            state = S0\;\n        }\n        <span style="color: #00
 00aa\;">else</span> {\n            state = S1\;\n        }\n         <span
  style="color: #aaaaaa\; font-style: italic\;">//State Transition</span>\n
         <span style="color: #0000aa\;">break</span>\;\n    }\n    <span st
 yle="color: #0000aa\;">switch</span>(state){ <span style="color: #aaaaaa\;
  font-style: italic\;">// State Action</span>\n      <span style="color: #
 0000aa\;">case</span> INIT:\n         <span style="color: #aaaaaa\; font-s
 tyle: italic\;">//State Action</span>\n        <span style="color: #0000aa
 \;">break</span>\;\n      <span style="color: #0000aa\;">case</span> S0:\n
         resetBuffer()\;\n         <span style="color: #aaaaaa\; font-style
 : italic\;">//State Action</span>\n        <span style="color: #0000aa\;">
 break</span>\;\n      <span style="color: #0000aa\;">case</span> S1:\n    
      <span style="color: #aaaaaa\; font-style: italic\;">//State Action</s
 pan>\n        writeBuffer(<span style="color: #009999\;">0x0F</span>)\;\n 
        <span style="color: #0000aa\;">break</span>\;\n    }\n\n    <span s
 tyle="color: #0000aa\;">return</span> state\;\n}\n\n<span style="color: #0
 0aaaa\;">void</span> <span style="color: #00aa00\;">loop</span>(){ \n    <
 span style="color: #aaaaaa\; font-style: italic\;">///Default arduino func
 tion</span>\n    <span style="color: #aaaaaa\; font-style: italic\;">// We
  have to cast the return value of the tick function to type States</span>\
 n    SM1_state = (States)SM1_Tick(SM1_state)\;\n}\n</pre>\n</div>\n<p>A ke
 y idea here is 'scope'. The 'state' variabled is local to the function SM1
 _Tick\, and changes to the state variable inside the function are separate
  from the SM1_state global variable. In the loop function we update the SM
 1_state after every Tick of the SM1 state machine.</p>\n<h2>Rubric - 40 Po
 ints Total</h2>\n<ul>\n<li>Exercise 1 Nightlight Revisisted - 20 Points</l
 i>\n<li>Exercise 2 Photo-reset - 10 Points</li>\n<li>Exercise 3 Double Lig
 ht Show - 10 Points</li>\n</ul>\n<h3>Software Requirement</h3>\n<ul>\n<li>
 State Machines</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>You are allowed to cr
 eate helper functions.</li>\n<li>Delay() function calls should never be in
 side a state machine.</li>\n<li>If you set a period too small\, you may se
 e weird timing behavior</li>\n<li>You may use variables to help you in any
  way. Structs\, Counters\, Arrays\, etc.</li>\n</ul>\n<h2>Parts &amp\; Wir
 ing</h2>\n<h3>Wiring Diagram</h3>\n<p><img id="3104186" src="https://elear
 n.ucr.edu/courses/48816/files/3104186/preview" alt="lab3_s22_w2.png" data-
 api-endpoint="https://elearn.ucr.edu/api/v1/courses/48816/files/3104186" d
 ata-api-returntype="File"><br><br>The wiring diagram remains unchanged fro
 m last week.</p>\n<h3>Parts used</h3>\n<ul>\n<li>4x LEDs</li>\n<li>4x 220k
  resistors</li>\n<li>2x 1k resistor (Photoresistor\, Button)</li>\n<li>2x 
 Buttons\n<ul>\n<li>1x PULLUP Configuration (Y)</li>\n<li>1x PULLDOWN Confi
 guration (X)</li>\n</ul>\n</li>\n<li>1x Photoresistor</li>\n<li>Wires</li>
 \n</ul>\n<h2>Exercises</h2>\n<p>The exercises are as follows</p>\n<h3>Exer
 cise 1: Nightlight Revisited</h3>\n<p>Example Demo: <a href="https://youtu
 .be/qgb3vyp9Kww" target="_blank">https://youtu.be/qgb3vyp9Kww</a></p>\n<p>
 In this exercise you will reimplement Lab 2: Exercise 3 using a state mach
 ine. The modes should represent the states for full credit. You may option
 ally have a start or init states.</p>\n<p>Description: Using the Photoresi
 stor\, Create a system that has 2 modes.</p>\n<p>Mode 0 uses the photoresi
 stor and displays the value on the LED bank. Use the arduino map function 
 to ensure the values correctly map to the LED Bank. covering the photoresi
 stor with your hand should make all 4 LEDs turn off. The ambient light sho
 uld cause all 4 LEDs to turn on. This can be a binary conditional or a var
 iable number written to the LEDs. Mode 0 is on by default\, or can be acti
 vated by pressing Button 'X'. Pressing 'X' when Mode 0 is on will do nothi
 ng.</p>\n<p>Mode 1 uses the photoresistor to determine the max level of li
 ghting to use. Mode 1 is activated by Pressing 'Y'. Pressing 'Y' when alre
 ady in Mode 1 does nothing. By default\, no light means all 4 LEDs are off
 . Some light means 2 LEDs are on. Lots of light means 0 LEDs are on. You m
 ay make simplifying assumptions as needed.</p>\n<h4>Exercise 1 Deliverable
 s</h4>\n<ul>\n<li>Nightlight working as described in a SM - 10 points</li>
 \n<li>Number States 2 - 3: {(Optional: Init)\, Mode_0\, Mode_1} - 10 point
 s.</li>\n</ul>\n<h3>Exercise 2: Photo-reset</h3>\n<p>Example Demo: <a href
 ="https://youtu.be/JBjy3eXgaoc" target="_blank">https://youtu.be/JBjy3eXga
 oc</a></p>\n<p>You will implement a light level that can be toggled by the
  buttons &amp\; reset by the photoresistor.</p>\n<p>Description: For this 
 exercise\, the buttons should control the number of lights that are on. Ea
 ch press of the 'X' button should turn on a single LEDs\, up to 4 LEDs. Th
 e 'Y' LED should turn off a single LED\, if any are on. The lights may tur
 n on or off in any order.</p>\n<p>The photoresistor will act as a reset. T
 he ambient light should not do anything. Covering the photoresistor should
  result in all lights turning off.</p>\n<p>For full credit\, use 2 or 3 st
 ates. The optional extra state would be an init/start state. You should no
 t represent the number of lights that are on as states {ONE\, TWO\, THREE\
 , FOUR}. It should be {Init\, Active\, Reset}. Init is optional.</p>\n<h4>
 Exercise 2 Deliverables</h4>\n<ul>\n<li>Photo-reset working as described -
  5 points</li>\n<li>States: {(Optional: Init)\, Active\, Reset} - 5 points
 </li>\n</ul>\n<h3>Exercise 3 Double Light Show</h3>\n<p>Example Demo: <a h
 ref="https://youtu.be/BFvkZft5juQ" target="_blank">https://youtu.be/BFvkZf
 t5juQ</a></p>\n<p>Description: Create 2 sets of light shows. Use the photo
 resistor to cycle between light shows. A light show is a series of 4 diffe
 rent light patterns on 4 LEDs. So Light Show 1 Pattern 1 could be 1011\, L
 ight Show 1 Pattern 2 could be 1101. The 'X' and 'Y' buttons go forwards a
 nd backwards in the current Light Show's sequence of patterns. You may han
 dle overflow in any way you deem necessary\, but the system should not cra
 sh. The ambient light or higher should not change anything. Covering the p
 hotoresistor with your hand should switch to the next light show. The ligh
 t show should not switch again until the photoresistor reads at least ambi
 ent light and is covered again.</p>\n<p>For full credit\, the states shoul
 d only be the Light Shows (L1\, L2) with an optional Init state.</p>\n<p>H
 int: For each Light show\, use an array of chars.</p>\n<h4>Exercise 3 Deli
 verables</h4>\n<ul>\n<li>Two Light Shows - 5 points</li>\n<li>States: {(Op
 tional: Init)\, L1\, L2} - 5 points</li>\n</ul>\n<h1>Gradescope Instructio
 ns</h1>\n<p>Make three short screen-capture videos demonstrating correct f
 unctionality for each of the three exercises.</p>\n<p>Post your screen-cap
 ture videos to the hosting service or Cloud-based storage solution of your
  choice. Edit the header file for each laboratory exercise to contain a li
 nk to the corresponding video. Create a PDF file named [NetID]_lab1.pdf th
 at contains three clickable URL links to the three videos. Rename the thre
 e .ino files to have the .cpp file extension Upload the following files Gr
 adescope:</p>\n<ul>\n<li>[NetID]_lab3.pdf</li>\n<li>[NetID]_lab3_part1.cpp
 </li>\n<li>[NetID]_lab3_part2.cpp</li>\n<li>[NetID]_lab3_part3.cpp</li>\n<
 /ul>\n<h2>Lab Submission Guidelines</h2>\n<p>Please follow all requirement
 s in the Lab submission Guidelines</p><script src="https://instructure-upl
 oads.s3.amazonaws.com/account_144930000000000001/attachments/178366/canvas
 _global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318733
DTSTART;VALUE=DATE:20220415T000000
DTEND;VALUE=DATE:20220415T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Passion Essay Redo [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=04&
 year=2022#assignment_318733
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T222000Z
UID:event-assignment-315237
DTSTART;VALUE=DATE:20220417T000000
DTEND;VALUE=DATE:20220417T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Extra Credit Homework #1 [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315237
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001600Z
UID:event-assignment-315244
DTSTART:20220420T000000Z
DTEND:20220420T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (4/19/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315244
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220328T190400Z
UID:event-assignment-override-14016
DTSTART:20220420T000000Z
DTEND:20220420T000000Z
CLASS:PUBLIC
DESCRIPTION:You will be working on a team of 2 to 4 people. Your instructor
 s will assign teams. \n\nDo NOT come to lab without at least one\, and id
 eally at least one additional backup\, idea. If your team has not submitte
 d one or more product ideas BEFORE lab\, you will not receive credit for t
 his part of lab.\n\nRead the following criteria\, then turn in a PDF listi
 ng your team's ideas\, ranked from most favorite to least favorite as agre
 ed upon by the team as a whole. DO NOT include the name of who came up wi
 th the idea. Maximum 3 ideas. We strongly recommend having a least two ide
 as listed in case your first choice is not approved.  Just provide a 1-2 
 sentence description of the idea. Follow the TEAM naming conventions for t
 his assignment.\n\nThe key assignment for this class revolves around an im
 aginary product you are creating. For the duration of the class\, you will
  be working with this product in a variety of ways\, including:\n\n* pitch
 ing to investment people\n\n* writing a specification\n\n* writing test ca
 ses\n\n* and many other fun things\n\nYour product should not be an existi
 ng product\, unless you are improving it significantly (i.e.\, in a disrup
 tive technology sort of way). For example\, a toaster that also warms Indi
 an bread is not a significant improvement - that's called a toaster oven\,
  a robust and stable technology. However\, a toaster that also makes bread
  from programmable and downloadable recipes might be OK.\n\nYou may use yo
 ur senior project as the product. To do that\, you MUST send an email to u
 s and your advisor\, explaining you plan to do this and get written approv
 al from your advisor (email) before you move ahead. This is to avoid a tec
 hnical thing in the U's cheating rules that states you can't reuse work fr
 om one class in another. We want to help you avoid getting tripped up ther
 e. \n\nProducts should be relatively small in scope (smaller than the Dea
 th Star)\, but contain sufficient complexity to provide at least 10 featur
 es to specify (i.e.\, larger/more complex than a toaster). Choose a produ
 ct you are interested in enough to work with for 8 weeks. It's difficult f
 or you to change products because each product assignment builds from the 
 previous week.\n\nPlease note: For any product-based assignment\, multiply
  the number of requirements by the number of people on the team (for examp
 le\, the product for a team of 2 must be complex enough for 10 features). 
 Also\, for product-related assignments\, the file naming conventions are s
 lightly different. Instead of using your first/last name\, all team member
 s will turn in the same file for that assignment and substitute the team n
 ame (e.g.\, BonniTeam1PresentationSlides.ppt).\n\nUnless you are a Bio-Med
  major or there is a bio-med major on your team\, stay away from engineere
 d food or medications. It will only result in tears.\n\nThis product can b
 e:\n\n* something you are interested in actually developing one day (we've
  had several students use real products they are developing)\n\n* your sen
 ior project\, if you get written permission (email to and from your adviso
 r with us CC-ed is fine) from your advisor to avoid the possibility of loo
 king like you are cheating\n\n* a totally fake product you have no intenti
 on of ever building\n\n* a product that can't exist right now because our 
 technology won't allow it (you'll need to specify the fictive breakthrough
  that allows you to develop it\, though)\n\n* an app but remember\, it mus
 t do 5 things or have 5 attributes (or both) that can be spec-ed per team 
 member. \n\nThis product must be:\n\n* technological in nature (a simple 
 mechanical tool will not suffice)\n\n* innovative (i.e.\, if I can go buy 
 it today\, it does not count unless you are making significant improvement
 s to it)\n\n* solve a problem actual people might have\n\n* (ideally) rela
 ted to your major focus (e.g.\, if you are a software person\, and are not
  terribly familiar with hardware\, don't pick a product that is entirely h
 ardware unless you have a hardware person on your team\; nothing good will
  come of it)\n\nBecause we teach this class 4 quarters a year and have for
  many years\, we've seen a lot of products. Products we are tired of and d
 on't want to see include:\n\n* New coding languages (e.g. coding in plain 
 English\, etc.)\n\n* Any app that lets you "try out" clothing\, shoes\, ha
 ir cuts/colors\, room decor etc. (as a whole product\; this can be a capab
 ility or feature within a product)\n\n* A closet organizing app or dressin
 g app or recommend clothes app or anything like this app\n\n* Exoskeletons
 /powered suits\n\n* Bags that charge electronics\n\n* Virtual Reality mach
 ines (as a whole product\; VR can be a capability/feature within the produ
 ct)\n\n* Robots\, especially kitchen robots. \n\n* Dream machines that re
 cords dreams - really anything involving dreams\n\n* Telepathy or other re
 ad your mind products. \n\n* Wireless headphones or most wireless things\
 n\n* Transporters/teleporters (unless you are working on one right now)\n\
 n* Fabrics/carpets/and so on of any sort (including ones that charge thing
 s\, magically clean themselves\, magically conform themselves. etc.)\n\n* 
 Hoverboards/hovershoes/etc (really\, anything that involves hovering is ri
 ght out\; Back to the Future II did this to death. We've seen the movie an
 d are quite done with hovering)\; this includes mag-lev trains or cars (th
 e systems are too big to be in scope)\n\n* Magic windows that turn into sc
 reens that can show stuff\n\n* Anything that involves shoes is right out\n
 \n* Contact lenses of any sort\n\n* Solar devices for iPods or other perso
 nal electronics\n\n* Home hydroponics\n\n* Food converters of any sort\n\n
 * Counter-top robots that make food or do other kitchen activities\n\n* Au
 tomatic clothes folding machines\n\n* Computer games or equipment\, with a
  few exceptions\n\n* Batteries of any sort\n\n* Automatic translation devi
 ces (with a few small exceptions)\n\n* Anything that improves your golf ga
 me or basketball game or... \n\n* Anything that's sort of like anything i
 n this list\, unless you are actually developing it. We'll want a prototyp
 e in class if you are.\n\nYou can be as silly or as serious as you want wi
 th your product. Fun products in the past included:\n\n* Actual reality su
 it\n\n* Super powers chemistry set\n\n* Cell phone/assault laser\n\n* Dati
 ng training robot\, complete with demo unit (his girlfriend who played the
  unit) in lab
SEQUENCE:0
SUMMARY:Your product for this class (SB 22 Tue Red 6) [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=04&
 year=2022#assignment_318749
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><p><span style="color: #333333\; background-color: 
 #ffff00\; font-size: medium\;"><strong><span style="font-family: arial\, h
 elvetica\, sans-serif\;">You will be working on a team of 2 to 4 people. Y
 our instructors will assign teams.&nbsp\;</span></strong></span></p>\n<p><
 span style="color: #333333\; background-color: #ffff00\; font-size: medium
 \;"><strong><span style="font-family: arial\, helvetica\, sans-serif\;">Do
  NOT come to lab without at least one\, and ideally at least one additiona
 l backup\, idea. If your team has not submitted one or more product ideas 
 BEFORE lab\, you will not receive credit for this part of lab.</span></str
 ong></span></p>\n<p><strong>Read the following criteria\, then turn in a P
 DF listing your team's ideas\, ranked from most favorite to least favorite
  <em>as agreed upon&nbsp\;by the team as a whole</em>. DO NOT include the 
 name of who came up with the idea. Maximum 3 ideas. We strongly recommend 
 having a least two ideas listed in case your first choice is not approved.
 &nbsp\; Just provide a 1-2 sentence description of the idea. Follow the TE
 AM naming conventions for this assignment.</strong></p>\n<p><span style="f
 ont-family: arial\, helvetica\, sans-serif\; font-size: 12pt\;">The key as
 signment for this class revolves around an imaginary product you are creat
 ing. For the duration of the class\, you will be working with this product
  in a variety of ways\, including:</span></p>\n<ul>\n<li><span style="font
 -family: arial\, helvetica\, sans-serif\;">pitching to investment people <
 /span></li>\n<li><span style="font-family: arial\, helvetica\, sans-serif\
 ;">writing a specification </span></li>\n<li><span style="font-family: ari
 al\, helvetica\, sans-serif\;">writing test cases </span></li>\n<li><span 
 style="font-family: arial\, helvetica\, sans-serif\;">and many other fun t
 hings </span></li>\n</ul>\n<p><span style="font-family: arial\, helvetica\
 , sans-serif\;">Your product should not be an existing product\, unless yo
 u are improving it <em>significantly</em> (i.e.\, in a disruptive technolo
 gy sort of way). For example\, a toaster that also warms Indian bread is n
 ot a significant improvement - that's called a toaster oven\, a robust and
  stable technology. However\, a toaster that also makes bread from program
 mable and <span><span><span><span><span><span>downloadable</span></span></
 span></span></span></span> recipes might be OK. </span></p>\n<p><span styl
 e="font-family: arial\, helvetica\, sans-serif\;">You may use your senior 
 project as the product. To do that\, you <strong>MUST</strong> send an ema
 il to us and your advisor\, explaining you plan to do this and get written
  approval from your advisor (email) before you move ahead. This is to avoi
 d a technical thing in the <span><span><span><span><span><span>U's</span><
 /span></span></span></span></span> cheating rules that states you can't re
 use work from one class in another. We want to help you avoid getting trip
 ped up there.&nbsp\;</span></p>\n<p><span style="font-family: arial\, helv
 etica\, sans-serif\;">Products should be relatively small in scope (smalle
 r than the Death Star)\, but contain sufficient complexity to provide at l
 east 10 features to specify (i.e.\, larger/more complex&nbsp\;than a toast
 er). Choose a product you are interested in enough to work with for 8 week
 s. It's difficult for you to change products because each product assignme
 nt builds from the previous week. </span></p>\n<p><span style="font-family
 : arial\, helvetica\, sans-serif\;"><strong style="font-family: arial\, he
 lvetica\, sans-serif\; font-size: 13px\;"><em>Please note</em></strong><sp
 an style="font-family: arial\, helvetica\, sans-serif\; font-size: 13px\;"
 >: </span><span style="font-family: arial\, helvetica\, sans-serif\; font-
 size: 13px\;">For any product-based assignment\, multiply the number of re
 quirements by the number of people on the team (for example\, the product 
 for a team of 2 must be complex enough for 10 features). Also\, for produc
 t-related assignments\, the file naming conventions are slightly different
 . Instead of using your first/last name\, all team members will turn in th
 e same file for that assignment and substitute the team name (e.g.\, <span
 ><span><span><span><span><span>BonniTeam</span></span></span></span></span
 ></span>1<span><span><span><span><span><span>PresentationSlides</span></sp
 an></span></span></span></span>.<span><span><span><span><span><span>ppt</s
 pan></span></span></span></span></span>).</span></span></p>\n<p><span styl
 e="font-family: arial\, helvetica\, sans-serif\;"><strong><em><span style=
 "color: #ff0000\;">Unless you are a <span><span><span><span><span><span>Bi
 o</span></span></span></span></span></span>-Med major or there is a <span>
 <span><span><span><span><span>bio</span></span></span></span></span></span
 >-med major on your team\, stay away from engineered food or medications. 
 It will only result in tears. </span></em></strong><br><br>This product <s
 pan>can</span> be:</span></p>\n<ul>\n<li><span style="font-family: arial\,
  helvetica\, sans-serif\;">something you are interested in actually develo
 ping one day (we've had several students use real products they are develo
 ping)</span></li>\n<li><span style="font-family: arial\, helvetica\, sans-
 serif\;">your senior project\, if you get <strong>written permission (emai
 l to and from your advisor with us CC-ed is fine)</strong> from your advis
 or to avoid the possibility of looking like you are cheating</span></li>\n
 <li><span style="font-family: arial\, helvetica\, sans-serif\;">a totally 
 fake product you have no intention of ever building</span></li>\n<li><span
  style="font-family: arial\, helvetica\, sans-serif\;">a product that can'
 t exist right now because our technology won't allow it (you'll need to sp
 ecify the fictive breakthrough that allows you to develop it\, though)</sp
 an></li>\n<li><span style="font-family: arial\, helvetica\, sans-serif\;">
 an <span><span><span><span><span><span>app</span></span></span></span></sp
 an></span> but remember\, it must do 5 things or have 5 attributes (or bot
 h) that can be spec-ed per team member.&nbsp\;</span></li>\n</ul>\n<p><spa
 n style="font-family: arial\, helvetica\, sans-serif\;">This product <stro
 ng>must</strong> be:</span></p>\n<ul>\n<li><span style="font-family: arial
 \, helvetica\, sans-serif\;">technological in nature (a simple mechanical 
 tool will not suffice)</span></li>\n<li><span style="font-family: arial\, 
 helvetica\, sans-serif\;">innovative (i.e.\, if I can go buy it today\, it
  does not count unless you are making significant improvements to it)</spa
 n></li>\n<li><span style="font-family: arial\, helvetica\, sans-serif\;">s
 olve a problem actual people might have</span></li>\n<li><span style="font
 -family: arial\, helvetica\, sans-serif\;">(ideally) related to your major
  focus (e.g.\, if you are a software person\, and are not terribly familia
 r with hardware\, don't pick a product that is entirely hardware unless yo
 u have a hardware person on your team\; nothing good will come of it)</spa
 n></li>\n</ul>\n<p><span style="font-family: arial\, helvetica\, sans-seri
 f\;">Because we teach this class 4 quarters a year and have for many years
 \, we've seen a lot of products. Products <span style="color: #e03e2d\;"><
 strong>we are tired of and don't want to see</strong></span> include: </sp
 an></p>\n<ul>\n<li><span style="font-size: 12pt\;">New coding languages (e
 .g. coding in plain English\, etc.)</span></li>\n<li><span style="font-siz
 e: 12pt\;">Any app that lets you "try out" clothing\, shoes\, hair cuts/co
 lors\, room decor etc. (as a whole product\; this can be a capability or f
 eature within a product)</span></li>\n<li><span style="font-size: 12pt\;">
 A closet organizing app or dressing app or recommend clothes app or anythi
 ng like this app</span></li>\n<li><span style="font-size: 12pt\;">Exoskele
 tons/powered suits</span></li>\n<li><span style="font-family: arial\, helv
 etica\, sans-serif\;">Bags that charge electronics</span></li>\n<li><span 
 style="font-family: arial\, helvetica\, sans-serif\;">Virtual Reality mach
 ines (as a whole product\; VR can be a capability/feature within the produ
 ct)</span></li>\n<li><span style="font-family: arial\, helvetica\, sans-se
 rif\;">Robots\, especially kitchen robots.&nbsp\;</span></li>\n<li><span s
 tyle="font-family: arial\, helvetica\, sans-serif\;">Dream machines that r
 ecords dreams - really anything involving dreams</span></li>\n<li><span st
 yle="font-family: arial\, helvetica\, sans-serif\;">Telepathy or other rea
 d your mind products.&nbsp\;</span></li>\n<li><span style="font-family: ar
 ial\, helvetica\, sans-serif\;">Wireless headphones or most wireless thing
 s</span></li>\n<li><span style="font-family: arial\, helvetica\, sans-seri
 f\;">Transporters/<span><span><span><span><span><span>teleporters</span></
 span></span></span></span></span> (unless you are working on one right now
 )</span></li>\n<li><span style="font-family: arial\, helvetica\, sans-seri
 f\;">Fabrics/carpets/and so on of any sort (including ones that charge thi
 ngs\, magically clean themselves\, magically conform themselves. etc.)</sp
 an></li>\n<li><span style="font-family: arial\, helvetica\, sans-serif\;">
 <span><span><span><span><span><span>Hoverboards</span></span></span></span
 ></span></span>/<span><span><span><span><span><span>hovershoes</span></spa
 n></span></span></span></span>/etc (really\, anything that involves hoveri
 ng is right out\; <em>Back to the Future II </em>did this to death. We've 
 seen the movie and are quite done with hovering)\; this includes mag-<span
 ><span><span><span><span><span>lev</span></span></span></span></span></spa
 n> trains or cars (the systems are too big to be in scope)</span></li>\n<l
 i><span style="font-family: arial\, helvetica\, sans-serif\;">Magic window
 s that turn into screens that can show stuff</span></li>\n<li><span style=
 "font-family: arial\, helvetica\, sans-serif\;">Anything that involves sho
 es is right out</span></li>\n<li><span style="font-family: arial\, helveti
 ca\, sans-serif\;">Contact lenses of any sort </span></li>\n<li><span styl
 e="font-family: arial\, helvetica\, sans-serif\;">Solar devices for <span>
 <span><span><span><span><span>iPods</span></span></span></span></span></sp
 an> or other personal electronics </span></li>\n<li><span style="font-fami
 ly: arial\, helvetica\, sans-serif\;">Home hydroponics </span></li>\n<li><
 span style="font-family: arial\, helvetica\, sans-serif\;">Food converters
  of any sort</span></li>\n<li><span style="font-family: arial\, helvetica\
 , sans-serif\;">Counter-top robots that make food or do other kitchen acti
 vities</span></li>\n<li><span style="font-family: arial\, helvetica\, sans
 -serif\;">Automatic clothes folding machines</span></li>\n<li><span style=
 "font-family: arial\, helvetica\, sans-serif\;">Computer games or equipmen
 t\, with a few exceptions</span></li>\n<li><span style="font-family: arial
 \, helvetica\, sans-serif\;">Batteries of any sort </span></li>\n<li><span
  style="font-family: arial\, helvetica\, sans-serif\;">Automatic translati
 on devices (with a few small exceptions)</span></li>\n<li><span style="fon
 t-family: arial\, helvetica\, sans-serif\;">Anything that improves your go
 lf game or basketball game or...&nbsp\;</span></li>\n<li><span style="font
 -family: arial\, helvetica\, sans-serif\;">Anything that's sort of like an
 ything in this list\, unless you are <strong>actually developing it.</stro
 ng> We'll want a prototype in class if you are.</span></li>\n</ul>\n<p><sp
 an class="fnt0"><span class="fnt0"><span style="font-family: arial\, helve
 tica\, sans-serif\;">You can be as silly or as serious as you want with yo
 ur product. Fun products in the past included: </span></span></span></p>\n
 <ul>\n<li><span style="font-family: arial\, helvetica\, sans-serif\;">Actu
 al reality suit </span></li>\n<li><span style="font-family: arial\, helvet
 ica\, sans-serif\;">Super powers chemistry set </span></li>\n<li><span sty
 le="font-family: arial\, helvetica\, sans-serif\;">Cell phone/assault lase
 r </span></li>\n<li><span style="font-family: arial\, helvetica\, sans-ser
 if\;">Dating training robot\, complete with demo unit (his girlfriend who 
 played the unit) in lab</span></li>\n</ul><script src="https://instructure
 -uploads.s3.amazonaws.com/account_144930000000000001/attachments/178366/ca
 nvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001700Z
UID:event-assignment-315245
DTSTART:20220422T000000Z
DTEND:20220422T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (4/21/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315245
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220401T040000Z
UID:event-assignment-315268
DTSTART:20220423T000000Z
DTEND:20220423T000000Z
CLASS:PUBLIC
DESCRIPTION:We have invented time! With this newfound technology we shall c
 ombine it with state machines.\n\nThe sample code shows an example of a Sy
 nch SM. This implementation is somewhat naive compared to real-time task s
 cheduling in the real world\, but that is beyond the scope of this class.\
 n\n-------\nPre-lab\n-------\n\n* Assemble your kit using the circuit diag
 ram\n\n* Run the sample code\n\n* The sample code should blink all LEDs ev
 ery other period for a period.\n\n* If the sample code works:\n\n* Create 
 a video of the output and put the link to it in your report\n\n* Submit th
 is report to gradescope as a pdf before Friday 5pm (You don't need to subm
 it the code)\n\n* If the sample code doesn't work\n\n* Create a video of t
 he output.\n\n* Email the Part's Assistants & link the video immediately\,
  and no later than Friday 5pm.\n\n* Essentially\, you must have proof you 
 got your hardware working before Friday 5pm\, or have contacted the Part's
  Assistants\n\n-----------\nSample Code\n-----------\n\nenum States{INIT\,
  S0\, S1} SM1_state = INIT\;\nint X_button = 8\;\n\n// Array of Output Pin
  variables\, set to the pins being used\nconst int b_size = 4\;\nconst int
  b[b_size] = {2\, 3\, 4\, 5}\;\n// Output Buffer\nint b_buf = 0x00\;\n// I
 nput Variables\n\n// Serial Monitor Buffer\nint s_buf = 0x00\;\n\n/* 's' i
 s an array of integers of size 8. Note that arrays start at 0\nWe will use
  this to be able to see the individual bit values of the s_buf\n\n*/\ncons
 t int s_size = 8\;\nint s[s_size]\;\n\n// We can also define our own helpe
 r functions. It is a good idea to use helper functions whenever they make 
 sense.\n// Normally we also define the return type (void for none)\n\n// R
 ead from the serial monitor into s_buf and the s[] array for individual bi
 ts\nvoid readData()\n{\nif(Serial.available())\ns_buf = Serial.parseInt()\
 ;\n\nfor(int i = (s_size - 1)\; i>=0\; i--) {\ns[i] = (s_buf >> i) & 0x01\
 ; // What's going on here?\n// ">>" bit shifting\n// "&" bit masking\n}\n\
 n}\n// Reset the Output Buffer.\nvoid resetBuffer() {\nfor(int i = 0\; i <
  b_size\; i++) {\n// Note this is an arduino function call to the pins\ndi
 gitalWrite(b[i]\, LOW)\;\n}\n}\n// Writes to the buffer. Note this functio
 n ORs the current value with the new value\n// Note that size is an option
 al argument with default size the same as the buffer\nvoid writeBuffer(uns
 igned char b_temp\, int size = b_size)\n{\nfor (int i = (size - 1)\; i >= 
 0\; i--) {\nif ((b_temp >> i) & 0x01) {\ndigitalWrite(b[i]\, HIGH)\;\n}\n}
 \n\n}\n\nvoid setup(){\n//some set up (Default Arduino Function)\npinMode(
 X_button\, INPUT)\;\n\n// LEDs\nfor(int i = 0\; i < b_size\; i++)\n{\npinM
 ode(b[i]\, OUTPUT)\;\n}\nSerial.begin(9600)\;\n}\n// This function takes i
 n the state as an argument & returns the current state\nint SM1_Tick(int s
 tate){\n//Read thing\nswitch(state){ // State transitions\ncase INIT:\n//S
 tate Transition\nstate = S0\;\nbreak\;\ncase S0:\nstate = S1\;\nbreak\;\nc
 ase S1:\nstate = S0\;\n//State Transition\nbreak\;\n}\nswitch(state){ // S
 tate Action\ncase INIT:\n//State Action\nbreak\;\ncase S0:\nresetBuffer()\
 ;\n//State Action\nbreak\;\ncase S1:\n//State Action\nwriteBuffer(0x0F)\;\
 nbreak\;\n}\n\nreturn state\;\n}\n\nvoid loop(){\n///Default arduino funct
 ion\n// We have to cast the return value of the tick function to type Stat
 es\nSM1_state = (States)SM1_Tick(SM1_state)\;\n	delay(500)\;\n}\n\n-------
 -----------------\nRubric - 40 Points Total\n------------------------\n\n*
  Exercise 1 - 10 Points // Double Light Show Revision + Photoresistor Adju
 stment\n\n* Exercise 2 - 15 Points // Timing Game + Photoresistor scaling.
 \n\n* Exercise 3 - 15 Points // NO POINTS\n\nSoftware Requirement\n-------
 -------------\n\n* Synchronous State Machines\n\nNotes:\n\n* You are allow
 ed to create helper functions.\n\n* You are allowed to create variables & 
 data structures.\n\n* Delay() function calls should never be inside a stat
 e machine. This should finally make sense\n\n* If you set a period too sma
 ll\, you may see weird timing behavior\n\n--------------\nParts & Wiring\n
 --------------\n\nWiring Diagram\n--------------\n\n[lab4_s22_w2.png] (htt
 ps://elearn.ucr.edu/courses/48816/files/3104184/preview)\n\nWe are still u
 sing the same wiring setup as previous labs.\n\nParts used\n----------\n\n
 * 4x LEDs\n\n* 4x 220k resistors\n\n* 2x 1k resistor (Photoresistor\, Butt
 on)\n\n* 2x Buttons\n\n* 1x PULLUP Configuration (Y)\n\n* 1x PULLDOWN Conf
 iguration (X)\n\n* 1x Photoresistor\n\n* Wires\n\n---------\nExercises\n--
 -------\n\nThe exercises are as follows\n\nExercise 1 Double Light Show Re
 vision\n-------------------------------------\n\nReimplment Exercise 3 Dou
 ble Light Show into a SynchSM\n\nDescription: Instead of the buttons chang
 ing which pattern is active in the current light show\, the Light Show sho
 uld move through the different patterns every period. The period of the SM
  should be 1 second. The photoresistor should behave as previously impleme
 nted. The photoresistor should not interrupt the cyling of patterns in a l
 ight show\, only switch which light show is active.\n\nExercise 1 Delivera
 bles\n-----------------------\n\n* Reimplmenet as SynchSM - 5 points\n\n* 
 Photoresistor reset does not interrupt cycling - 5 points\n\nExercise 2: S
 ingle Light Show Speedup/Slowdown\n---------------------------------------
 -------\n\nThis exercise is meant to introduce the idea of speeding up or 
 slowing down behavior in a task\, but keeping the task period the same. Ad
 justing the relative ordering of tasks causes significant scheduling heada
 ches in real time systems. Scheduling & Real Time Systems are covered in C
 S251/EE255. We won't go over real-time scheduling in this class\, but that
  is the reason we don't want dynamic task periods.\n\nDescription: Create 
 a single Light Show that is run by a SynchSM. The period of the SynchSM is
  1 second. This light show is relatively simple and simply has the four se
 quences {1000\, 0100\, 0010\, 0001}. The light show changes patterns every
  period. The light show goes foward in the pattern\, resetting at the begi
 nning as needed.\n\nHowever covering the photoresistor should cause the li
 ght show to slow down and only change patterns every 2 periods. The period
  should not change.\n\nHint: Keep track of the number of periods using a v
 ariable.\n\nExercise 2 Deliverables\n-----------------------\n\n* Light sh
 ow Cycles once per period - 5 points\n\n* Photoresistor causes light show 
 to cycle every 2 periods - 5 points\n\n* Period does not change - 5 points
 \n\nExercise 3: The Kevinator\n-------------------------\n\nThis exercise 
 is meant to show why you would want to put something in two state machines
  over 1 state machine. You may use a single SynchSM\, but it may be easier
  to use two. You are allowed to use two (or more). Read Zybooks Chapters 5
  & 7 for more details.\n\nDescription: Create a state machine(s) that has 
 a light show operating on 3 LEDs\, it can be anything you want as long as 
 it is 3 unique patterns. The last LED is controlled by the photoresistor. 
 The ambient light should turn on the LED\, while covering the photoresisto
 r should turn off the lED\n\nExercise 3 Deliverables\n--------------------
 ---\n\n* (at least 1) SynchSM - 5 points\n\n* Light Show on 3 LEDs - 5 poi
 nts\n\n* Photoresistor Adjusts LED - 5 points\n\n***********************\n
 Gradescope Instructions\n***********************\n\nMake three short scree
 n-capture videos demonstrating correct functionality for each of the three
  exercises.\n\nPost your screen-capture videos to the hosting service or C
 loud-based storage solution of your choice. Edit the header file for each 
 laboratory exercise to contain a link to the corresponding video. Create a
  PDF file named [NetID]_lab1.pdf that contains three clickable URL links t
 o the three videos. Rename the three .ino files to have the .cpp file exte
 nsion Upload the following files Gradescope\n\n* [NetID]_lab4.pdf\n\n* [Ne
 tID]_lab4_part1.cpp\n\n* [NetID]_lab4_part2.cpp\n\n* [NetID]_lab4_part3.cp
 p\n\n-------------------------\nLab Submission Guidelines\n---------------
 ----------\n\nPlease follow all requirements in the [Lab submission Guidel
 ines] (https://elearn.ucr.edu/courses/48816/pages/laboratory-submission-gu
 idelines)
SEQUENCE:0
SUMMARY:Laboratory Assignment #4: Synchronous State Machine (SynchSMs) [CS_
 120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315268
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><p>We have invented time! With this newfound techno
 logy we shall combine it with state machines.</p>\n<p>The sample code show
 s an example of a Synch SM. This implementation is somewhat naive compared
  to real-time task scheduling in the real world\, but that is beyond the s
 cope of this class.</p>\n<h2>Pre-lab</h2>\n<ul>\n<li>Assemble your kit usi
 ng the circuit diagram</li>\n<li>Run the sample code</li>\n<li>The sample 
 code should blink all LEDs every other period for a period.</li>\n<li>If t
 he sample code works:\n<ul>\n<li>Create a video of the output and put the 
 link to it in your report</li>\n<li>Submit this report to gradescope as a 
 pdf before Friday 5pm (You don't need to submit the code)</li>\n</ul>\n</l
 i>\n<li>If the sample code doesn't work\n<ul>\n<li>Create a video of the o
 utput.</li>\n<li>Email the Part's Assistants &amp\; link the video immedia
 tely\, and no later than Friday 5pm.</li>\n</ul>\n</li>\n<li>Essentially\,
  you must have proof you got your hardware working before Friday 5pm\, or 
 have contacted the Part's Assistants</li>\n</ul>\n<h2>Sample Code</h2>\n<d
 iv style="background: #ffffff\; overflow: auto\; width: auto\; border: sol
 id gray\; border-width: .1em .1em .1em .8em\; padding: .2em .6em\;">\n<pre
  style="margin: 0\; line-height: 125%\;"><span style="color: #0000aa\;">en
 um</span> States{INIT\, S0\, S1} SM1_state = INIT\;\n<span style="color: #
 00aaaa\;">int</span> X_button = <span style="color: #009999\;">8</span>\;\
 n\n<span style="color: #aaaaaa\; font-style: italic\;">// Array of Output 
 Pin variables\, set to the pins being used</span>\n<span style="color: #00
 00aa\;">const</span> <span style="color: #00aaaa\;">int</span> b_size = <s
 pan style="color: #009999\;">4</span>\;\n<span style="color: #0000aa\;">co
 nst</span> <span style="color: #00aaaa\;">int</span> b[b_size] = {<span st
 yle="color: #009999\;">2</span>\, <span style="color: #009999\;">3</span>\
 , <span style="color: #009999\;">4</span>\, <span style="color: #009999\;"
 >5</span>}\;\n<span style="color: #aaaaaa\; font-style: italic\;">// Outpu
 t Buffer</span>\n<span style="color: #00aaaa\;">int</span> b_buf = <span s
 tyle="color: #009999\;">0x00</span>\;\n<span style="color: #aaaaaa\; font-
 style: italic\;">// Input Variables</span>\n\n<span style="color: #aaaaaa\
 ; font-style: italic\;">// Serial Monitor Buffer</span>\n<span style="colo
 r: #00aaaa\;">int</span> s_buf = <span style="color: #009999\;">0x00</span
 >\; \n\n<span style="color: #aaaaaa\; font-style: italic\;">/* 's' is an a
 rray of integers of size 8. Note that arrays start at 0</span>\n<span styl
 e="color: #aaaaaa\; font-style: italic\;"> We will use this to be able to 
 see the individual bit values of the s_buf</span>\n\n<span style="color: #
 aaaaaa\; font-style: italic\;"> */</span>\n<span style="color: #0000aa\;">
 const</span> <span style="color: #00aaaa\;">int</span> s_size = <span styl
 e="color: #009999\;">8</span>\;\n<span style="color: #00aaaa\;">int</span>
  s[s_size]\;\n\n<span style="color: #aaaaaa\; font-style: italic\;">// We 
 can also define our own helper functions. It is a good idea to use helper 
 functions whenever they make sense.</span>\n<span style="color: #aaaaaa\; 
 font-style: italic\;">// Normally we also define the return type (void for
  none)</span>\n\n<span style="color: #aaaaaa\; font-style: italic\;">// Re
 ad from the serial monitor into s_buf and the s[] array for individual bit
 s</span>\n<span style="color: #00aaaa\;">void</span> <span style="color: #
 00aa00\;">readData</span>()\n{\n    <span style="color: #0000aa\;">if</spa
 n>(Serial.available())\n        s_buf = Serial.parseInt()\;\n\n    <span s
 tyle="color: #0000aa\;">for</span>(<span style="color: #00aaaa\;">int</spa
 n> i = (s_size - <span style="color: #009999\;">1</span>)\; i&gt\;=<span s
 tyle="color: #009999\;">0</span>\; i--)  { \n        s[i] = (s_buf &gt\;&g
 t\; i) &amp\; <span style="color: #009999\;">0x01</span>\; <span style="co
 lor: #aaaaaa\; font-style: italic\;">// What's going on here?</span>\n    
     <span style="color: #aaaaaa\; font-style: italic\;">// "&gt\;&gt\;" bi
 t shifting </span>\n        <span style="color: #aaaaaa\; font-style: ital
 ic\;">// "&amp\;" bit masking</span>\n    }\n\n}\n<span style="color: #aaa
 aaa\; font-style: italic\;">// Reset the Output Buffer. </span>\n<span sty
 le="color: #00aaaa\;">void</span> <span style="color: #00aa00\;">resetBuff
 er</span>() {\n    <span style="color: #0000aa\;">for</span>(<span style="
 color: #00aaaa\;">int</span> i = <span style="color: #009999\;">0</span>\;
  i &lt\; b_size\; i++) {\n        <span style="color: #aaaaaa\; font-style
 : italic\;">// Note this is an arduino function call to the pins</span>\n 
        digitalWrite(b[i]\, LOW)\;\n    }\n}\n<span style="color: #aaaaaa\;
  font-style: italic\;">// Writes to the buffer. Note this function ORs the
  current value with the new value</span>\n<span style="color: #aaaaaa\; fo
 nt-style: italic\;">// Note that size is an optional argument with default
  size the same as the buffer</span>\n<span style="color: #00aaaa\;">void</
 span> <span style="color: #00aa00\;">writeBuffer</span>(<span style="color
 : #00aaaa\;">unsigned</span> <span style="color: #00aaaa\;">char</span> b_
 temp\, <span style="color: #00aaaa\;">int</span> size = b_size)\n{\n    <s
 pan style="color: #0000aa\;">for</span> (<span style="color: #00aaaa\;">in
 t</span> i = (size - <span style="color: #009999\;">1</span>)\; i &gt\;= <
 span style="color: #009999\;">0</span>\; i--) {\n        <span style="colo
 r: #0000aa\;">if</span> ((b_temp &gt\;&gt\; i) &amp\; <span style="color: 
 #009999\;">0x01</span>) {\n        digitalWrite(b[i]\, HIGH)\;\n        }\
 n    }\n    \n\n}\n\n\n<span style="color: #00aaaa\;">void</span> <span st
 yle="color: #00aa00\;">setup</span>(){\n  <span style="color: #aaaaaa\; fo
 nt-style: italic\;">//some set up (Default Arduino Function)</span>\n    p
 inMode(X_button\, INPUT)\;\n\n    <span style="color: #aaaaaa\; font-style
 : italic\;">// LEDs</span>\n    <span style="color: #0000aa\;">for</span>(
 <span style="color: #00aaaa\;">int</span> i = <span style="color: #009999\
 ;">0</span>\; i &lt\; b_size\; i++)\n    {\n        pinMode(b[i]\, OUTPUT)
 \;\n    }\n    Serial.begin(<span style="color: #009999\;">9600</span>)\;\
 n}\n<span style="color: #aaaaaa\; font-style: italic\;">// This function t
 akes in the state as an argument &amp\; returns the current state</span>\n
 <span style="color: #00aaaa\;">int</span> <span style="color: #00aa00\;">S
 M1_Tick</span>(<span style="color: #00aaaa\;">int</span> state){\n    <spa
 n style="color: #aaaaaa\; font-style: italic\;">//Read thing</span>\n    <
 span style="color: #0000aa\;">switch</span>(state){ <span style="color: #a
 aaaaa\; font-style: italic\;">// State transitions</span>\n      <span sty
 le="color: #0000aa\;">case</span> INIT:\n         <span style="color: #aaa
 aaa\; font-style: italic\;">//State Transition</span>\n            state =
  S0\;\n        <span style="color: #0000aa\;">break</span>\;\n      <span 
 style="color: #0000aa\;">case</span> S0:\n            state = S1\;\n      
   <span style="color: #0000aa\;">break</span>\;\n      <span style="color:
  #0000aa\;">case</span> S1:\n            state = S0\;\n         <span styl
 e="color: #aaaaaa\; font-style: italic\;">//State Transition</span>\n     
    <span style="color: #0000aa\;">break</span>\;\n    }\n    <span style="
 color: #0000aa\;">switch</span>(state){ <span style="color: #aaaaaa\; font
 -style: italic\;">// State Action</span>\n      <span style="color: #0000a
 a\;">case</span> INIT:\n         <span style="color: #aaaaaa\; font-style:
  italic\;">//State Action</span>\n        <span style="color: #0000aa\;">b
 reak</span>\;\n      <span style="color: #0000aa\;">case</span> S0:\n     
    resetBuffer()\;\n         <span style="color: #aaaaaa\; font-style: ita
 lic\;">//State Action</span>\n        <span style="color: #0000aa\;">break
 </span>\;\n      <span style="color: #0000aa\;">case</span> S1:\n         
 <span style="color: #aaaaaa\; font-style: italic\;">//State Action</span>\
 n        writeBuffer(<span style="color: #009999\;">0x0F</span>)\;\n      
   <span style="color: #0000aa\;">break</span>\;\n    }\n\n    <span style=
 "color: #0000aa\;">return</span> state\;\n}\n\n<span style="color: #00aaaa
 \;">void</span> <span style="color: #00aa00\;">loop</span>(){ \n    <span 
 style="color: #aaaaaa\; font-style: italic\;">///Default arduino function<
 /span>\n    <span style="color: #aaaaaa\; font-style: italic\;">// We have
  to cast the return value of the tick function to type States</span>\n    
 SM1_state = (States)SM1_Tick(SM1_state)\;\n  	delay(<span style="color: #0
 09999\;">500</span>)\;\n}\n</pre>\n</div>\n<h2>Rubric - 40 Points Total</h
 2>\n<ul>\n<li>Exercise 1 - 10 Points // Double Light Show Revision + Photo
 resistor Adjustment</li>\n<li>Exercise 2 - 15 Points // Timing Game + Phot
 oresistor scaling.</li>\n<li>Exercise 3 - 15 Points // NO POINTS</li>\n</u
 l>\n<h3>Software Requirement</h3>\n<ul>\n<li>Synchronous State Machines</l
 i>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>You are allowed to create helper funct
 ions.</li>\n<li>You are allowed to create variables &amp\; data structures
 .</li>\n<li>Delay() function calls should never be inside a state machine.
  This should finally make sense</li>\n<li>If you set a period too small\, 
 you may see weird timing behavior</li>\n</ul>\n<h2>Parts &amp\; Wiring</h2
 >\n<h3>Wiring Diagram</h3>\n<p><img id="3104184" src="https://elearn.ucr.e
 du/courses/48816/files/3104184/preview" alt="lab4_s22_w2.png" data-api-end
 point="https://elearn.ucr.edu/api/v1/courses/48816/files/3104184" data-api
 -returntype="File"></p>\n<p>We are still using the same wiring setup as pr
 evious labs.</p>\n<h3>Parts used</h3>\n<ul>\n<li>4x LEDs</li>\n<li>4x 220k
  resistors</li>\n<li>2x 1k resistor (Photoresistor\, Button)</li>\n<li>2x 
 Buttons\n<ul>\n<li>1x PULLUP Configuration (Y)</li>\n<li>1x PULLDOWN Confi
 guration (X)</li>\n</ul>\n</li>\n<li>1x Photoresistor</li>\n<li>Wires</li>
 \n</ul>\n<h2>Exercises</h2>\n<p>The exercises are as follows</p>\n<h3>Exer
 cise 1 Double Light Show Revision</h3>\n<p>Reimplment Exercise 3 Double Li
 ght Show into a SynchSM</p>\n<p>Description: Instead of the buttons changi
 ng which pattern is active in the current light show\, the Light Show shou
 ld move through the different patterns every period. The period of the SM 
 should be 1 second. The photoresistor should behave as previously implemen
 ted. The photoresistor should not interrupt the cyling of patterns in a li
 ght show\, only switch which light show is active.</p>\n<h4>Exercise 1 Del
 iverables</h4>\n<ul>\n<li>Reimplmenet as SynchSM - 5 points</li>\n<li>Phot
 oresistor reset does not interrupt cycling - 5 points</li>\n</ul>\n<h3>Exe
 rcise 2: Single Light Show Speedup/Slowdown</h3>\n<p>This exercise is mean
 t to introduce the idea of speeding up or slowing down behavior in a task\
 , but keeping the task period the same. Adjusting the relative ordering of
  tasks causes significant scheduling headaches in real time systems. Sched
 uling &amp\; Real Time Systems are covered in CS251/EE255. We won't go ove
 r real-time scheduling in this class\, but that is the reason we don't wan
 t dynamic task periods.</p>\n<p>Description: Create a single Light Show th
 at is run by a SynchSM. The period of the SynchSM is 1 second. This light 
 show is relatively simple and simply has the four sequences {1000\, 0100\,
  0010\, 0001}. The light show changes patterns every period. The light sho
 w goes foward in the pattern\, resetting at the beginning as needed.</p>\n
 <p>However covering the photoresistor should cause the light show to slow 
 down and only change patterns every 2 periods. The period should not chang
 e.</p>\n<p><em>Hint</em>: Keep track of the number of periods using a vari
 able.</p>\n<h4>Exercise 2 Deliverables</h4>\n<ul>\n<li>Light show Cycles o
 nce per period - 5 points</li>\n<li>Photoresistor causes light show to cyc
 le every 2 periods - 5 points</li>\n<li>Period does not change - 5 points<
 /li>\n</ul>\n<h3>Exercise 3: The Kevinator</h3>\n<p>This exercise is meant
  to show why you would want to put something in two state machines over 1 
 state machine. You may use a single SynchSM\, but it may be easier to use 
 two. You are allowed to use two (or more). Read Zybooks Chapters 5 &amp\; 
 7 for more details.</p>\n<p>Description: Create a state machine(s) that ha
 s a light show operating on 3 LEDs\, it can be anything you want as long a
 s it is 3 unique patterns. The last LED is controlled by the photoresistor
 . The ambient light should turn on the LED\, while covering the photoresis
 tor should turn off the lED</p>\n<h4>Exercise 3 Deliverables</h4>\n<ul>\n<
 li>(at least 1) SynchSM - 5 points</li>\n<li>Light Show on 3 LEDs - 5 poin
 ts</li>\n<li>Photoresistor Adjusts LED - 5 points</li>\n</ul>\n<h1>Gradesc
 ope Instructions</h1>\n<p>Make three short screen-capture videos demonstra
 ting correct functionality for each of the three exercises.</p>\n<p>Post y
 our screen-capture videos to the hosting service or Cloud-based storage so
 lution of your choice. Edit the header file for each laboratory exercise t
 o contain a link to the corresponding video. Create a PDF file named [NetI
 D]_lab1.pdf that contains three clickable URL links to the three videos. R
 ename the three .ino files to have the .cpp file extension Upload the foll
 owing files Gradescope</p>\n<ul>\n<li>[NetID]_lab4.pdf</li>\n<li>[NetID]_l
 ab4_part1.cpp</li>\n<li>[NetID]_lab4_part2.cpp</li>\n<li>[NetID]_lab4_part
 3.cpp</li>\n</ul>\n<h2>Lab Submission Guidelines</h2>\n<p>Please follow al
 l requirements in the <a class="inline_disabled" href="https://elearn.ucr.
 edu/courses/48816/pages/laboratory-submission-guidelines" target="_blank" 
 data-api-endpoint="https://elearn.ucr.edu/api/v1/courses/48816/pages/labor
 atory-submission-guidelines" data-api-returntype="Page">Lab submission Gui
 delines</a></p><script src="https://instructure-uploads.s3.amazonaws.com/a
 ccount_144930000000000001/attachments/178366/canvas_global_app.js"></scrip
 t>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318750
DTSTART;VALUE=DATE:20220422T000000
DTEND;VALUE=DATE:20220422T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Your resume [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=04&
 year=2022#assignment_318750
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001100Z
UID:event-assignment-315272
DTSTART:20220427T000000Z
DTEND:20220427T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:Midterm Exam #1 [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315272
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220328T191600Z
UID:event-assignment-override-14064
DTSTART:20220427T000000Z
DTEND:20220427T000000Z
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Slides turn in (SB 22 Tue Red 6) [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=04&
 year=2022#assignment_318744
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001800Z
UID:event-assignment-315246
DTSTART:20220429T000000Z
DTEND:20220429T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (4/28/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315246
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220329T004500Z
UID:event-assignment-315269
DTSTART:20220430T000000Z
DTEND:20220430T000000Z
CLASS:PUBLIC
DESCRIPTION:************************\nLab 5: Joystick & Buzzer\n***********
 *************\n\nBuzzer\n------\n\nThis lab will go over PWM (Buzzer) and 
 Analog-Digitial-Conversion (Joystick)\n\nPWM or Pulse Width Modulation is 
 a method of reducing the average power by an electric signal. In this lab 
 we can use this to send a signal to a Buzzer that can play this as audible
  sound. You will need a PWM capable pin.\n\nUse the arduino functionss\n\n
 // Set a tone\ntone(PIN_NUMBER\, frequency)\;\n\n// Cancels a tone\nnoTone
 ()\n\nDo not use the optional duration argument that is available\, you wi
 ll use synchronous state machines to handle time.\n\nHere is a handy refer
 ence of notes.\n\nNote\n\nHz\n\nC4\n\n261.63\n\nC#4/Db4\n\n277.18\n\nD4\n\
 n293.66\n\nD#4/Eb4\n\n311.13\n\nE4\n\n329.63\n\nF4\n\n349.23\n\nF#4/Gb4\n\
 n369.99\n\nG4\n\n392.00\n\nG#4/Ab4\n\n415.30\n\nA4\n\n440.00\n\nA#4/Bb4\n\
 n466.16\n\nB4\n\n493.88\n\nJoystick\n--------\n\nThe Joystick is split int
 o 2 axes. The X-axis and Y-axis can each be measured by analog inputs. The
 re is also the joystick click\, which is a button. You can assume the joys
 tick click behaves like the button you have previously seen.\n\nYou can re
 ad the x-Axis for example\, using\n\nanalogRead(A0)\; // Based on the wiri
 ng diagram\, returns a double.\n\nIt would be wise to read this value into
  a variable at every loop before going into the State Machine\, and only u
 sing the value in the variable for the state machine functionality.\n\n---
 ----\nPre-lab\n-------\n\n* Assemble your kit using the circuit diagram\n\
 n* Run the sample code\n\n* One direction on the X-axis should play a clea
 r C4 note & no lights.\n\n* The other direction on the X-axis should play 
 a clear D4 note and 4 lights.\n\n* Your buzzer should not sound like a dyi
 ng toad.\n\n* You may have to adjust the xAxis_median variable.\n\n* If th
 e sample code works:\n\n* Create a video of the output and put the link to
  it in your report\n\n* Submit this report to gradescope as a pdf before f
 riday 5pm (You don't need to submit the code)\n\n* If the sample code does
 n't work\n\n* Create a video of the output.\n\n* Email the Part's Assistan
 ts & link the video immediately\, and no later than friday 5pm.\n\n* Essen
 tially\, you must have proof you got your hardware working before friday 5
 pm\, or have contacted the Part's Assistants\n\n-----------\nSample Code\n
 -----------\n\nenum States{INIT\, S0\, S1} SM1_state\;\nint period = 500\;
 \n\n// Array of Output Pin variables\, set to the pins being used\nconst i
 nt b_size = 4\;\nconst int b[b_size] = {8\, 9\, 10\, 11}\;\nconst int xAxi
 s = A0\; // Recall that A0 is really a number under the hood.\nconst int l
 ight_pattern_size = 2\;\nconst char light_pattern[light_pattern_size] = {0
 x00\, 0x0F}\;\n\nconst char sound_pattern_size = 2\;\nconst double sound_p
 attern[sound_pattern_size] = {261.63\, 293.66}\; // C4\, D4\n\nconst int b
 uzzer = 3\;\n\nconst int xAxis_median = 100\; // Adjust this if needed\n\n
 // Reset the Output Buffer.\nvoid resetBuffer() {\nfor(int i = 0\; i < b_s
 ize\; i++) {\n// Note this is an arduino function call to the pins\ndigita
 lWrite(b[i]\, LOW)\;\n}\n}\n// Writes to the buffer. Note this function OR
 s the current value with the new value\n// Note that size is an optional a
 rgument with default size the same as the buffer\nvoid writeBuffer(unsigne
 d char b_temp\, int size = b_size)\n{\nfor (int i = (size - 1)\; i >= 0\; 
 i--) {\nif ((b_temp >> i) & 0x01) {\ndigitalWrite(b[i]\, HIGH)\;\n}\n}\n\n
 }\n\nint SM1_Tick(int state){\n//Read thing\nswitch(state){ // State trans
 itions\ncase INIT:\n//State Transition\nstate = S0\;\nbreak\;\ncase S0:\ni
 f (analogRead(xAxis) < xAxis_median){\nstate = S1\;\n}\nelse{\nstate = S0\
 ;\n}\n//State Transition\nbreak\;\ncase S1:\nif (analogRead(xAxis) > xAxis
 _median){\nstate = S0\;\n}\nelse{\nstate = S1\;\n}\n//State Transition\nbr
 eak\;\n}\nswitch(state){ // State Action\ncase INIT:\n//State Action\nbrea
 k\;\ncase S0:\n//State Action\nresetBuffer()\;\nwriteBuffer(light_pattern[
 0])\;\ntone(buzzer\, sound_pattern[0])\;\n\n//State Action\nbreak\;\ncase 
 S1:\n//State Action\nresetBuffer()\;\nwriteBuffer(light_pattern[1])\;\nton
 e(buzzer\, sound_pattern[1])\;\n//State Action\nbreak\;\n}\n\nreturn state
 \;\n}\n\nvoid setup() {\n// OUTPUT is a defined macro in Arduino!\n\n// We
  will also read from the serial monitor\nSerial.begin(9600)\;\n}\n\nvoid l
 oop() {\n\nSM1_state = (States)SM1_Tick(SM1_state)\;\ndelay(period)\;\n\n}
 \n\n------------------------\nRubric - 50 Points Total\n------------------
 ------\n\n* Exercise 1 - 20 Points Music Player\n\n* Exercise 2 - 10 Point
 s Joystick LED\n\n* Exercise 3 - 20 Points Konami Code + Music\n\nSoftware
  Requirement\n--------------------\n\n* Synchronous State Machines\n\nNote
 s:\n\n* You are allowed to create helper functions.\n\n* Delay() function 
 calls should never be inside a state machine.\n\n* If you set a period too
  small\, you may see weird timing behavior\n\n--------------\nParts & Wiri
 ng\n--------------\n\nWiring Diagram\n--------------\n\n[lab5_s22_w1.png] 
 (https://elearn.ucr.edu/courses/48816/files/3104135/preview)\n\nHere we in
 troduce 2 new components. The first one is the joystick. The joystick has 
 3 pins. 2 pins are Analog. Vx and Vy\, to represent the X and Y Axis of th
 e joystick. The 3rd pin is the select -> the joystick can click like a but
 ton.\n\nThe second component is the speaker/buzzer. The real one is much s
 maller than the image and you can identiy which pin is POSTIIVE by looking
  at the top of it.\n\nParts used\n----------\n\n*\n\n4x LEDs\n\n*\n\n4x 22
 0k resistors\n\n*\n\n1x 1k resistor (Buzzer)\n\n*\n\nJoystick (GND\, 5v\, 
 VRx\, VRy\, SW)\n\n*\n\nBuzzer (A0\, GND)\n\n* Wires\n\n---------\nExercis
 es\n---------\n\nThe exercises are as follows\n\nExercise 1 Buzzer Player\
 n------------------------\n\nHere you will create a looping music player t
 hat can be paused.\n\nDescription: Create a SynchSM with a 500ms period th
 at is a music player.\n\n* The music player plays a song with at least 5 n
 otes.\n\n* There must be at least 3 unique notes.\n\n* Use the Joystick Cl
 ick functionality to pause & play the song.\n\n* The song should loop endl
 essly.\n\n* For full credit\, use the 4 LEDs to indicate how far through t
 he song you are. The LEDs should light up left to right at 25(1 LED)\, 50 
 (2 LEDs)\, 75(3 LEDs)\, and 95%(4 LEDs) progress. The LEDs should reset wh
 en the song resets.\n\nHint use the arduino map() function again.\n\nExerc
 ise 1 Deliverables\n-----------------------\n\n* Music Player SynchSM - 10
  points\n\n* Progress Lights - 10 points\n\nExercise 2 LED Joystick\n-----
 ------------------\n\nThis exercise will utilize all aspects of the joysti
 ck.\n\nDescription: Create a LED Joystick SynchSM with a 100ms period.\n\n
 * Left on the joystick will light up the leftmost(first) LED and it will s
 tay on. \n\n* Right will light up the second LED and it will stay on.\n\n
 * Up will light up the third LED and it will stay on.\n\n* Down will light
  up the fourth LED and it will stay on.\n\n*  Activating the Joystick cli
 ck button will turn off all lights.\n\nExercise 2 Deliverables\n----------
 -------------\n\n* LED Joystick SynchSM - 10 points\n\nExercise 3 Musical 
 Konami Code\n------------------------------\n\nHere you will implement a m
 usical konami code using the joystick & buzzer.\n\nCreate a SynchSM with a
  500ms period that plays a modified konami code.\n\n* The code is {UP\, UP
 \, DOWN\, DOWN\, LEFT\, LEFT\, RIGHT\, RIGHT\, CLICK\, CLICK}.\n\n* Assign
  a unique musical note to each joystick action: {UP\, DOWN\, LEFT\, RIGHT\
 , CLICK}\n\n* so 5 unique notes.\n\n* Play the corresponding note whenever
  the user does a joystick action.\n\n* Use the concept of a ButtonPress/Bu
 ttonHold/ButtonRelease & assume the user lets go of the joystick before th
 e next command.\n\n* Keep playing the note until the joystick is at defaul
 t position.\n\n* For example\, if you went LEFT on the joystick\, it shoul
 d play the LEFT note. until the user lets go of the joystick. Do not worry
  about diagonal positions on the joystick\, your code can assume the user 
 is only making 1 action at a time.\n\nIf the user correctly enters the cod
 e\, the equivalent musical sequence to the code will play in order until t
 he clicks the joystick again\, at which point the system is reset.\n\nHint
  This exercise is meant to be easier with a Concurrent SynchSM/Task Schedu
 ler\, as it appears there are really multiple tasks. Read Zybooks chapter 
 5 & 7.\n\nExercise 3 Deliverables\n-----------------------\n\n* Joystick &
  Speaker Map Actions to Sounds - 10 points\n\n* (Optional: Concurrent) Syn
 chSM Konami Code & Reset Functionality - 10 points\n\n********************
 ***\nGradescope Instructions\n***********************\n\nMake three short 
 screen-capture videos demonstrating correct functionality for each of the 
 three exercises.\n\nPost your screen-capture videos to the hosting service
  or Cloud-based storage solution of your choice. Edit the header file for 
 each laboratory exercise to contain a link to the corresponding video. Cre
 ate a PDF file named [NetID]_lab1.pdf that contains three clickable URL li
 nks to the three videos. Rename the three .ino files to have the .cpp file
  extension Upload the following files Gradescope\n\n* [NetID]_lab5.pdf\n\n
 * [NetID]_lab5_part1.cpp\n\n* [NetID]_lab5_part2.cpp\n\n* [NetID]_lab5_par
 t3.cpp\n\n-------------------------\nLab Submission Guidelines\n----------
 ---------------\n\nPlease follow all requirements in the [Lab submission G
 uidelines] (https://elearn.ucr.edu/courses/48816/pages/laboratory-submissi
 on-guidelines)
SEQUENCE:0
SUMMARY:Laboratory Assignment #5: Joystick & Buzzer [CS_120B_001\, EE_120B_
 001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=04&
 year=2022#assignment_315269
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><h1>Lab 5: Joystick &amp\; Buzzer</h1>\n<h4>Buzzer<
 /h4>\n<p>This lab will go over PWM (Buzzer) and Analog-Digitial-Conversion
  (Joystick)</p>\n<p>PWM or Pulse Width Modulation is a method of reducing 
 the average power by an electric signal. In this lab we can use this to se
 nd a signal to a Buzzer that can play this as audible sound. You will need
  a PWM capable pin.</p>\n<p>Use the arduino functionss</p>\n<pre><code cla
 ss="language-c++">// Set a tone\ntone(PIN_NUMBER\, frequency)\; \n\n\n// C
 ancels a tone\nnoTone()\n</code></pre>\n<p>Do not use the optional duratio
 n argument that is available\, you will use synchronous state machines to 
 handle time.</p>\n<p>Here is a handy reference of notes.</p>\n<table>\n<th
 ead>\n<tr>\n<th>Note</th>\n<th>Hz</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<t
 d>C4</td>\n<td>261.63</td>\n</tr>\n<tr>\n<td>C#4/Db4</td>\n<td>277.18</td>
 \n</tr>\n<tr>\n<td>D4</td>\n<td>293.66</td>\n</tr>\n<tr>\n<td>D#4/Eb4</td>
 \n<td>311.13</td>\n</tr>\n<tr>\n<td>E4</td>\n<td>329.63</td>\n</tr>\n<tr>\
 n<td>F4</td>\n<td>349.23</td>\n</tr>\n<tr>\n<td>F#4/Gb4</td>\n<td>369.99</
 td>\n</tr>\n<tr>\n<td>G4</td>\n<td>392.00</td>\n</tr>\n<tr>\n<td>G#4/Ab4</
 td>\n<td>415.30</td>\n</tr>\n<tr>\n<td>A4</td>\n<td>440.00</td>\n</tr>\n<t
 r>\n<td>A#4/Bb4</td>\n<td>466.16</td>\n</tr>\n<tr>\n<td>B4</td>\n<td>493.8
 8</td>\n</tr>\n</tbody>\n</table>\n<h4>Joystick</h4>\n<p>The Joystick is s
 plit into 2 axes. The X-axis and Y-axis can each be measured by analog inp
 uts. There is also the joystick click\, which is a button. You can assume 
 the joystick click behaves like the button you have previously seen.</p>\n
 <p>You can read the x-Axis for example\, using</p>\n<pre><code class="lang
 uage-c++">analogRead(A0)\; // Based on the wiring diagram\, returns a doub
 le. \n</code></pre>\n<p>It would be wise to read this value into a variabl
 e at every loop before going into the State Machine\, and only using the v
 alue in the variable for the state machine functionality.</p>\n<h2>Pre-lab
 </h2>\n<ul>\n<li>Assemble your kit using the circuit diagram</li>\n<li>Run
  the sample code\n<ul>\n<li>One direction on the X-axis should play a clea
 r C4 note &amp\; no lights.</li>\n<li>The other direction on the X-axis sh
 ould play a clear D4 note and 4 lights.</li>\n<li>Your buzzer should not s
 ound like a dying toad.</li>\n<li>You may have to adjust the xAxis_median 
 variable.</li>\n</ul>\n</li>\n<li>If the sample code works:\n<ul>\n<li>Cre
 ate a video of the output and put the link to it in your report</li>\n<li>
 Submit this report to gradescope as a pdf before friday 5pm (You don't nee
 d to submit the code)</li>\n</ul>\n</li>\n<li>If the sample code doesn't w
 ork\n<ul>\n<li>Create a video of the output.</li>\n<li>Email the Part's As
 sistants &amp\; link the video immediately\, and no later than friday 5pm.
 </li>\n</ul>\n</li>\n<li>Essentially\, you must have proof you got your ha
 rdware working before friday 5pm\, or have contacted the Part's Assistants
 </li>\n</ul>\n<h2>Sample Code</h2>\n<div style="background: #ffffff\; over
 flow: auto\; width: auto\; border: solid gray\; border-width: .1em .1em .1
 em .8em\; padding: .2em .6em\;">\n<pre style="margin: 0\; line-height: 125
 %\;"><span style="color: #0000aa\;">enum</span> States{INIT\, S0\, S1} SM1
 _state\;\n<span style="color: #00aaaa\;">int</span> period = <span style="
 color: #009999\;">500</span>\;\n\n\n<span style="color: #aaaaaa\; font-sty
 le: italic\;">// Array of Output Pin variables\, set to the pins being use
 d</span>\n<span style="color: #0000aa\;">const</span> <span style="color: 
 #00aaaa\;">int</span> b_size = <span style="color: #009999\;">4</span>\;\n
 <span style="color: #0000aa\;">const</span> <span style="color: #00aaaa\;"
 >int</span> b[b_size] = {<span style="color: #009999\;">8</span>\, <span s
 tyle="color: #009999\;">9</span>\, <span style="color: #009999\;">10</span
 >\, <span style="color: #009999\;">11</span>}\;\n<span style="color: #0000
 aa\;">const</span> <span style="color: #00aaaa\;">int</span> xAxis = A0\; 
 <span style="color: #aaaaaa\; font-style: italic\;">// Recall that A0 is r
 eally a number under the hood.</span>\n<span style="color: #0000aa\;">cons
 t</span> <span style="color: #00aaaa\;">int</span> light_pattern_size = <s
 pan style="color: #009999\;">2</span>\;\n<span style="color: #0000aa\;">co
 nst</span> <span style="color: #00aaaa\;">char</span> light_pattern[light_
 pattern_size] = {<span style="color: #009999\;">0x00</span>\, <span style=
 "color: #009999\;">0x0F</span>}\;\n\n<span style="color: #0000aa\;">const<
 /span> <span style="color: #00aaaa\;">char</span> sound_pattern_size = <sp
 an style="color: #009999\;">2</span>\;\n<span style="color: #0000aa\;">con
 st</span> <span style="color: #00aaaa\;">double</span> sound_pattern[sound
 _pattern_size] = {<span style="color: #009999\;">261.63</span>\, <span sty
 le="color: #009999\;">293.66</span>}\; <span style="color: #aaaaaa\; font-
 style: italic\;">// C4\, D4</span>\n\n<span style="color: #0000aa\;">const
 </span> <span style="color: #00aaaa\;">int</span> buzzer = <span style="co
 lor: #009999\;">3</span>\;\n\n<span style="color: #0000aa\;">const</span> 
 <span style="color: #00aaaa\;">int</span> xAxis_median = <span style="colo
 r: #009999\;">100</span>\; <span style="color: #aaaaaa\; font-style: itali
 c\;">// Adjust this if needed</span>\n\n<span style="color: #aaaaaa\; font
 -style: italic\;">// Reset the Output Buffer. </span>\n<span style="color:
  #00aaaa\;">void</span> <span style="color: #00aa00\;">resetBuffer</span>(
 ) {\n    <span style="color: #0000aa\;">for</span>(<span style="color: #00
 aaaa\;">int</span> i = <span style="color: #009999\;">0</span>\; i &lt\; b
 _size\; i++) {\n        <span style="color: #aaaaaa\; font-style: italic\;
 ">// Note this is an arduino function call to the pins</span>\n        dig
 italWrite(b[i]\, LOW)\;\n    }\n}\n<span style="color: #aaaaaa\; font-styl
 e: italic\;">// Writes to the buffer. Note this function ORs the current v
 alue with the new value</span>\n<span style="color: #aaaaaa\; font-style: 
 italic\;">// Note that size is an optional argument with default size the 
 same as the buffer</span>\n<span style="color: #00aaaa\;">void</span> <spa
 n style="color: #00aa00\;">writeBuffer</span>(<span style="color: #00aaaa\
 ;">unsigned</span> <span style="color: #00aaaa\;">char</span> b_temp\, <sp
 an style="color: #00aaaa\;">int</span> size = b_size)\n{\n    <span style=
 "color: #0000aa\;">for</span> (<span style="color: #00aaaa\;">int</span> i
  = (size - <span style="color: #009999\;">1</span>)\; i &gt\;= <span style
 ="color: #009999\;">0</span>\; i--) {\n        <span style="color: #0000aa
 \;">if</span> ((b_temp &gt\;&gt\; i) &amp\; <span style="color: #009999\;"
 >0x01</span>) {\n        digitalWrite(b[i]\, HIGH)\;\n        }\n    }\n\n
 }\n\n<span style="color: #00aaaa\;">int</span> <span style="color: #00aa00
 \;">SM1_Tick</span>(<span style="color: #00aaaa\;">int</span> state){\n   
  <span style="color: #aaaaaa\; font-style: italic\;">//Read thing</span>\n
     <span style="color: #0000aa\;">switch</span>(state){ <span style="colo
 r: #aaaaaa\; font-style: italic\;">// State transitions</span>\n      <spa
 n style="color: #0000aa\;">case</span> INIT:\n         <span style="color:
  #aaaaaa\; font-style: italic\;">//State Transition</span>\n            st
 ate = S0\;\n        <span style="color: #0000aa\;">break</span>\;\n      <
 span style="color: #0000aa\;">case</span> S0:\n          <span style="colo
 r: #0000aa\;">if</span> (analogRead(xAxis) &lt\; xAxis_median){\n         
    state = S1\;\n          }\n          <span style="color: #0000aa\;">els
 e</span>{\n            state = S0\;\n          }\n         <span style="co
 lor: #aaaaaa\; font-style: italic\;">//State Transition</span>\n        <s
 pan style="color: #0000aa\;">break</span>\;\n      <span style="color: #00
 00aa\;">case</span> S1:\n            <span style="color: #0000aa\;">if</sp
 an> (analogRead(xAxis) &gt\; xAxis_median){\n                state = S0\;\
 n            }\n            <span style="color: #0000aa\;">else</span>{\n 
                state = S1\;\n            }\n             <span style="colo
 r: #aaaaaa\; font-style: italic\;">//State Transition</span>\n        <spa
 n style="color: #0000aa\;">break</span>\;\n    }\n    <span style="color: 
 #0000aa\;">switch</span>(state){ <span style="color: #aaaaaa\; font-style:
  italic\;">// State Action</span>\n      <span style="color: #0000aa\;">ca
 se</span> INIT:\n         <span style="color: #aaaaaa\; font-style: italic
 \;">//State Action</span>\n        <span style="color: #0000aa\;">break</s
 pan>\;\n      <span style="color: #0000aa\;">case</span> S0:\n            
 <span style="color: #aaaaaa\; font-style: italic\;">//State Action</span>\
 n            resetBuffer()\;\n            writeBuffer(light_pattern[<span 
 style="color: #009999\;">0</span>])\;\n            tone(buzzer\, sound_pat
 tern[<span style="color: #009999\;">0</span>])\;\n          \n         <sp
 an style="color: #aaaaaa\; font-style: italic\;">//State Action</span>\n  
       <span style="color: #0000aa\;">break</span>\;\n      <span style="co
 lor: #0000aa\;">case</span> S1:\n            <span style="color: #aaaaaa\;
  font-style: italic\;">//State Action</span>\n            resetBuffer()\;\
 n            writeBuffer(light_pattern[<span style="color: #009999\;">1</s
 pan>])\;\n            tone(buzzer\, sound_pattern[<span style="color: #009
 999\;">1</span>])\;\n         <span style="color: #aaaaaa\; font-style: it
 alic\;">//State Action</span>\n        <span style="color: #0000aa\;">brea
 k</span>\;\n    }\n\n    <span style="color: #0000aa\;">return</span> stat
 e\;\n}\n\n\n<span style="color: #00aaaa\;">void</span> <span style="color:
  #00aa00\;">setup</span>() {\n    <span style="color: #aaaaaa\; font-style
 : italic\;">// OUTPUT is a defined macro in Arduino!</span>\n  \n    <span
  style="color: #aaaaaa\; font-style: italic\;">// We will also read from t
 he serial monitor</span>\n    Serial.begin(<span style="color: #009999\;">
 9600</span>)\;\n}\n\n<span style="color: #00aaaa\;">void</span> <span styl
 e="color: #00aa00\;">loop</span>() {\n    \n    SM1_state = (States)SM1_Ti
 ck(SM1_state)\;\n    delay(period)\;\n    \n}\n</pre>\n</div>\n<h2>Rubric 
 - 50 Points Total</h2>\n<ul>\n<li>Exercise 1 - 20 Points Music Player</li>
 \n<li>Exercise 2 - 10 Points Joystick LED</li>\n<li>Exercise 3 - 20 Points
  Konami Code + Music</li>\n</ul>\n<h3>Software Requirement</h3>\n<ul>\n<li
 >Synchronous State Machines</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>You are 
 allowed to create helper functions.</li>\n<li>Delay() function calls shoul
 d never be inside a state machine.</li>\n<li>If you set a period too small
 \, you may see weird timing behavior</li>\n</ul>\n<h2>Parts &amp\; Wiring<
 /h2>\n<h3>Wiring Diagram</h3>\n<p><img id="3104135" src="https://elearn.uc
 r.edu/courses/48816/files/3104135/preview" alt="lab5_s22_w1.png" data-api-
 endpoint="https://elearn.ucr.edu/api/v1/courses/48816/files/3104135" data-
 api-returntype="File"></p>\n<p>Here we introduce 2 new components. The fir
 st one is the joystick. The joystick has 3 pins. 2 pins are Analog. Vx and
  Vy\, to represent the X and Y Axis of the joystick. The 3rd pin is the se
 lect -&gt\; the joystick can click like a button.</p>\n<p>The second compo
 nent is the speaker/buzzer. The real one is much smaller than the image an
 d you can identiy which pin is POSTIIVE by looking at the top of it.</p>\n
 <h3>Parts used</h3>\n<ul>\n<li>\n<div>\n<div><span>4x LEDs</span></div>\n<
 /div>\n</li>\n<li>\n<div>\n<div><span>4x 220k resistors</span></div>\n</di
 v>\n</li>\n<li>\n<div>\n<div><span>1x 1k resistor (Buzzer)</span></div>\n<
 /div>\n</li>\n<li>\n<div><span>Joystick (GND\, 5v\, VRx\, VRy\, SW)</span>
 </div>\n</li>\n<li>\n<div>Buzzer (A0\, GND)</div>\n</li>\n<li>Wires</li>\n
 </ul>\n<h2>Exercises</h2>\n<p>The exercises are as follows</p>\n<h3>Exerci
 se 1 Buzzer Player</h3>\n<p>Here you will create a looping music player th
 at can be paused.</p>\n<p>Description: Create a SynchSM with a 500ms perio
 d that is a music player.</p>\n<ul>\n<li>The music player plays a song wit
 h at least 5 notes.</li>\n<li>There must be at least 3 unique notes.</li>\
 n<li>Use the Joystick Click functionality to pause &amp\; play the song.</
 li>\n<li>The song should loop endlessly.</li>\n<li><strong>For full credit
 </strong>\, use the 4 LEDs to indicate how far through the song you are. T
 he LEDs should light up left to right at 25(1 LED)\, 50 (2 LEDs)\, 75(3 LE
 Ds)\, and 95%(4 LEDs) progress. The LEDs should reset when the song resets
 .</li>\n</ul>\n<p><em>Hint</em> use the arduino map() function again.</p>\
 n<h4>Exercise 1 Deliverables</h4>\n<ul>\n<li>Music Player SynchSM - 10 poi
 nts</li>\n<li>Progress Lights - 10 points</li>\n</ul>\n<h3>Exercise 2 LED 
 Joystick</h3>\n<p>This exercise will utilize all aspects of the joystick.<
 /p>\n<p>Description: Create a LED Joystick SynchSM with a 100ms period.</p
 >\n<ul>\n<li>Left on the joystick will light up the leftmost(first) LED an
 d it will stay on.&nbsp\;</li>\n<li>Right will light up the second LED and
  it will stay on.</li>\n<li>Up will light up the third LED and it will sta
 y on.</li>\n<li>Down will light up the fourth LED and it will stay on.</li
 >\n<li>&nbsp\;Activating the Joystick click button will turn off all light
 s.</li>\n</ul>\n<h4>Exercise 2 Deliverables</h4>\n<ul>\n<li>LED Joystick S
 ynchSM - 10 points</li>\n</ul>\n<h3>Exercise 3 Musical Konami Code</h3>\n<
 p>Here you will implement a musical konami code using the joystick &amp\; 
 buzzer.</p>\n<p>Create a SynchSM with a 500ms period that plays a modified
  konami code.</p>\n<ul>\n<li>The code is {UP\, UP\, DOWN\, DOWN\, LEFT\, L
 EFT\, RIGHT\, RIGHT\, CLICK\, CLICK}.</li>\n<li>Assign a unique musical no
 te to each joystick action: {UP\, DOWN\, LEFT\, RIGHT\, CLICK}\n<ul>\n<li>
 so 5 unique notes.</li>\n</ul>\n</li>\n<li>Play the corresponding note whe
 never the user does a joystick action.</li>\n<li>Use the concept of a Butt
 onPress/ButtonHold/ButtonRelease &amp\; assume the user lets go of the joy
 stick before the next command.</li>\n<li>Keep playing the note until the j
 oystick is at default position.\n<ul>\n<li>For example\, if you went LEFT 
 on the joystick\, it should play the LEFT note. until the user lets go of 
 the joystick. Do not worry about diagonal positions on the joystick\, your
  code can assume the user is only making 1 action at a time.</li>\n</ul>\n
 </li>\n</ul>\n<p>If the user correctly enters the code\, the equivalent mu
 sical sequence to the code will play in order until the clicks the joystic
 k again\, at which point the system is reset.</p>\n<p><em>Hint</em> This e
 xercise is meant to be easier with a Concurrent SynchSM/Task Scheduler\, a
 s it appears there are really multiple tasks. Read Zybooks chapter 5 &amp\
 ; 7.</p>\n<h4>Exercise 3 Deliverables</h4>\n<ul>\n<li>Joystick &amp\; Spea
 ker Map Actions to Sounds - 10 points</li>\n<li>(Optional: Concurrent) Syn
 chSM Konami Code &amp\; Reset Functionality - 10 points</li>\n</ul>\n<h1>G
 radescope Instructions</h1>\n<p>Make three short screen-capture videos dem
 onstrating correct functionality for each of the three exercises.</p>\n<p>
 Post your screen-capture videos to the hosting service or Cloud-based stor
 age solution of your choice. Edit the header file for each laboratory exer
 cise to contain a link to the corresponding video. Create a PDF file named
  [NetID]_lab1.pdf that contains three clickable URL links to the three vid
 eos. Rename the three .ino files to have the .cpp file extension Upload th
 e following files Gradescope</p>\n<ul>\n<li>[NetID]_lab5.pdf</li>\n<li>[Ne
 tID]_lab5_part1.cpp</li>\n<li>[NetID]_lab5_part2.cpp</li>\n<li>[NetID]_lab
 5_part3.cpp</li>\n</ul>\n<h2>Lab Submission Guidelines</h2>\n<p>Please fol
 low all requirements in the <a class="inline_disabled" href="https://elear
 n.ucr.edu/courses/48816/pages/laboratory-submission-guidelines" target="_b
 lank" data-api-endpoint="https://elearn.ucr.edu/api/v1/courses/48816/pages
 /laboratory-submission-guidelines" data-api-returntype="Page">Lab submissi
 on Guidelines</a></p><script src="https://instructure-uploads.s3.amazonaws
 .com/account_144930000000000001/attachments/178366/canvas_global_app.js"><
 /script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318727
DTSTART;VALUE=DATE:20220429T000000
DTEND;VALUE=DATE:20220429T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Functional Specifications: Intro [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=04&
 year=2022#assignment_318727
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T234100Z
UID:event-assignment-315233
DTSTART;VALUE=DATE:20220501T000000
DTEND;VALUE=DATE:20220501T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Custom Laboratory Project Proposal [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315233
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001900Z
UID:event-assignment-315247
DTSTART:20220504T000000Z
DTEND:20220504T000000Z
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:In-Class Exercises (5/3/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315247
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T002000Z
UID:event-assignment-315254
DTSTART:20220506T000000Z
DTEND:20220506T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (5/5/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315254
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220329T004500Z
UID:event-assignment-315270
DTSTART:20220507T000000Z
DTEND:20220507T000000Z
CLASS:PUBLIC
DESCRIPTION:This lab introduces you to the Task Scheduler. Review the sampl
 e code & the relevant lecture materialto understand. it The key idea here 
 is the use of the task struct to abstract the idea of multiple tasks (Conc
 urrent SynchSMs).\n\n-------\nPre-lab\n-------\n\n* Assemble your kit usin
 g the circuit diagram\n\n* Run the sample code\n\n* One direction on the X
 -axis have no lights. (half second response time)\n\n* The other direction
  on the X-axis should have 4 lights. (half second response time)\n\n* The 
 buzzer should switch notes every second\n\n* Your buzzer should not sound 
 like a dying toad.\n\n* You may have to adjust the xAxis_median variable.\
 n\n* If the sample code works:\n\n* Create a video of the output and put t
 he link to it in your report\n\n* Submit this report to gradescope as a pd
 f before friday 5pm (You don't need to submit the code)\n\n* If the sample
  code doesn't work\n\n* Create a video of the output.\n\n* Email the Part'
 s Assistants & link the video immediately\, and no later than friday 5pm.\
 n\n* Essentially\, you must have proof you got your hardware working befor
 e friday 5pm\, or have contacted the Part's Assistants\n\n-----------\nSam
 ple Code\n-----------\n\n// Array of Output Pin variables\, set to the pin
 s being used\nconst int b_size = 4\;\nconst int b[b_size] = {8\, 9\, 10\, 
 11}\;\nconst int xAxis = A0\; // Recall that A0 is really a number under t
 he hood.\nconst int light_pattern_size = 2\;\nconst char light_pattern[lig
 ht_pattern_size] = {0x00\, 0x0F}\;\n\nconst char sound_pattern_size = 2\;\
 nconst double sound_pattern[sound_pattern_size] = {261.63\, 293.66}\; // C
 4\, D4\n\nconst int buzzer = 3\;\n\nconst int xAxis_median = 100\; // Adju
 st this if needed\n\n// Reset the Output Buffer.\nvoid resetBuffer() {\nfo
 r(int i = 0\; i < b_size\; i++) {\n// Note this is an arduino function cal
 l to the pins\ndigitalWrite(b[i]\, LOW)\;\n}\n}\n// Writes to the buffer. 
 Note this function ORs the current value with the new value\n// Note that 
 size is an optional argument with default size the same as the buffer\nvoi
 d writeBuffer(unsigned char b_temp\, int size = b_size)\n{\nfor (int i = (
 size - 1)\; i >= 0\; i--) {\nif ((b_temp >> i) & 0x01) {\ndigitalWrite(b[i
 ]\, HIGH)\;\n}\n}\n\n}\n\ntypedef struct task {\nint state\;\nunsigned lon
 g period\;\nunsigned long elapsedTime\;\nint (*TickFct)(int)\;\n\n} task\;
 \n\nint delay_gcd\;\nconst unsigned short tasksNum = 2\;\ntask tasks[tasks
 Num]\;\n\nenum SM1_States { SM1_INIT\, SM1_S0\, SM1_S1}\;\nint SM1_Tick(in
 t state){\n//Read thing\nswitch(state){ // State transitions\ncase SM1_INI
 T:\n//State Transition\nstate = SM1_S0\;\nbreak\;\ncase SM1_S0:\nif (analo
 gRead(xAxis) < xAxis_median){\nstate = SM1_S1\;\n}\nelse{\nstate = SM1_S0\
 ;\n}\n//State Transition\nbreak\;\ncase SM1_S1:\nif (analogRead(xAxis) > x
 Axis_median){\nstate = SM1_S0\;\n}\nelse{\nstate = SM1_S1\;\n}\n//State Tr
 ansition\nbreak\;\n}\nswitch(state){ // State Action\ncase SM1_INIT:\n//St
 ate Action\nbreak\;\ncase SM1_S0:\n//State Action\nresetBuffer()\;\nwriteB
 uffer(light_pattern[0])\;\n\n//State Action\nbreak\;\ncase SM1_S1:\n//Stat
 e Action\nresetBuffer()\;\nwriteBuffer(light_pattern[1])\;\n//State Action
 \nbreak\;\n}\n\nreturn state\;\n}\n\nenum SM2_States { SM2_INIT\, SM2_S0\,
  SM2_S1}\;\nint SM2_Tick(int state){\n//Read thing\nswitch(state){ // Stat
 e transitions\ncase SM1_INIT:\n//State Transition\nstate = SM1_S0\;\nbreak
 \;\ncase SM1_S0:\nstate = SM1_S1\;\n//State Transition\nbreak\;\ncase SM1_
 S1:\nstate = SM1_S0\;\n//State Transition\nbreak\;\n}\nswitch(state){ // S
 tate Action\ncase SM2_INIT:\n//State Action\nbreak\;\ncase SM1_S0:\n//Stat
 e Action\ntone(buzzer\, sound_pattern[0])\;\n\n//State Action\nbreak\;\nca
 se SM1_S1:\n//State Action\n\ntone(buzzer\, sound_pattern[1])\;\n//State A
 ction\nbreak\;\n}\n\nreturn state\;\n}\n\nvoid setup() {\n//some set up (D
 efault Arduino Function)\n\n// LEDs\nfor(int i = 0\; i < b_size\; i++)\n{\
 npinMode(b[i]\, OUTPUT)\;\n}\nSerial.begin(9600)\;\n\nunsigned char i = 0\
 ;\ntasks[i].state = SM1_INIT\;\ntasks[i].period = 500\;\ntasks[i].elapsedT
 ime = 0\;\ntasks[i].TickFct = &SM1_Tick\;\ni++\;\ntasks[i].state = SM2_INI
 T\;\ntasks[i].period = 1000\;\ntasks[i].elapsedTime = 0\;\ntasks[i].TickFc
 t = &SM2_Tick\;\n\ndelay_gcd = 500\; // GCD\n\n}\n\nvoid loop() {\n// put 
 your main code here\, to run repeatedly:\nunsigned char i\;\nfor (i = 0\; 
 i < tasksNum\; ++i) {\nif ( (millis() - tasks[i].elapsedTime) >= tasks[i].
 period) {\ntasks[i].state = tasks[i].TickFct(tasks[i].state)\;\ntasks[i].e
 lapsedTime = millis()\; // Last time this task was ran\n\n}\n}\ndelay(dela
 y_gcd)\; // GCD.\n}\n\n------------------------\nRubric - 50 Points Total\
 n------------------------\n\n* Exercise 1 - 15 Points Musical Konami Code:
  Task Scheduler\n\n* Exercise 2 - 15 Points Kevinator Reloaded\n\n* Exerci
 se 3 - 20 Points Memorization Game\n\nSoftware Requirement\n--------------
 ------\n\n* Task Scheduler\n\nNotes:\n\n* You are allowed to create helper
  functions.\n\n* Delay() function calls should never be inside a state mac
 hine.\n\n* If you set a period too small\, you may see weird timing behavi
 or\n\n--------------\nParts & Wiring\n--------------\n\nWiring Diagram\n--
 ------------\n\n[lab6_s22_w1.png] (https://elearn.ucr.edu/courses/48816/fi
 les/3104139/preview)\n\nParts used\n----------\n\n* 4x LEDs\n\n* 4x 220k r
 esistors\n\n* 1x 1k resistor (Buzzer)\n\n* Joystick (GND\, 5v\, VRx\, VRy\
 , SW)\n\n* Buzzer (A0\, GND)\n\n---------\nExercises\n---------\n\nThe exe
 rcises are as follows\n\nExercise 1 : Musical Konami Code\n---------------
 -----------------\n\nDescription: Recreate the Konami Music Player inside 
 the Task Scheduler. You must use at least 2 SynchSMs. The state machines m
 ay handle the tasks in any manner you see fit.\n\nHint using shared variab
 les may be a good idea here.\n\nExercise 1 Deliverables\n-----------------
 ------\n\n* Musical Konami Code & Task Scheduler - 10 points\n\n* At least
  2 SynchSMs - 5 points\n\nExercise 2: The Kevinator: Reloaded\n-----------
 ------------------------\n\nRecreate the Kevinator from Lab 4 exercise 3 i
 n the Task Scheduler.\n\nDescription: Create a state machine(s) that has a
  light show operating on 3 LEDs\, it can be anything you want as long as i
 t is 3 unique patterns. The last LED is controlled by the photoresistor. T
 he ambient light should turn on the LED\, while covering the photoresistor
  should turn off the LED. Use 2 SynchSMs. One for the light pattern\, one 
 for the ambient light.\n\nUse a 500ms period for the Light show\, and a 10
 0ms period for the ambient light.\n\nExercise 2 Deliverables\n------------
 -----------\n\n* The Kevinator in Task Scheduler - 10 points\n\n* 2 SynchS
 Ms - 5 points\n\nExercise 3: Memorizaton\n-----------------------\n\nCreat
 e a System that has 2 SynchSMs.\n\nThe first SynchSM should be a memorizat
 ion game.\n\n \n\n* Generate a a random sequence of patterns with only on
 e LED on at a time.\n\n* The sequence can vary in length from minimum 3 to
  maximum 5.\n\n* The LED should blink on for 500ms\, then off for 500ms\, 
 then the next LED\, and so forth.\n\n* After this\, the user uses the joys
 tick to re enter the pattern displayed.\n\n* LEFT is the leftmost LED.\n\n
 * UP is the second left most.\n\n* DOWN is the 3rd LED from the left\n\n* 
 RIGHT is the last LED.\n\n* If the user is correct\, the LEDs should start
  blinking.\n\n* If the user is incorrect at any point\, reset the game.\n\
 n* The Joystick click resets the game.\n\n* A game reset generates a new p
 attern and resets user progress towards memorizing the pattern. You may ha
 ndle diagonal directions in any manner.\n\nThe second SynchSM should be lo
 oping a series of at least 5 notes with 3 unique notes on the buzzer.\n\nE
 xercise 3 Deliverables\n-----------------------\n\n* Memorization Game - 1
 0 points\n\n* Background Music - 10 points\n\n***********************\nGra
 descope Instructions\n***********************\n\nMake three short screen-c
 apture videos demonstrating correct functionality for each of the three ex
 ercises.\n\nPost your screen-capture videos to the hosting service or Clou
 d-based storage solution of your choice. Edit the header file for each lab
 oratory exercise to contain a link to the corresponding video. Create a PD
 F file named [NetID]_lab1.pdf that contains three clickable URL links to t
 he three videos. Rename the three .ino files to have the .cpp file extensi
 on Upload the following files Gradescope\n\n* [NetID]_lab6.pdf\n\n* [NetID
 ]_lab6_part1.cpp\n\n* [NetID]_lab6_part2.cpp\n\n* [NetID]_lab6_part3.cpp\n
 \n-------------------------\nLab Submission Guidelines\n------------------
 -------\n\nPlease follow all requirements in the [Lab submission Guideline
 s] (https://elearn.ucr.edu/courses/48816/pages/laboratory-submission-guide
 lines)
SEQUENCE:0
SUMMARY:Laboratory Assignment #6: Task Scheduler [CS_120B_001\, EE_120B_001
 ]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315270
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><p>This lab introduces you to the Task Scheduler. R
 eview the sample code &amp\; the relevant lecture materialto understand. i
 t The key idea here is the use of the task struct to abstract the idea of 
 multiple tasks (Concurrent SynchSMs).</p>\n<h2>Pre-lab</h2>\n<ul>\n<li>Ass
 emble your kit using the circuit diagram</li>\n<li>Run the sample code\n<u
 l>\n<li>One direction on the X-axis have no lights. (half second response 
 time)</li>\n<li>The other direction on the X-axis should have 4 lights. (h
 alf second response time)</li>\n<li>The buzzer should switch notes every s
 econd</li>\n<li>Your buzzer should not sound like a dying toad.</li>\n<li>
 You may have to adjust the xAxis_median variable.</li>\n</ul>\n</li>\n<li>
 If the sample code works:\n<ul>\n<li>Create a video of the output and put 
 the link to it in your report</li>\n<li>Submit this report to gradescope a
 s a pdf before friday 5pm (You don't need to submit the code)</li>\n</ul>\
 n</li>\n<li>If the sample code doesn't work\n<ul>\n<li>Create a video of t
 he output.</li>\n<li>Email the Part's Assistants &amp\; link the video imm
 ediately\, and no later than friday 5pm.</li>\n</ul>\n</li>\n<li>Essential
 ly\, you must have proof you got your hardware working before friday 5pm\,
  or have contacted the Part's Assistants</li>\n</ul>\n<h2>Sample Code</h2>
 \n<div style="background: #ffffff\; overflow: auto\; width: auto\; border:
  solid gray\; border-width: .1em .1em .1em .8em\; padding: .2em .6em\;">\n
 <pre style="margin: 0\; line-height: 125%\;"><span style="color: #aaaaaa\;
  font-style: italic\;">// Array of Output Pin variables\, set to the pins 
 being used</span>\n<span style="color: #0000aa\;">const</span> <span style
 ="color: #00aaaa\;">int</span> b_size = <span style="color: #009999\;">4</
 span>\;\n<span style="color: #0000aa\;">const</span> <span style="color: #
 00aaaa\;">int</span> b[b_size] = {<span style="color: #009999\;">8</span>\
 , <span style="color: #009999\;">9</span>\, <span style="color: #009999\;"
 >10</span>\, <span style="color: #009999\;">11</span>}\;\n<span style="col
 or: #0000aa\;">const</span> <span style="color: #00aaaa\;">int</span> xAxi
 s = A0\; <span style="color: #aaaaaa\; font-style: italic\;">// Recall tha
 t A0 is really a number under the hood.</span>\n<span style="color: #0000a
 a\;">const</span> <span style="color: #00aaaa\;">int</span> light_pattern_
 size = <span style="color: #009999\;">2</span>\;\n<span style="color: #000
 0aa\;">const</span> <span style="color: #00aaaa\;">char</span> light_patte
 rn[light_pattern_size] = {<span style="color: #009999\;">0x00</span>\, <sp
 an style="color: #009999\;">0x0F</span>}\;\n\n<span style="color: #0000aa\
 ;">const</span> <span style="color: #00aaaa\;">char</span> sound_pattern_s
 ize = <span style="color: #009999\;">2</span>\;\n<span style="color: #0000
 aa\;">const</span> <span style="color: #00aaaa\;">double</span> sound_patt
 ern[sound_pattern_size] = {<span style="color: #009999\;">261.63</span>\, 
 <span style="color: #009999\;">293.66</span>}\; <span style="color: #aaaaa
 a\; font-style: italic\;">// C4\, D4</span>\n\n<span style="color: #0000aa
 \;">const</span> <span style="color: #00aaaa\;">int</span> buzzer = <span 
 style="color: #009999\;">3</span>\;\n\n<span style="color: #0000aa\;">cons
 t</span> <span style="color: #00aaaa\;">int</span> xAxis_median = <span st
 yle="color: #009999\;">100</span>\; <span style="color: #aaaaaa\; font-sty
 le: italic\;">// Adjust this if needed</span>\n\n<span style="color: #aaaa
 aa\; font-style: italic\;">// Reset the Output Buffer. </span>\n<span styl
 e="color: #00aaaa\;">void</span> <span style="color: #00aa00\;">resetBuffe
 r</span>() {\n    <span style="color: #0000aa\;">for</span>(<span style="c
 olor: #00aaaa\;">int</span> i = <span style="color: #009999\;">0</span>\; 
 i &lt\; b_size\; i++) {\n        <span style="color: #aaaaaa\; font-style:
  italic\;">// Note this is an arduino function call to the pins</span>\n  
       digitalWrite(b[i]\, LOW)\;\n    }\n}\n<span style="color: #aaaaaa\; 
 font-style: italic\;">// Writes to the buffer. Note this function ORs the 
 current value with the new value</span>\n<span style="color: #aaaaaa\; fon
 t-style: italic\;">// Note that size is an optional argument with default 
 size the same as the buffer</span>\n<span style="color: #00aaaa\;">void</s
 pan> <span style="color: #00aa00\;">writeBuffer</span>(<span style="color:
  #00aaaa\;">unsigned</span> <span style="color: #00aaaa\;">char</span> b_t
 emp\, <span style="color: #00aaaa\;">int</span> size = b_size)\n{\n    <sp
 an style="color: #0000aa\;">for</span> (<span style="color: #00aaaa\;">int
 </span> i = (size - <span style="color: #009999\;">1</span>)\; i &gt\;= <s
 pan style="color: #009999\;">0</span>\; i--) {\n        <span style="color
 : #0000aa\;">if</span> ((b_temp &gt\;&gt\; i) &amp\; <span style="color: #
 009999\;">0x01</span>) {\n        digitalWrite(b[i]\, HIGH)\;\n        }\n
     }\n\n}\n\n\n<span style="color: #0000aa\;">typedef</span> <span style=
 "color: #0000aa\;">struct</span> task {\n  <span style="color: #00aaaa\;">
 int</span> state\;\n  <span style="color: #00aaaa\;">unsigned</span> <span
  style="color: #00aaaa\;">long</span> period\;\n  <span style="color: #00a
 aaa\;">unsigned</span> <span style="color: #00aaaa\;">long</span> elapsedT
 ime\;\n  <span style="color: #00aaaa\;">int</span> (*TickFct)(<span style=
 "color: #00aaaa\;">int</span>)\;\n    \n} task\;\n\n<span style="color: #0
 0aaaa\;">int</span> delay_gcd\;\n<span style="color: #0000aa\;">const</spa
 n> <span style="color: #00aaaa\;">unsigned</span> <span style="color: #00a
 aaa\;">short</span> tasksNum = <span style="color: #009999\;">2</span>\;\n
 task tasks[tasksNum]\;\n\n<span style="color: #0000aa\;">enum</span> SM1_S
 tates { SM1_INIT\, SM1_S0\, SM1_S1}\;\n<span style="color: #00aaaa\;">int<
 /span> <span style="color: #00aa00\;">SM1_Tick</span>(<span style="color: 
 #00aaaa\;">int</span> state){\n    <span style="color: #aaaaaa\; font-styl
 e: italic\;">//Read thing</span>\n    <span style="color: #0000aa\;">switc
 h</span>(state){ <span style="color: #aaaaaa\; font-style: italic\;">// St
 ate transitions</span>\n      <span style="color: #0000aa\;">case</span> S
 M1_INIT:\n         <span style="color: #aaaaaa\; font-style: italic\;">//S
 tate Transition</span>\n            state = SM1_S0\;\n        <span style=
 "color: #0000aa\;">break</span>\;\n      <span style="color: #0000aa\;">ca
 se</span> SM1_S0:\n          <span style="color: #0000aa\;">if</span> (ana
 logRead(xAxis) &lt\; xAxis_median){\n            state = SM1_S1\;\n       
    }\n          <span style="color: #0000aa\;">else</span>{\n            s
 tate = SM1_S0\;\n          }\n         <span style="color: #aaaaaa\; font-
 style: italic\;">//State Transition</span>\n        <span style="color: #0
 000aa\;">break</span>\;\n      <span style="color: #0000aa\;">case</span> 
 SM1_S1:\n            <span style="color: #0000aa\;">if</span> (analogRead(
 xAxis) &gt\; xAxis_median){\n                state = SM1_S0\;\n           
  }\n            <span style="color: #0000aa\;">else</span>{\n             
    state = SM1_S1\;\n            }\n             <span style="color: #aaaa
 aa\; font-style: italic\;">//State Transition</span>\n        <span style=
 "color: #0000aa\;">break</span>\;\n    }\n    <span style="color: #0000aa\
 ;">switch</span>(state){ <span style="color: #aaaaaa\; font-style: italic\
 ;">// State Action</span>\n      <span style="color: #0000aa\;">case</span
 > SM1_INIT:\n         <span style="color: #aaaaaa\; font-style: italic\;">
 //State Action</span>\n        <span style="color: #0000aa\;">break</span>
 \;\n      <span style="color: #0000aa\;">case</span> SM1_S0:\n            
 <span style="color: #aaaaaa\; font-style: italic\;">//State Action</span>\
 n            resetBuffer()\;\n            writeBuffer(light_pattern[<span 
 style="color: #009999\;">0</span>])\;\n          \n         <span style="c
 olor: #aaaaaa\; font-style: italic\;">//State Action</span>\n        <span
  style="color: #0000aa\;">break</span>\;\n      <span style="color: #0000a
 a\;">case</span> SM1_S1:\n            <span style="color: #aaaaaa\; font-s
 tyle: italic\;">//State Action</span>\n            resetBuffer()\;\n      
       writeBuffer(light_pattern[<span style="color: #009999\;">1</span>])\
 ;\n         <span style="color: #aaaaaa\; font-style: italic\;">//State Ac
 tion</span>\n        <span style="color: #0000aa\;">break</span>\;\n    }\
 n\n    <span style="color: #0000aa\;">return</span> state\;\n}\n\n<span st
 yle="color: #0000aa\;">enum</span> SM2_States { SM2_INIT\, SM2_S0\, SM2_S1
 }\;\n<span style="color: #00aaaa\;">int</span> <span style="color: #00aa00
 \;">SM2_Tick</span>(<span style="color: #00aaaa\;">int</span> state){\n   
  <span style="color: #aaaaaa\; font-style: italic\;">//Read thing</span>\n
     <span style="color: #0000aa\;">switch</span>(state){ <span style="colo
 r: #aaaaaa\; font-style: italic\;">// State transitions</span>\n      <spa
 n style="color: #0000aa\;">case</span> SM1_INIT:\n         <span style="co
 lor: #aaaaaa\; font-style: italic\;">//State Transition</span>\n          
   state = SM1_S0\;\n        <span style="color: #0000aa\;">break</span>\;\
 n      <span style="color: #0000aa\;">case</span> SM1_S0:\n            sta
 te = SM1_S1\;\n        <span style="color: #aaaaaa\; font-style: italic\;"
 >//State Transition</span>\n        <span style="color: #0000aa\;">break</
 span>\;\n      <span style="color: #0000aa\;">case</span> SM1_S1:\n       
      state = SM1_S0\;            \n        <span style="color: #aaaaaa\; f
 ont-style: italic\;">//State Transition</span>\n        <span style="color
 : #0000aa\;">break</span>\;\n    }\n    <span style="color: #0000aa\;">swi
 tch</span>(state){ <span style="color: #aaaaaa\; font-style: italic\;">// 
 State Action</span>\n      <span style="color: #0000aa\;">case</span> SM2_
 INIT:\n         <span style="color: #aaaaaa\; font-style: italic\;">//Stat
 e Action</span>\n        <span style="color: #0000aa\;">break</span>\;\n  
     <span style="color: #0000aa\;">case</span> SM1_S0:\n            <span 
 style="color: #aaaaaa\; font-style: italic\;">//State Action</span>\n     
        tone(buzzer\, sound_pattern[<span style="color: #009999\;">0</span>
 ])\;\n          \n         <span style="color: #aaaaaa\; font-style: itali
 c\;">//State Action</span>\n        <span style="color: #0000aa\;">break</
 span>\;\n      <span style="color: #0000aa\;">case</span> SM1_S1:\n       
      <span style="color: #aaaaaa\; font-style: italic\;">//State Action</s
 pan>\n   \n            tone(buzzer\, sound_pattern[<span style="color: #00
 9999\;">1</span>])\;\n         <span style="color: #aaaaaa\; font-style: i
 talic\;">//State Action</span>\n        <span style="color: #0000aa\;">bre
 ak</span>\;\n    }\n\n    <span style="color: #0000aa\;">return</span> sta
 te\;\n}\n\n\n\n\n\n\n<span style="color: #00aaaa\;">void</span> <span styl
 e="color: #00aa00\;">setup</span>() {\n    <span style="color: #aaaaaa\; f
 ont-style: italic\;">//some set up (Default Arduino Function)</span>\n\n  
   <span style="color: #aaaaaa\; font-style: italic\;">// LEDs</span>\n    
 <span style="color: #0000aa\;">for</span>(<span style="color: #00aaaa\;">i
 nt</span> i = <span style="color: #009999\;">0</span>\; i &lt\; b_size\; i
 ++)\n    {\n        pinMode(b[i]\, OUTPUT)\;\n    }\n    Serial.begin(<spa
 n style="color: #009999\;">9600</span>)\;\n\n\n  <span style="color: #00aa
 aa\;">unsigned</span> <span style="color: #00aaaa\;">char</span> i = <span
  style="color: #009999\;">0</span>\;\n  tasks[i].state = SM1_INIT\;\n  tas
 ks[i].period = <span style="color: #009999\;">500</span>\;\n  tasks[i].ela
 psedTime = <span style="color: #009999\;">0</span>\;\n  tasks[i].TickFct =
  &amp\;SM1_Tick\;\n  i++\;\n  tasks[i].state = SM2_INIT\;\n  tasks[i].peri
 od = <span style="color: #009999\;">1000</span>\;\n  tasks[i].elapsedTime 
 = <span style="color: #009999\;">0</span>\;\n  tasks[i].TickFct = &amp\;SM
 2_Tick\;\n\n  delay_gcd = <span style="color: #009999\;">500</span>\; <spa
 n style="color: #aaaaaa\; font-style: italic\;">// GCD</span>\n\n}\n\n\n<s
 pan style="color: #00aaaa\;">void</span> <span style="color: #00aa00\;">lo
 op</span>() {\n  <span style="color: #aaaaaa\; font-style: italic\;">// pu
 t your main code here\, to run repeatedly:</span>\n  <span style="color: #
 00aaaa\;">unsigned</span> <span style="color: #00aaaa\;">char</span> i\;\n
   <span style="color: #0000aa\;">for</span> (i = <span style="color: #0099
 99\;">0</span>\; i &lt\; tasksNum\; ++i) {\n     <span style="color: #0000
 aa\;">if</span> ( (millis() - tasks[i].elapsedTime) &gt\;= tasks[i].period
 ) {\n        tasks[i].state = tasks[i].TickFct(tasks[i].state)\;\n        
 tasks[i].elapsedTime = millis()\; <span style="color: #aaaaaa\; font-style
 : italic\;">// Last time this task was ran</span>\n      \n     }\n   }\n 
  delay(delay_gcd)\; <span style="color: #aaaaaa\; font-style: italic\;">//
  GCD.</span>\n}\n</pre>\n</div>\n<h2>Rubric - 50 Points Total</h2>\n<ul>\n
 <li>Exercise 1 - 15 Points Musical Konami Code: Task Scheduler</li>\n<li>E
 xercise 2 - 15 Points Kevinator Reloaded</li>\n<li>Exercise 3 - 20 Points 
 Memorization Game</li>\n</ul>\n<h3>Software Requirement</h3>\n<ul>\n<li>Ta
 sk Scheduler</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>You are allowed to crea
 te helper functions.</li>\n<li>Delay() function calls should never be insi
 de a state machine.</li>\n<li>If you set a period too small\, you may see 
 weird timing behavior</li>\n</ul>\n<h2>Parts &amp\; Wiring</h2>\n<h3>Wirin
 g Diagram</h3>\n<p><img id="3104139" src="https://elearn.ucr.edu/courses/4
 8816/files/3104139/preview" alt="lab6_s22_w1.png" data-api-endpoint="https
 ://elearn.ucr.edu/api/v1/courses/48816/files/3104139" data-api-returntype=
 "File"></p>\n<h3>Parts used</h3>\n<ul>\n<li>4x LEDs</li>\n<li>4x 220k resi
 stors</li>\n<li>1x 1k resistor (Buzzer)</li>\n<li>Joystick (GND\, 5v\, VRx
 \, VRy\, SW)</li>\n<li>Buzzer (A0\, GND)</li>\n</ul>\n<h2>Exercises</h2>\n
 <p>The exercises are as follows</p>\n<h3>Exercise 1 : Musical Konami Code<
 /h3>\n<p>Description: Recreate the Konami Music Player inside the Task Sch
 eduler. You must use at least 2 SynchSMs. The state machines may handle th
 e tasks in any manner you see fit.</p>\n<p><em>Hint</em> using shared vari
 ables may be a good idea here.</p>\n<h4>Exercise 1 Deliverables</h4>\n<ul>
 \n<li>Musical Konami Code &amp\; Task Scheduler - 10 points</li>\n<li>At l
 east 2 SynchSMs - 5 points</li>\n</ul>\n<h3>Exercise 2: The Kevinator: Rel
 oaded</h3>\n<p>Recreate the Kevinator from Lab 4 exercise 3 in the Task Sc
 heduler.</p>\n<p>Description: Create a state machine(s) that has a light s
 how operating on 3 LEDs\, it can be anything you want as long as it is 3 u
 nique patterns. The last LED is controlled by the photoresistor. The ambie
 nt light should turn on the LED\, while covering the photoresistor should 
 turn off the LED. Use 2 SynchSMs. One for the light pattern\, one for the 
 ambient light.</p>\n<p>Use a 500ms period for the Light show\, and a 100ms
  period for the ambient light.</p>\n<h4>Exercise 2 Deliverables</h4>\n<ul>
 \n<li>The Kevinator in Task Scheduler - 10 points</li>\n<li>2 SynchSMs - 5
  points</li>\n</ul>\n<h3>Exercise 3: Memorizaton</h3>\n<p>Create a System 
 that has 2 SynchSMs.</p>\n<p>The first SynchSM should be a memorization ga
 me.</p>\n<p>&nbsp\;</p>\n<ul>\n<li>Generate a a random sequence of pattern
 s with only one LED on at a time.</li>\n<li>The sequence can vary in lengt
 h from minimum 3 to maximum 5.</li>\n<li>The LED should blink on for 500ms
 \, then off for 500ms\, then the next LED\, and so forth.</li>\n<li>After 
 this\, the user uses the joystick to re enter the pattern displayed.\n<ul>
 \n<li>LEFT is the leftmost LED.</li>\n<li>UP is the second left most.</li>
 \n<li>DOWN is the 3rd LED from the left</li>\n<li>RIGHT is the last LED.</
 li>\n</ul>\n</li>\n<li>If the user is correct\, the LEDs should start blin
 king.</li>\n<li>If the user is incorrect at any point\, reset the game.</l
 i>\n<li>The Joystick click resets the game.\n<ul>\n<li>A game reset genera
 tes a new pattern and resets user progress towards memorizing the pattern.
  You may handle diagonal directions in any manner.</li>\n</ul>\n</li>\n</u
 l>\n<p>The second SynchSM should be looping a series of at least 5 notes w
 ith 3 unique notes on the buzzer.</p>\n<h4>Exercise 3 Deliverables</h4>\n<
 ul>\n<li>Memorization Game - 10 points</li>\n<li>Background Music - 10 poi
 nts</li>\n</ul>\n<h1>Gradescope Instructions</h1>\n<p>Make three short scr
 een-capture videos demonstrating correct functionality for each of the thr
 ee exercises.</p>\n<p>Post your screen-capture videos to the hosting servi
 ce or Cloud-based storage solution of your choice. Edit the header file fo
 r each laboratory exercise to contain a link to the corresponding video. C
 reate a PDF file named [NetID]_lab1.pdf that contains three clickable URL 
 links to the three videos. Rename the three .ino files to have the .cpp fi
 le extension Upload the following files Gradescope</p>\n<ul>\n<li>[NetID]_
 lab6.pdf</li>\n<li>[NetID]_lab6_part1.cpp</li>\n<li>[NetID]_lab6_part2.cpp
 </li>\n<li>[NetID]_lab6_part3.cpp</li>\n</ul>\n<h2>Lab Submission Guidelin
 es</h2>\n<p>Please follow all requirements in the <a class="inline_disable
 d" href="https://elearn.ucr.edu/courses/48816/pages/laboratory-submission-
 guidelines" target="_blank" data-api-endpoint="https://elearn.ucr.edu/api/
 v1/courses/48816/pages/laboratory-submission-guidelines" data-api-returnty
 pe="Page">Lab submission Guidelines</a></p><script src="https://instructur
 e-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178366/c
 anvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318717
DTSTART;VALUE=DATE:20220506T000000
DTEND;VALUE=DATE:20220506T000000
CLASS:PUBLIC
DESCRIPTION: \n\nConsider a lecture that Sharon or Bonni gave. Now do one 
 of the following:\n\nThink about an idea from that lecture that had meanin
 g or relevance to you. Describe specifically that idea and why was it rele
 vant to you. Did it clarify something in another class? Did provide a new 
 context for an idea you have for something else? Was there some other reas
 on you found it relevant to you? Please do not use these questions as an o
 utline\, nor use them as headings in your document. This is not a recommen
 ded structure\, merely a list of things you want to consider.\n\nOr\, thin
 k about an idea that made no sense to you. Describe specifically that idea
 . What about it confused you? Does it go against something other lecturers
  have told you? What specifically and why? Do you think the idea is not re
 levant to you and your eventual work? What else could have confused you? P
 lease do not use these questions as an outline\, nor use them as headings 
 in your document. This is not a recommended structure\, merely a list of t
 hings you want to consider.\n\nIn either case\, write 500 words about the 
 idea\, using either case above. Remember the writing guidelines in your wr
 iting.\n\nBecause this assignment is extra credit\, we have set the offici
 al points to be zero. In fact\, it's worth up to 25 points. 
SEQUENCE:0
SUMMARY:Extra Credit Report #1 [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=05&
 year=2022#assignment_318717
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><p>&nbsp\;</p>\n<p>Consider a lecture that Sharon o
 r Bonni gave. Now do one of the following: <br><br>Think about an idea fro
 m that lecture that had meaning or relevance to you. Describe specifically
  that idea and why was it relevant to you. Did it clarify something in ano
 ther class? Did provide a new context for an idea you have for something e
 lse? Was there some other reason you found it relevant to you? <em style="
 color: #000000\; font-family: Verdana\, Arial\, Helvetica\, sans-serif\; f
 ont-size: 12px\; font-variant: normal\; line-height: normal\; text-align: 
 start\; text-indent: 0px\; white-space: normal\; background-color: #ffffff
 \;"><strong>Please do not use these questions as an outline\, nor use them
  as headings in your document. This is not a recommended structure\, merel
 y a list of things you want to consider.</strong></em> <br><br>Or\, think 
 about an idea that made no sense to you. Describe specifically that idea. 
 What about it confused you? Does it go against something other lecturers h
 ave told you? What specifically and why? Do you think the idea is not rele
 vant to you and your eventual work? What else could have confused you? <em
  style="color: #000000\; font-family: Verdana\, Arial\, Helvetica\, sans-s
 erif\; font-size: 12px\; font-variant: normal\; line-height: normal\; text
 -align: start\; text-indent: 0px\; white-space: normal\; background-color:
  #ffffff\;"><strong>Please do not use these questions as an outline\, nor 
 use them as headings in your document. This is not a recommended structure
 \, merely a list of things you want to consider.</strong></em> <br><br>In 
 either case\, write 500 words about the idea\, using either case above. Re
 member the writing guidelines in your writing.</p>\n<p>Because this assign
 ment is extra credit\, we have set the official points to be zero. In fact
 \, it's worth up to 25 points.&nbsp\;</p><script src="https://instructure-
 uploads.s3.amazonaws.com/account_144930000000000001/attachments/178366/can
 vas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318718
DTSTART;VALUE=DATE:20220506T000000
DTEND;VALUE=DATE:20220506T000000
CLASS:PUBLIC
DESCRIPTION:Consider another lecture that Sharon or Bonni gave. Now do one 
 of the following:\n\nThink about an idea from that lecture that had meanin
 g or relevence to you. Describe specifically that idea and why was it rele
 vent to you. Did it clarify something in another class? Did provide a new 
 context for an idea you have for something else? Was there some other reas
 on you found it relevent to you? Please do not use these questions as an o
 utline\, nor use them as headings in your document. This is not a recommen
 ded structure\, merely a list of things you want to consider.\n\nOr\, thin
 k about an idea that made no sense to you. Describe specifically that idea
 . What about it confused you? Does it go against something other lecturers
  have told you? What specifically and why? Do you think the idea is not re
 levent to you and your eventual work? What else could have confused you? P
 lease do not use these questions as an outline\, nor use them as headings 
 in your document. This is not a recommended structure\, merely a list of t
 hings you want to consider.\n\nIn either case\, write 500 words about the 
 idea\, using either case above. Remember the writing guidelines in your wr
 iting.\n\nBecause this is an extra credit assignment\, the official points
  are set to zero. In fact this is worth up to 25 points. 
SEQUENCE:0
SUMMARY:Extra Credit Report #2 [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=05&
 year=2022#assignment_318718
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><p><br><br>Consider another lecture that Sharon or 
 Bonni gave. Now do one of the following: <br><br>Think about an idea from 
 that lecture that had meaning or relevence to you. Describe specifically t
 hat idea and why was it relevent to you. Did it clarify something in anoth
 er class? Did provide a new context for an idea you have for something els
 e? Was there some other reason you found it relevent to you? <em style="co
 lor: #000000\; font-family: Verdana\, Arial\, Helvetica\, sans-serif\; fon
 t-size: 12px\; font-variant: normal\; line-height: normal\; text-align: st
 art\; text-indent: 0px\; white-space: normal\; background-color: #ffffff\;
 "><strong>Please do not use these questions as an outline\, nor use them a
 s headings in your document. This is not a recommended structure\, merely 
 a list of things you want to consider.</strong></em> <br><br>Or\, think ab
 out an idea that made no sense to you. Describe specifically that idea. Wh
 at about it confused you? Does it go against something other lecturers hav
 e told you? What specifically and why? Do you think the idea is not releve
 nt to you and your eventual work? What else could have confused you? <em s
 tyle="color: #000000\; font-family: Verdana\, Arial\, Helvetica\, sans-ser
 if\; font-size: 12px\; font-variant: normal\; line-height: normal\; text-a
 lign: start\; text-indent: 0px\; white-space: normal\; background-color: #
 ffffff\;"><strong>Please do not use these questions as an outline\, nor us
 e them as headings in your document. This is not a recommended structure\,
  merely a list of things you want to consider.</strong></em> <br><br>In ei
 ther case\, write 500 words about the idea\, using either case above. Reme
 mber the writing guidelines in your writing.</p>\n<p><br style="color: #00
 0000\; font-family: Verdana\, Arial\, Helvetica\, sans-serif\; font-size: 
 12px\; font-style: normal\; font-variant: normal\; line-height: normal\; t
 ext-align: start\; text-indent: 0px\; white-space: normal\; background-col
 or: #ffffff\;"><span style="font-family: Verdana\, Arial\, Helvetica\, san
 s-serif\;"><span style="font-size: 12px\; background-color: #ffffff\;">Bec
 ause this is an extra credit assignment\, the official points are set to z
 ero. In fact this is worth up to 25 points.&nbsp\;</span></span></p><scrip
 t src="https://instructure-uploads.s3.amazonaws.com/account_14493000000000
 0001/attachments/178366/canvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318737
DTSTART;VALUE=DATE:20220506T000000
DTEND;VALUE=DATE:20220506T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Persona & Scenario (Spec) [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=05&
 year=2022#assignment_318737
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T222100Z
UID:event-assignment-315238
DTSTART;VALUE=DATE:20220508T000000
DTEND;VALUE=DATE:20220508T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Extra Credit Homework #2 [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315238
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T002100Z
UID:event-assignment-315257
DTSTART:20220511T000000Z
DTEND:20220511T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (5/10/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315257
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001100Z
UID:event-assignment-315275
DTSTART:20220512T230000Z
DTEND:20220512T230000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:Quiz #2 [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315275
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T002100Z
UID:event-assignment-315258
DTSTART:20220513T000000Z
DTEND:20220513T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-class Exercises (5/12/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315258
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220331T213600Z
UID:event-assignment-315271
DTSTART:20220514T000000Z
DTEND:20220514T000000Z
CLASS:PUBLIC
DESCRIPTION:Liquid Crystal Displays (LCDs) are hardware components that dis
 play information. This lab will teach you how to use the LiquidCrystal lib
 rary to interact with the LCD display using the Arduino.\n\nThis laborator
 y assignment will require you to use the LiquidCrystal library. Make sure 
 the library is included in your project when working with the LCD display.
  This will provide you with access to many powerful functions that simplif
 y interfacing with the LCD display.\n\nOnce the library has been added\, y
 ou will need to build a LiquidCrystal object. The first step is to create 
 integer variables to store the various pin locations that will be used to 
 construct the object (rs\, en\, d4\, d5\, d6\, d7). The second step is to 
 build a LiquidCrystal object.\n\nIn the setup() function\, you first call 
 the begin() function on the LCD object to specify which rows and columns t
 o enable for displaying text. The begin() function is called with paramete
 rs\, i.e.: begin(columns\,rows).\n\nParameter columns specifies the number
  of columns to use (up to 16) Parameter rows specifies the number of rows 
 to use (up to 2) If you want to use the entire display\, you will call beg
 in() with parameter values (16\,2).\n\nThe setup() function includes a pri
 nt() function that is used to output text to the LCD. print() is provided 
 by the LiquidCrystal library. The next section will review four functions 
 provided by the LiquidCrystal library.\n\nLiquidCrystal Library Functions\
 n-------------------------------\n\nThe LiquidCrystal library contains man
 y functions. We will summarize four of the functions here. We highly recom
 mend that you review the LiquidCrystal library documentation (Links to an 
 external site.)\; you may use any of the functions provided in the LiquidC
 rystal library in this laboratory assignment.\n\nbegin()\n\nInitializes an
 d sets up LCD display with specified dimensions\n\nclear()\n\nClears the L
 CD screen and positions the cursor in the upper-left corner\n\nwrite(data)
 \n\nTakes in a single character and writes it to the current cursor locati
 on\n\nprint(text)\n\nPrints text to the LCD display\, automatically moving
  the cursor for each character\n\n-------\nPre-lab\n-------\n\n* Assemble 
 your kit using the circuit diagram\n\n* Run the sample code\n\n* The sampl
 e code should print "WE LOVE" followed by "EMBEDDED or "SYSTEMS"\, dependi
 ng on the xAxis of the joystick\n\n* If the sample code works:\n\n* Create
  a video of the output and put the link to it in your report\n\n* Submit t
 his report to gradescope as a pdf before friday 5pm (You don't need to sub
 mit the code)\n\n* If the sample code doesn't work\n\n* Create a video of 
 the output.\n\n* Email the Part's Assistants & link the video immediately\
 , and no later than friday 5pm.\n\n* Essentially\, you must have proof you
  got your hardware working before friday 5pm\, or have contacted the Part'
 s Assistants\n\n-----------\nSample Code\n-----------\n\n#include <LiquidC
 rystal.h>\n\n// Array of Output Pin variables\, set to the pins being used
 \nconst int rs = 4\, en = 5\, d4 = 8\, d5 = 9\, d6 = 10\, d7 = 11\;\nLiqui
 dCrystal lcd(rs\, en\, d4\, d5\, d6\, d7)\;\n\nconst int xAxis = A0\; // R
 ecall that A0 is really a number under the hood.\nconst int light_pattern_
 size = 2\;\nconst char light_pattern[light_pattern_size] = {0x00\, 0x0F}\;
 \n\nconst char sound_pattern_size = 2\;\nconst double sound_pattern[sound_
 pattern_size] = {261.63\, 293.66}\; // C4\, D4\n\nconst int buzzer = 3\;\n
 \nconst int xAxis_median = 100\; // Adjust this if needed\n\ntypedef struc
 t task {\nint state\;\nunsigned long period\;\nunsigned long elapsedTime\;
 \nint (*TickFct)(int)\;\n\n} task\;\n\nint delay_gcd\;\nconst unsigned sho
 rt tasksNum = 2\;\ntask tasks[tasksNum]\;\n\nenum SM1_States { SM1_INIT\, 
 SM1_S0\, SM1_S1}\;\nint SM1_Tick(int state){\n//Read thing\nswitch(state){
  // State transitions\ncase SM1_INIT:\n//State Transition\nstate = SM1_S0\
 ;\nbreak\;\ncase SM1_S0:\nif (analogRead(xAxis) < xAxis_median){\nstate = 
 SM1_S1\;\n}\nelse{\nstate = SM1_S0\;\n}\n//State Transition\nbreak\;\ncase
  SM1_S1:\nif (analogRead(xAxis) > xAxis_median){\nstate = SM1_S0\;\n}\nels
 e{\nstate = SM1_S1\;\n}\n//State Transition\nbreak\;\n}\nswitch(state){ //
  State Action\ncase SM1_INIT:\n//State Action\nbreak\;\ncase SM1_S0:\n//St
 ate Action\nlcd.clear()\;\nlcd.setCursor(0\,0)\;\nlcd.print("EMBEDDED")\;\
 n//State Action\nbreak\;\ncase SM1_S1:\n//State Action\nlcd.clear()\;\nlcd
 .setCursor(0\,1)\;\nlcd.print("SYSTEMS")\;\n//State Action\nbreak\;\n}\n\n
 return state\;\n}\n\nenum SM2_States { SM2_INIT\, SM2_S0\, SM2_S1}\;\nint 
 SM2_Tick(int state){\n//Read thing\nswitch(state){ // State transitions\nc
 ase SM1_INIT:\n//State Transition\nstate = SM1_S0\;\nbreak\;\ncase SM1_S0:
 \nstate = SM1_S1\;\n//State Transition\nbreak\;\ncase SM1_S1:\nstate = SM1
 _S0\;\n//State Transition\nbreak\;\n}\nswitch(state){ // State Action\ncas
 e SM2_INIT:\n//State Action\nbreak\;\ncase SM1_S0:\n//State Action\ntone(b
 uzzer\, sound_pattern[0])\;\n\n//State Action\nbreak\;\ncase SM1_S1:\n//St
 ate Action\n\ntone(buzzer\, sound_pattern[1])\;\n//State Action\nbreak\;\n
 }\n\nreturn state\;\n}\n\nvoid setup() {\n//some set up (Default Arduino F
 unction)\n\n// LEDs\n\nSerial.begin(9600)\;\n\nunsigned char i = 0\;\ntask
 s[i].state = SM1_INIT\;\ntasks[i].period = 500\;\ntasks[i].elapsedTime = 0
 \;\ntasks[i].TickFct = &SM1_Tick\;\ni++\;\ntasks[i].state = SM2_INIT\;\nta
 sks[i].period = 1000\;\ntasks[i].elapsedTime = 0\;\ntasks[i].TickFct = &SM
 2_Tick\;\n\ndelay_gcd = 500\; // GCD\nlcd.begin(16\,2)\;\n\nlcd.print("WE 
 LOVE")\;\n}\n\nvoid loop() {\n// put your main code here\, to run repeated
 ly:\nunsigned char i\;\nfor (i = 0\; i < tasksNum\; ++i) {\nif ( (millis()
  - tasks[i].elapsedTime) >= tasks[i].period) {\ntasks[i].state = tasks[i].
 TickFct(tasks[i].state)\;\ntasks[i].elapsedTime = millis()\; // Last time 
 this task was ran\n\n}\n}\ndelay(delay_gcd)\; // GCD.\n}\n\n--------------
 ----------\nRubric - 50 Points Total\n------------------------\n\n* Exerci
 se 1 - 25 Points - Text Editor v2\n\n* Exercise 2 - 25 Points - Wordle\n\n
 Software Requirement\n--------------------\n\n* State Machines\n\nNotes:\n
 \n* You are allowed to create helper functions.\n\n* Delay() function call
 s should never be inside a state machine.\n\n* If you set a period too sma
 ll\, you may see weird timing behavior\n\n--------------\nParts & Wiring\n
 --------------\n\nWiring Diagram\n--------------\n\n[lab7_s22_w3.png] (htt
 ps://elearn.ucr.edu/courses/48816/files/3104140/preview)\n\nLCD PIN #\n\nS
 ymbol\n\nFunction\n\nConnection\n\n1\n\nVSS\n\nGround Power Supply\n\nGND\
 n\n2\n\nVCC\n\n5V Power supply\n\n5V\n\n3\n\nV0\n\nLCD contrast\n\nPotenti
 ometer\n\n4\n\nRS\n\nData Instruction\n\nD4\n\n5\n\nRW\n\nRead/Write\n\nGN
 D\n\n6\n\nE\n\nEnable\n\nD5\n\n7 - 10\n\nDB0-DB3\n\nData Bus (Not Needed)\
 n\nN/A\n\n11 - 14\n\nDB4-DB7\n\nData Bus (Needed)\n\nD8-D11\n\n15\n\nA\n\n
 Backlight\n\n5V\n\n16\n\nK\n\nBacklight\n\nGND\n\nParts used\n----------\n
 \n* 2x 1k resistor (Buzzer\, LCD)\n\n* 1x Potentiometer (Yours will be bla
 ck & in 2 pieces)\n\n* Joystick (GND\, 5v\, VRx\, VRy\, SW)\n\n* Buzzer (A
 0\, GND)\n\n* LCD1602 Screen (see table for wiring)\n\n---------\nExercise
 s\n---------\n\nThe exercises are as follows\n\nExercise 1: Text Editor v2
 \n--------------------------\n\nBuild a simple text editor using the LCD D
 isplay. Use the joystick as a keyboard and a 5th button that acts as a SHI
 FT.\n\n*\n\nEach direction should corresponds to a unique lowercase letter
 \n\n*\n\nThis includes diagonal directions. (8 Directions total)\n\n*\n\nY
 ou may choose which letters these represent\n\n*\n\nEach time a new letter
  is typed\, the cursor should move to the next available square.\n\n*\n\nW
 hen the first row is filled\, the cursor should move to the start of the n
 ext row.\n\n*\n\nPressing and holding a direction should not print more th
 an one instance of the corresponding letter to the LCD.\n\n*\n\nThe joysti
 ck should return to the neutral position before selecting another letter\n
 \n*\n\nWhen the LCD display is full\, no additional letters can be written
  (i.e.\, button presses are ignored\, except for clearing the LCD).\n\n*\n
 \nSHIFT & Reset Functionality\n\n* If the 5th button is pressed\, only the
  next letter typed should be uppercase\, the letter after that will be low
 ercase\n\n* If the 5th Button is pressed & held for 2 seconds. The LCD Scr
 een should clear\n\nExercise 1 Deliverables\n-----------------------\n\n* 
 Text Editor General Functionality - 20 points\n\n* Correct SHIFT & Reset F
 unctionality - 5 points\n\nExercise 2: Wordle\n------------------\n\nDescr
 iption: create a simplified wordle using the Joystick\, LCD Display\, and 
 the Buzzer. Worlde is a word guessing game. You can play it here: https://
 www.nytimes.com/games/wordle/index.html\n\nThe functionality of your game 
 should behave as follows\n\n* Correct words are 5 letters long\n\n* The us
 er has has 6 guesses\n\n* Use a randomized bank of 10 5-letter words\n\n* 
 The first 5 spaces of the first row will be where the user selects letters
 \n\n* The 6th space should use a character to represent "ENTER" of some ki
 nd\n\n* The user will select this space with the joystick button to enter 
 the users guess\n\n* When a user enters in a guess\n\n* use a blank spot i
 n the word to indicate a letter not used at all\n\n* use a special charact
 er (pick any) to indicate a letter used\, in the wrong position\n\n* use a
  different special character to display a letter at the correct position\n
 \n* This will stay displayed until the user clicks the joystick again\n\n*
  The cursor should blink wherever it is at\n\n* The joystick should contro
 l the cursor\n\n* The user can move the cursor to any point on the 5 space
 s of the wordle\n\n* Clicking the joystick button while highlighting a spa
 ce will bring up a letter selection screen\n\n* This letter selection scre
 en shows all alphabetical letters on the screen\n\n* Use the joystick to s
 elect the letter\n\n* This letter will now appear on the space\n\n* The us
 er can click a selected letter again to change\, if they have not confirme
 d their guess.\n\n* Once the user has selected a letter for every space\, 
 the user can hit the "ENTER" button to confirm their guess\n\n* Display on
  the second row the following information in some capacity:\n\n* Number of
  tries left\n\n* Confirmed Letters at known location\n\n* Confirmed letter
 s without a known location\n\nMusical Game End\n\n*\n\nIf the user fails\,
  Play a funny or sad tune on the buzzer\, at least 3 notes\n\n*\n\nIf the 
 user succeeds\, Play a happy tune\, at least 3 notes\n\n*\n\nReset the gam
 e after the song ends & the user clicks the joystick button\n\nExercise 2 
 Deliverables\n-----------------------\n\n* Wordle General Functionality - 
 20 points\n\n* Music at Game End - 5 points\n\n***********************\nGr
 adescope Instructions\n***********************\n\nMake three short screen-
 capture videos demonstrating correct functionality for each of the three e
 xercises.\n\nPost your screen-capture videos to the hosting service or Clo
 ud-based storage solution of your choice. Edit the header file for each la
 boratory exercise to contain a link to the corresponding video. Create a P
 DF file named [NetID]_lab1.pdf that contains three clickable URL links to 
 the three videos. Rename the three .ino files to have the .cpp file extens
 ion Upload the following files Gradescope\n\n* [NetID]_lab7.pdf\n\n* [NetI
 D]_lab7_part1.cpp\n\n* [NetID]_lab7_part2.cpp\n\n-------------------------
 \nLab Submission Guidelines\n-------------------------\n\nPlease follow al
 l requirements in the [Lab submission Guidelines] (https://elearn.ucr.edu/
 courses/48816/pages/laboratory-submission-guidelines)
SEQUENCE:0
SUMMARY:Laboratory Assignment #7: LCD Screen [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315271
X-ALT-DESC;FMTTYPE=text/html:<link rel="stylesheet" href="https://instructu
 re-uploads.s3.amazonaws.com/account_144930000000000001/attachments/178367/
 canvas_global_app.css"><p>Liquid Crystal Displays (LCDs) are hardware comp
 onents that display information. This lab will teach you how to use the Li
 quidCrystal library to interact with the LCD display using the Arduino.</p
 >\n<p>This laboratory assignment will require you to use the LiquidCrystal
  library. Make sure the library is included in your project when working w
 ith the LCD display. This will provide you with access to many powerful fu
 nctions that simplify interfacing with the LCD display.</p>\n<p>Once the l
 ibrary has been added\, you will need to build a LiquidCrystal object. The
  first step is to create integer variables to store the various pin locati
 ons that will be used to construct the object (rs\, en\, d4\, d5\, d6\, d7
 ). The second step is to build a LiquidCrystal object.</p>\n<p>In the setu
 p() function\, you first call the begin() function on the LCD object to sp
 ecify which rows and columns to enable for displaying text. The begin() fu
 nction is called with parameters\, i.e.: begin(columns\,rows).</p>\n<p>Par
 ameter <strong>columns</strong> specifies the number of columns to use (up
  to 16) Parameter <strong>rows</strong> specifies the number of rows to us
 e (up to 2) If you want to use the entire display\, you will call begin() 
 with parameter values (16\,2).</p>\n<p>The setup() function includes a pri
 nt() function that is used to output text to the LCD. print() is provided 
 by the LiquidCrystal library. The next section will review four functions 
 provided by the LiquidCrystal library.</p>\n<h4>LiquidCrystal Library Func
 tions</h4>\n<p>The LiquidCrystal library contains many functions. We will 
 summarize four of the functions here. We highly recommend that you review 
 the LiquidCrystal library documentation (Links to an external site.)\; you
  may use any of the functions provided in the LiquidCrystal library in thi
 s laboratory assignment.</p>\n<pre><code class="language-c++">begin()\n</c
 ode></pre>\n<p>Initializes and sets up LCD display with specified dimensio
 ns</p>\n<pre><code class="language-c++">clear()\n</code></pre>\n<p>Clears 
 the LCD screen and positions the cursor in the upper-left corner</p>\n<pre
 ><code class="language-c++">write(data)\n</code></pre>\n<p>Takes in a sing
 le character and writes it to the current cursor location</p>\n<pre><code 
 class="language-c++">print(text)\n</code></pre>\n<p>Prints text to the LCD
  display\, automatically moving the cursor for each character</p>\n<h2>Pre
 -lab</h2>\n<ul>\n<li>Assemble your kit using the circuit diagram</li>\n<li
 >Run the sample code</li>\n<li>The sample code should print "WE LOVE" foll
 owed by "EMBEDDED or "SYSTEMS"\, depending on the xAxis of the joystick</l
 i>\n<li>If the sample code works:\n<ul>\n<li>Create a video of the output 
 and put the link to it in your report</li>\n<li>Submit this report to grad
 escope as a pdf before friday 5pm (You don't need to submit the code)</li>
 \n</ul>\n</li>\n<li>If the sample code doesn't work\n<ul>\n<li>Create a vi
 deo of the output.</li>\n<li>Email the Part's Assistants &amp\; link the v
 ideo immediately\, and no later than friday 5pm.</li>\n</ul>\n</li>\n<li>E
 ssentially\, you must have proof you got your hardware working before frid
 ay 5pm\, or have contacted the Part's Assistants</li>\n</ul>\n<h2>Sample C
 ode</h2>\n<div style="background: #ffffff\; overflow: auto\; width: auto\;
  border: solid gray\; border-width: .1em .1em .1em .8em\; padding: .2em .6
 em\;">\n<pre style="margin: 0\; line-height: 125%\;"><span style="color: #
 4c8317\;">#include &lt\;LiquidCrystal.h&gt\;</span>\n\n<span style="color:
  #aaaaaa\; font-style: italic\;">// Array of Output Pin variables\, set to
  the pins being used</span>\n<span style="color: #0000aa\;">const</span> <
 span style="color: #00aaaa\;">int</span> rs = <span style="color: #009999\
 ;">4</span>\, en = <span style="color: #009999\;">5</span>\, d4 = <span st
 yle="color: #009999\;">8</span>\, d5 = <span style="color: #009999\;">9</s
 pan>\, d6 = <span style="color: #009999\;">10</span>\, d7 = <span style="c
 olor: #009999\;">11</span>\;\nLiquidCrystal <span style="color: #00aa00\;"
 >lcd</span>(rs\, en\, d4\, d5\, d6\, d7)\;\n\n\n<span style="color: #0000a
 a\;">const</span> <span style="color: #00aaaa\;">int</span> xAxis = A0\; <
 span style="color: #aaaaaa\; font-style: italic\;">// Recall that A0 is re
 ally a number under the hood.</span>\n<span style="color: #0000aa\;">const
 </span> <span style="color: #00aaaa\;">int</span> light_pattern_size = <sp
 an style="color: #009999\;">2</span>\;\n<span style="color: #0000aa\;">con
 st</span> <span style="color: #00aaaa\;">char</span> light_pattern[light_p
 attern_size] = {<span style="color: #009999\;">0x00</span>\, <span style="
 color: #009999\;">0x0F</span>}\;\n\n<span style="color: #0000aa\;">const</
 span> <span style="color: #00aaaa\;">char</span> sound_pattern_size = <spa
 n style="color: #009999\;">2</span>\;\n<span style="color: #0000aa\;">cons
 t</span> <span style="color: #00aaaa\;">double</span> sound_pattern[sound_
 pattern_size] = {<span style="color: #009999\;">261.63</span>\, <span styl
 e="color: #009999\;">293.66</span>}\; <span style="color: #aaaaaa\; font-s
 tyle: italic\;">// C4\, D4</span>\n\n<span style="color: #0000aa\;">const<
 /span> <span style="color: #00aaaa\;">int</span> buzzer = <span style="col
 or: #009999\;">3</span>\;\n\n<span style="color: #0000aa\;">const</span> <
 span style="color: #00aaaa\;">int</span> xAxis_median = <span style="color
 : #009999\;">100</span>\; <span style="color: #aaaaaa\; font-style: italic
 \;">// Adjust this if needed</span>\n\n\n\n\n<span style="color: #0000aa\;
 ">typedef</span> <span style="color: #0000aa\;">struct</span> task {\n  <s
 pan style="color: #00aaaa\;">int</span> state\;\n  <span style="color: #00
 aaaa\;">unsigned</span> <span style="color: #00aaaa\;">long</span> period\
 ;\n  <span style="color: #00aaaa\;">unsigned</span> <span style="color: #0
 0aaaa\;">long</span> elapsedTime\;\n  <span style="color: #00aaaa\;">int</
 span> (*TickFct)(<span style="color: #00aaaa\;">int</span>)\;\n    \n} tas
 k\;\n\n<span style="color: #00aaaa\;">int</span> delay_gcd\;\n<span style=
 "color: #0000aa\;">const</span> <span style="color: #00aaaa\;">unsigned</s
 pan> <span style="color: #00aaaa\;">short</span> tasksNum = <span style="c
 olor: #009999\;">2</span>\;\ntask tasks[tasksNum]\;\n\n<span style="color:
  #0000aa\;">enum</span> SM1_States { SM1_INIT\, SM1_S0\, SM1_S1}\;\n<span 
 style="color: #00aaaa\;">int</span> <span style="color: #00aa00\;">SM1_Tic
 k</span>(<span style="color: #00aaaa\;">int</span> state){\n    <span styl
 e="color: #aaaaaa\; font-style: italic\;">//Read thing</span>\n    <span s
 tyle="color: #0000aa\;">switch</span>(state){ <span style="color: #aaaaaa\
 ; font-style: italic\;">// State transitions</span>\n      <span style="co
 lor: #0000aa\;">case</span> SM1_INIT:\n         <span style="color: #aaaaa
 a\; font-style: italic\;">//State Transition</span>\n            state = S
 M1_S0\;\n        <span style="color: #0000aa\;">break</span>\;\n      <spa
 n style="color: #0000aa\;">case</span> SM1_S0:\n          <span style="col
 or: #0000aa\;">if</span> (analogRead(xAxis) &lt\; xAxis_median){\n        
     state = SM1_S1\;\n          }\n          <span style="color: #0000aa\;
 ">else</span>{\n            state = SM1_S0\;\n          }\n         <span 
 style="color: #aaaaaa\; font-style: italic\;">//State Transition</span>\n 
        <span style="color: #0000aa\;">break</span>\;\n      <span style="c
 olor: #0000aa\;">case</span> SM1_S1:\n            <span style="color: #000
 0aa\;">if</span> (analogRead(xAxis) &gt\; xAxis_median){\n                
 state = SM1_S0\;\n            }\n            <span style="color: #0000aa\;
 ">else</span>{\n                state = SM1_S1\;\n            }\n         
     <span style="color: #aaaaaa\; font-style: italic\;">//State Transition
 </span>\n        <span style="color: #0000aa\;">break</span>\;\n    }\n   
  <span style="color: #0000aa\;">switch</span>(state){ <span style="color: 
 #aaaaaa\; font-style: italic\;">// State Action</span>\n      <span style=
 "color: #0000aa\;">case</span> SM1_INIT:\n         <span style="color: #aa
 aaaa\; font-style: italic\;">//State Action</span>\n        <span style="c
 olor: #0000aa\;">break</span>\;\n      <span style="color: #0000aa\;">case
 </span> SM1_S0:\n            <span style="color: #aaaaaa\; font-style: ita
 lic\;">//State Action</span>\n            lcd.clear()\;\n            lcd.s
 etCursor(<span style="color: #009999\;">0</span>\,<span style="color: #009
 999\;">0</span>)\;\n            lcd.print(<span style="color: #aa5500\;">"
 EMBEDDED"</span>)\;\n         <span style="color: #aaaaaa\; font-style: it
 alic\;">//State Action</span>\n        <span style="color: #0000aa\;">brea
 k</span>\;\n      <span style="color: #0000aa\;">case</span> SM1_S1:\n    
         <span style="color: #aaaaaa\; font-style: italic\;">//State Action
 </span>\n            lcd.clear()\;\n            lcd.setCursor(<span style=
 "color: #009999\;">0</span>\,<span style="color: #009999\;">1</span>)\;\n 
            lcd.print(<span style="color: #aa5500\;">"SYSTEMS"</span>)\;\n 
         <span style="color: #aaaaaa\; font-style: italic\;">//State Action
 </span>\n        <span style="color: #0000aa\;">break</span>\;\n    }\n\n 
    <span style="color: #0000aa\;">return</span> state\;\n}\n\n<span style=
 "color: #0000aa\;">enum</span> SM2_States { SM2_INIT\, SM2_S0\, SM2_S1}\;\
 n<span style="color: #00aaaa\;">int</span> <span style="color: #00aa00\;">
 SM2_Tick</span>(<span style="color: #00aaaa\;">int</span> state){\n    <sp
 an style="color: #aaaaaa\; font-style: italic\;">//Read thing</span>\n    
 <span style="color: #0000aa\;">switch</span>(state){ <span style="color: #
 aaaaaa\; font-style: italic\;">// State transitions</span>\n      <span st
 yle="color: #0000aa\;">case</span> SM1_INIT:\n         <span style="color:
  #aaaaaa\; font-style: italic\;">//State Transition</span>\n            st
 ate = SM1_S0\;\n        <span style="color: #0000aa\;">break</span>\;\n   
    <span style="color: #0000aa\;">case</span> SM1_S0:\n            state =
  SM1_S1\;\n        <span style="color: #aaaaaa\; font-style: italic\;">//S
 tate Transition</span>\n        <span style="color: #0000aa\;">break</span
 >\;\n      <span style="color: #0000aa\;">case</span> SM1_S1:\n           
  state = SM1_S0\;            \n        <span style="color: #aaaaaa\; font-
 style: italic\;">//State Transition</span>\n        <span style="color: #0
 000aa\;">break</span>\;\n    }\n    <span style="color: #0000aa\;">switch<
 /span>(state){ <span style="color: #aaaaaa\; font-style: italic\;">// Stat
 e Action</span>\n      <span style="color: #0000aa\;">case</span> SM2_INIT
 :\n         <span style="color: #aaaaaa\; font-style: italic\;">//State Ac
 tion</span>\n        <span style="color: #0000aa\;">break</span>\;\n      
 <span style="color: #0000aa\;">case</span> SM1_S0:\n            <span styl
 e="color: #aaaaaa\; font-style: italic\;">//State Action</span>\n         
    tone(buzzer\, sound_pattern[<span style="color: #009999\;">0</span>])\;
 \n          \n         <span style="color: #aaaaaa\; font-style: italic\;"
 >//State Action</span>\n        <span style="color: #0000aa\;">break</span
 >\;\n      <span style="color: #0000aa\;">case</span> SM1_S1:\n           
  <span style="color: #aaaaaa\; font-style: italic\;">//State Action</span>
 \n   \n            tone(buzzer\, sound_pattern[<span style="color: #009999
 \;">1</span>])\;\n         <span style="color: #aaaaaa\; font-style: itali
 c\;">//State Action</span>\n        <span style="color: #0000aa\;">break</
 span>\;\n    }\n\n    <span style="color: #0000aa\;">return</span> state\;
 \n}\n\n\n\n\n\n\n<span style="color: #00aaaa\;">void</span> <span style="c
 olor: #00aa00\;">setup</span>() {\n    <span style="color: #aaaaaa\; font-
 style: italic\;">//some set up (Default Arduino Function)</span>\n\n    <s
 pan style="color: #aaaaaa\; font-style: italic\;">// LEDs</span>\n   \n   
  Serial.begin(<span style="color: #009999\;">9600</span>)\;\n\n\n  <span s
 tyle="color: #00aaaa\;">unsigned</span> <span style="color: #00aaaa\;">cha
 r</span> i = <span style="color: #009999\;">0</span>\;\n  tasks[i].state =
  SM1_INIT\;\n  tasks[i].period = <span style="color: #009999\;">500</span>
 \;\n  tasks[i].elapsedTime = <span style="color: #009999\;">0</span>\;\n  
 tasks[i].TickFct = &amp\;SM1_Tick\;\n  i++\;\n  tasks[i].state = SM2_INIT\
 ;\n  tasks[i].period = <span style="color: #009999\;">1000</span>\;\n  tas
 ks[i].elapsedTime = <span style="color: #009999\;">0</span>\;\n  tasks[i].
 TickFct = &amp\;SM2_Tick\;\n\n  delay_gcd = <span style="color: #009999\;"
 >500</span>\; <span style="color: #aaaaaa\; font-style: italic\;">// GCD</
 span>\n  lcd.begin(<span style="color: #009999\;">16</span>\,<span style="
 color: #009999\;">2</span>)\;\n\n  lcd.print(<span style="color: #aa5500\;
 ">"WE LOVE"</span>)\;\n}\n\n\n<span style="color: #00aaaa\;">void</span> <
 span style="color: #00aa00\;">loop</span>() {\n  <span style="color: #aaaa
 aa\; font-style: italic\;">// put your main code here\, to run repeatedly:
 </span>\n  <span style="color: #00aaaa\;">unsigned</span> <span style="col
 or: #00aaaa\;">char</span> i\;\n  <span style="color: #0000aa\;">for</span
 > (i = <span style="color: #009999\;">0</span>\; i &lt\; tasksNum\; ++i) {
 \n     <span style="color: #0000aa\;">if</span> ( (millis() - tasks[i].ela
 psedTime) &gt\;= tasks[i].period) {\n        tasks[i].state = tasks[i].Tic
 kFct(tasks[i].state)\;\n        tasks[i].elapsedTime = millis()\; <span st
 yle="color: #aaaaaa\; font-style: italic\;">// Last time this task was ran
 </span>\n      \n     }\n   }\n  delay(delay_gcd)\; <span style="color: #a
 aaaaa\; font-style: italic\;">// GCD.</span>\n}\n</pre>\n</div>\n<h2>Rubri
 c - 50 Points Total</h2>\n<ul>\n<li>Exercise 1 - 25 Points - Text Editor v
 2</li>\n<li>Exercise 2 - 25 Points - Wordle</li>\n</ul>\n<h3>Software Requ
 irement</h3>\n<ul>\n<li>State Machines</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<
 li>You are allowed to create helper functions.</li>\n<li>Delay() function 
 calls should never be inside a state machine.</li>\n<li>If you set a perio
 d too small\, you may see weird timing behavior</li>\n</ul>\n<h2>Parts &am
 p\; Wiring</h2>\n<h3>Wiring Diagram</h3>\n<p><img id="3104140" src="https:
 //elearn.ucr.edu/courses/48816/files/3104140/preview" alt="lab7_s22_w3.png
 " data-api-endpoint="https://elearn.ucr.edu/api/v1/courses/48816/files/310
 4140" data-api-returntype="File"></p>\n<table>\n<thead>\n<tr>\n<th>LCD PIN
  #</th>\n<th>Symbol</th>\n<th>Function</th>\n<th>Connection</th>\n</tr>\n<
 /thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>VSS</td>\n<td>Ground Power Supply<
 /td>\n<td>GND</td>\n</tr>\n<tr>\n<td>2</td>\n<td>VCC</td>\n<td>5V Power su
 pply</td>\n<td>5V</td>\n</tr>\n<tr>\n<td>3</td>\n<td>V0</td>\n<td>LCD cont
 rast</td>\n<td>Potentiometer</td>\n</tr>\n<tr>\n<td>4</td>\n<td>RS</td>\n<
 td>Data Instruction</td>\n<td>D4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>RW</td
 >\n<td>Read/Write</td>\n<td>GND</td>\n</tr>\n<tr>\n<td>6</td>\n<td>E</td>\
 n<td>Enable</td>\n<td>D5</td>\n</tr>\n<tr>\n<td>7 - 10</td>\n<td>DB0-DB3</
 td>\n<td>Data Bus (Not Needed)</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>11 - 1
 4</td>\n<td>DB4-DB7</td>\n<td>Data Bus (Needed)</td>\n<td>D8-D11</td>\n</t
 r>\n<tr>\n<td>15</td>\n<td>A</td>\n<td>Backlight</td>\n<td>5V</td>\n</tr>\
 n<tr>\n<td>16</td>\n<td>K</td>\n<td>Backlight</td>\n<td>GND</td>\n</tr>\n<
 /tbody>\n</table>\n<h3>Parts used</h3>\n<ul>\n<li>2x 1k resistor (Buzzer\,
  LCD)</li>\n<li>1x Potentiometer (Yours will be black &amp\; in 2 pieces)<
 /li>\n<li>Joystick (GND\, 5v\, VRx\, VRy\, SW)</li>\n<li>Buzzer (A0\, GND)
 </li>\n<li>LCD1602 Screen (see table for wiring)</li>\n</ul>\n<h2>Exercise
 s</h2>\n<p>The exercises are as follows</p>\n<h3>Exercise 1: Text Editor v
 2</h3>\n<p>Build a simple text editor using the LCD Display. Use the joyst
 ick as a keyboard and a 5th button that acts as a SHIFT.</p>\n<ul>\n<li>\n
 <p>Each direction should corresponds to a unique lowercase letter</p>\n</l
 i>\n<li>\n<p>This includes diagonal directions. (8 Directions total)</p>\n
 </li>\n<li>\n<p>You may choose which letters these represent</p>\n</li>\n<
 li>\n<p>Each time a new letter is typed\, the cursor should move to the ne
 xt available square.</p>\n</li>\n<li>\n<p>When the first row is filled\, t
 he cursor should move to the start of the next row.</p>\n</li>\n<li>\n<p>P
 ressing and holding a direction should not print more than one instance of
  the corresponding letter to the LCD.</p>\n</li>\n<li>\n<p>The joystick sh
 ould return to the neutral position before selecting another letter</p>\n<
 /li>\n<li>\n<p>When the LCD display is full\, no additional letters can be
  written (i.e.\, button presses are ignored\, except for clearing the LCD)
 .</p>\n</li>\n<li>\n<p>SHIFT &amp\; Reset Functionality</p>\n<ul>\n<li>If 
 the 5th button is pressed\, only the next letter typed should be uppercase
 \, the letter after that will be lowercase</li>\n<li>If the 5th Button is 
 pressed &amp\; held for 2 seconds. The LCD Screen should clear</li>\n</ul>
 \n</li>\n</ul>\n<h4>Exercise 1 Deliverables</h4>\n<ul>\n<li>Text Editor Ge
 neral Functionality - 20 points</li>\n<li>Correct SHIFT &amp\; Reset Funct
 ionality - 5 points</li>\n</ul>\n<h3>Exercise 2: Wordle</h3>\n<p>Descripti
 on: create a simplified wordle using the Joystick\, LCD Display\, and the 
 Buzzer. Worlde is a word guessing game. You can play it here: https://www.
 nytimes.com/games/wordle/index.html</p>\n<p>The functionality of your game
  should behave as follows</p>\n<ul>\n<li>Correct words are 5 letters long<
 /li>\n<li>The user has has 6 guesses</li>\n<li>Use a randomized bank of 10
  5-letter words</li>\n<li>The first 5 spaces of the first row will be wher
 e the user selects letters</li>\n<li>The 6th space should use a character 
 to represent "ENTER" of some kind\n<ul>\n<li>The user will select this spa
 ce with the joystick button to enter the users guess</li>\n</ul>\n</li>\n<
 li>When a user enters in a guess\n<ul>\n<li>use a blank spot in the word t
 o indicate a letter not used at all</li>\n<li>use a special character (pic
 k any) to indicate a letter used\, in the wrong position</li>\n<li>use a d
 ifferent special character to display a letter at the correct position</li
 >\n<li>This will stay displayed until the user clicks the joystick again</
 li>\n</ul>\n</li>\n<li>The cursor should blink wherever it is at</li>\n<li
 >The joystick should control the cursor</li>\n<li>The user can move the cu
 rsor to any point on the 5 spaces of the wordle</li>\n<li>Clicking the joy
 stick button while highlighting a space will bring up a letter selection s
 creen\n<ul>\n<li>This letter selection screen shows all alphabetical lette
 rs on the screen</li>\n<li>Use the joystick to select the letter</li>\n<li
 >This letter will now appear on the space</li>\n<li>The user can click a s
 elected letter again to change\, if they have not confirmed their guess.</
 li>\n</ul>\n</li>\n<li>Once the user has selected a letter for every space
 \, the user can hit the "ENTER" button to confirm their guess</li>\n<li>Di
 splay on the second row the following information in some capacity:\n<ul>\
 n<li>Number of tries left</li>\n<li>Confirmed Letters at known location</l
 i>\n<li>Confirmed letters without a known location</li>\n</ul>\n</li>\n</u
 l>\n<p>Musical Game End</p>\n<ul>\n<li>\n<p>If the user fails\, Play a fun
 ny or sad tune on the buzzer\, at least 3 notes</p>\n</li>\n<li>\n<p>If th
 e user succeeds\, Play a happy tune\, at least 3 notes</p>\n</li>\n<li>\n<
 p>Reset the game after the song ends &amp\; the user clicks the joystick b
 utton</p>\n</li>\n</ul>\n<h4>Exercise 2 Deliverables</h4>\n<ul>\n<li>Wordl
 e General Functionality - 20 points</li>\n<li>Music at Game End - 5 points
 </li>\n</ul>\n<h1>Gradescope Instructions</h1>\n<p>Make three short screen
 -capture videos demonstrating correct functionality for each of the three 
 exercises.</p>\n<p>Post your screen-capture videos to the hosting service 
 or Cloud-based storage solution of your choice. Edit the header file for e
 ach laboratory exercise to contain a link to the corresponding video. Crea
 te a PDF file named [NetID]_lab1.pdf that contains three clickable URL lin
 ks to the three videos. Rename the three .ino files to have the .cpp file 
 extension Upload the following files Gradescope</p>\n<ul>\n<li>[NetID]_lab
 7.pdf</li>\n<li>[NetID]_lab7_part1.cpp</li>\n<li>[NetID]_lab7_part2.cpp</l
 i>\n</ul>\n<h2>Lab Submission Guidelines</h2>\n<p>Please follow all requir
 ements in the <a class="inline_disabled" href="https://elearn.ucr.edu/cour
 ses/48816/pages/laboratory-submission-guidelines" target="_blank" data-api
 -endpoint="https://elearn.ucr.edu/api/v1/courses/48816/pages/laboratory-su
 bmission-guidelines" data-api-returntype="Page">Lab submission Guidelines<
 /a></p><script src="https://instructure-uploads.s3.amazonaws.com/account_1
 44930000000000001/attachments/178366/canvas_global_app.js"></script>
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318726
DTSTART;VALUE=DATE:20220513T000000
DTEND;VALUE=DATE:20220513T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:From the Earth to the Moon: Spider episode [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=05&
 year=2022#assignment_318726
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T002200Z
UID:event-assignment-315259
DTSTART:20220518T000000Z
DTEND:20220518T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (5/17/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315259
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T002300Z
UID:event-assignment-315250
DTSTART:20220520T000000Z
DTEND:20220520T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (5/19/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315250
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318723
DTSTART;VALUE=DATE:20220519T000000
DTEND;VALUE=DATE:20220519T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Features & Functions - Lab Check [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=05&
 year=2022#assignment_318723
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318736
DTSTART;VALUE=DATE:20220520T000000
DTEND;VALUE=DATE:20220520T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Personas and scenarios extra credit [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=05&
 year=2022#assignment_318736
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T234200Z
UID:event-assignment-315230
DTSTART;VALUE=DATE:20220522T000000
DTEND;VALUE=DATE:20220522T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Custom Laboratory Project Demo Video #1 [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315230
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T001200Z
UID:event-assignment-315273
DTSTART:20220525T000000Z
DTEND:20220525T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:Midterm Exam #2 [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315273
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T002500Z
UID:event-assignment-315251
DTSTART:20220527T000000Z
DTEND:20220527T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (5/26/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315251
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318724
DTSTART;VALUE=DATE:20220527T000000
DTEND;VALUE=DATE:20220527T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Features & Functions (Spec) [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=05&
 year=2022#assignment_318724
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T234300Z
UID:event-assignment-315231
DTSTART;VALUE=DATE:20220529T000000
DTEND;VALUE=DATE:20220529T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Custom Laboratory Project Demo Video #2 [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315231
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T222100Z
UID:event-assignment-315239
DTSTART;VALUE=DATE:20220529T000000
DTEND;VALUE=DATE:20220529T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Extra Credit Homework #3 [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315239
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220318T002500Z
UID:event-assignment-315252
DTSTART:20220601T000000Z
DTEND:20220601T000000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:In-Class Exercises (5/31/22) [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=05&
 year=2022#assignment_315252
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318734
DTSTART;VALUE=DATE:20220601T000000
DTEND;VALUE=DATE:20220601T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Peer Feedback on Spec [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=06&
 year=2022#assignment_318734
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318721
DTSTART;VALUE=DATE:20220603T000000
DTEND;VALUE=DATE:20220603T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Extra Credit - Scenario 1: Business Case [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=06&
 year=2022#assignment_318721
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318722
DTSTART;VALUE=DATE:20220603T000000
DTEND;VALUE=DATE:20220603T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Extra Credit - Scenario 2: Analogy [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=06&
 year=2022#assignment_318722
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318719
DTSTART;VALUE=DATE:20220603T000000
DTEND;VALUE=DATE:20220603T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Extra Credit Report #3 [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=06&
 year=2022#assignment_318719
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318720
DTSTART;VALUE=DATE:20220603T000000
DTEND;VALUE=DATE:20220603T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Extra Credit Report #4 [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=06&
 year=2022#assignment_318720
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318725
DTSTART;VALUE=DATE:20220603T000000
DTEND;VALUE=DATE:20220603T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Final Spec Draft [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=06&
 year=2022#assignment_318725
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318746
DTSTART;VALUE=DATE:20220603T000000
DTEND;VALUE=DATE:20220603T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Test Cases [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=06&
 year=2022#assignment_318746
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220325T161900Z
UID:event-assignment-315240
DTSTART:20220604T214000Z
DTEND:20220604T214000Z
CLASS:PUBLIC
DESCRIPTION:
SEQUENCE:0
SUMMARY:Final Exam [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=06&
 year=2022#assignment_315240
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T234300Z
UID:event-assignment-315232
DTSTART;VALUE=DATE:20220605T000000
DTEND;VALUE=DATE:20220605T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Custom Laboratory Project Final Demo Video [CS_120B_001\, EE_120B_0
 01]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=06&
 year=2022#assignment_315232
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T234500Z
UID:event-assignment-315235
DTSTART;VALUE=DATE:20220605T000000
DTEND;VALUE=DATE:20220605T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Custom Laboratory Project Report [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=06&
 year=2022#assignment_315235
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220317T234400Z
UID:event-assignment-315236
DTSTART;VALUE=DATE:20220605T000000
DTEND;VALUE=DATE:20220605T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Custom Laboratory Project Source Code [CS_120B_001\, EE_120B_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_48816&month=06&
 year=2022#assignment_315236
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318728
DTSTART;VALUE=DATE:20220610T000000
DTEND;VALUE=DATE:20220610T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:How the multiple choice handout violates our writing guidelines [EN
 GR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=06&
 year=2022#assignment_318728
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20220322T165100Z
UID:event-assignment-318745
DTSTART;VALUE=DATE:20220610T000000
DTEND;VALUE=DATE:20220610T000000
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Subjective Final Turnin [ENGR_180W_001]
URL:https://elearn.ucr.edu/calendar?include_contexts=course_40070&month=06&
 year=2022#assignment_318745
END:VEVENT
END:VCALENDAR
